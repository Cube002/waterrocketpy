{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to waterrocketpy","text":"<p>A modular Python package for simulating water rockets.</p> <ul> <li>Free software: MIT License</li> <li>Documentation: https://Cube002.github.io/waterrocketpy</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#waterrocketpy.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>waterrocketpy/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Cube002/waterrocketpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>waterrocketpy could always use more documentation, whether as part of the official waterrocketpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Cube002/waterrocketpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up waterrocketpy for local development.</p> <ol> <li> <p>Fork the waterrocketpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/waterrocketpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv waterrocketpy\n$ cd waterrocketpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 waterrocketpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Cube002/waterrocketpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install waterrocketpy, run this command in your terminal:</p> <pre><code>pip install waterrocketpy\n</code></pre> <p>This is the preferred method to install waterrocketpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install waterrocketpy from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Cube002/waterrocketpy\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use waterrocketpy in a project:</p> <pre><code>import waterrocketpy\n</code></pre>"},{"location":"waterrocketpy/","title":"waterrocketpy module","text":"<p>Main module.</p>"},{"location":"Literature_sources/constants/","title":"Constants","text":"<p><code>constants.py</code></p> <pre><code>\"\"\"\nPhysical constants and default values for water rocket simulations.\n\"\"\"\n\n# Physical Constants\nGRAVITY = 9.81  # gravitational acceleration (m/s^2)\nWATER_DENSITY = 1000  # density of water (kg/m^3)\nAIR_DENSITY_SL = 1.225  # air density at sea level (kg/m^3)\nATMOSPHERIC_PRESSURE = 101325  # atmospheric pressure (Pa)\nADIABATIC_INDEX_AIR = 1.4  # adiabatic index for air\nINITIAL_TEMPERATURE = 300  # Initial temperature of air (K)\nAIR_SPECIFIC_HEAT_RATIO = 1.4  # ratio of specific heats for dry air (Cp/Cv)\nWATER_SPECIFIC_HEAT_RATIO = 1.01  # approximate Cp/Cv ratio for liquid water\n\n# Material Properties\nPET_DENSITY = 1380  # kg/m^3\nPET_TENSILE_STRENGTH = 75e6  # Pa (75 MPa)\n\nALUMINUM_DENSITY = 2700  # kg/m^3\nALUMINUM_TENSILE_STRENGTH = 310e6  # Pa (310 MPa for 6061-T6)\n\nSTEEL_DENSITY = 7850  # kg/m^3\nSTEEL_TENSILE_STRENGTH = 400e6  # Pa (mild steel)\n\nCARBONFIBER_DENSITY = 1600  # kg/m^3\nCARBONFIBER_TENSILE_STRENGTH = 600e6  # Pa (depends on weave, avg ~600 MPa)\n</code></pre>"},{"location":"Literature_sources/constants/#sources","title":"\ud83d\udcda Sources:","text":"<ul> <li> <p>Air Specific Heat Ratio:   NASA Glenn Research Center \u2013 Air Properties</p> </li> <li> <p>Water Specific Heat Ratio:   Water has $C_p \\approx 4.18 \\, \\text{kJ/kg\u00b7K}$, $C_v \\approx 4.14 \\, \\text{kJ/kg\u00b7K}$,   \u21d2 $\\gamma = C_p / C_v \\approx 1.01$</p> </li> <li> <p>PET (Polyethylene Terephthalate):</p> </li> <li> <p>Density: \\~1380 kg/m\u00b3</p> </li> <li> <p>Tensile strength: \\~75 MPa     Source: MatWeb - PET</p> </li> <li> <p>Aluminum (6061-T6):</p> </li> <li> <p>Density: 2700 kg/m\u00b3</p> </li> <li> <p>Tensile strength: 310 MPa     Source: MatWeb - 6061-T6</p> </li> <li> <p>Steel (Mild/Low Carbon):</p> </li> <li> <p>Density: 7850 kg/m\u00b3</p> </li> <li> <p>Tensile strength: 400 MPa (can range widely)     Source: AZO Materials - Mild Steel</p> </li> <li> <p>Carbon Fiber (Average):</p> </li> <li> <p>Density: \\~1600 kg/m\u00b3</p> </li> <li>Tensile strength: \\~600 MPa (varies by type and orientation)     Source: Matmatch - Carbon Fiber</li> </ul> <p>Let me know if you'd like to make these values configurable or include additional materials.</p>"},{"location":"Literature_sources/literature/","title":"AirThrust:","text":"<p>https://www.youtube.com/watch?v=p8e8A3sdVOg&amp;ab_channel=JoshTheEngineer</p>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>print('Hello World!')\n</pre> print('Hello World!') <pre>Hello World!\n</pre>"},{"location":"thinking/energy_flow/","title":"Energy flow","text":""},{"location":"thinking/energy_flow/#energy-flow-in-a-pet-water-rocket","title":"Energy Flow in a PET Water Rocket","text":"<p>At launch, all available energy is stored as internal energy in the pressurized air inside the rocket. As the rocket launches and the nozzle opens, this energy is transformed and distributed among various components:</p>"},{"location":"thinking/energy_flow/#1-internal-energy-of-the-pressurized-air","title":"1. Internal Energy of the Pressurized Air","text":"<ul> <li> <p>Stored Energy Source</p> </li> <li> <p>Comprised of pressure and temperature (i.e., enthalpy).</p> </li> <li> <p>Can be estimated via:</p> <p>$$ U_{\\text{air}} = m_{\\text{air}} \\cdot c_v \\cdot T $$   * Or for enthalpy:</p> <p>$$ H_{\\text{air}} = m_{\\text{air}} \\cdot c_p \\cdot T $$</p> </li> </ul>"},{"location":"thinking/energy_flow/#2-kinetic-potential-energy-of-the-rocket","title":"2. Kinetic &amp; Potential Energy of the Rocket","text":"<ul> <li> <p>Energy transferred to the empty rocket body and remaining internal fluid.</p> </li> <li> <p>Kinetic:</p> <p>$$ E_{\\text{kin, rocket}} = \\frac{1}{2} m_{\\text{rocket}} v^2 $$   * Potential:</p> <p>$$ E_{\\text{pot, rocket}} = m_{\\text{rocket}} g h $$   * Where:</p> <ul> <li>$m_{\\text{rocket}} = m_{\\text{empty}} + m_{\\text{air}} + m_{\\text{water}}$</li> </ul> </li> </ul>"},{"location":"thinking/energy_flow/#3-kinetic-potential-energy-of-the-remaining-water-inside-the-rocket","title":"3. Kinetic &amp; Potential Energy of the Remaining Water Inside the Rocket","text":"<ul> <li>Similar to the rocket, since the water is moving with the same velocity:</li> </ul> <p>$$   E_{\\text{kin, water-in}} = \\frac{1}{2} m_{\\text{water}} v^2, \\quad   E_{\\text{pot, water-in}} = m_{\\text{water}} g h   $$</p>"},{"location":"thinking/energy_flow/#4-kinetic-potential-energy-of-expelled-water","title":"4. Kinetic &amp; Potential Energy of Expelled Water","text":"<ul> <li>Represents the integral of kinetic and potential energy carried by water as it exits the nozzle:</li> </ul> <p>$$   E_{\\text{water-out}}(t) = \\int_0^t \\left( \\frac{1}{2} \\dot{m}{\\text{water}}(t') v(t') g h(t') \\right) dt'   $$}}(t')^2 + \\dot{m}_{\\text{water}</p> <ul> <li> <p>The values can be approximated using:</p> </li> <li> <p><code>water_mass(t)</code> (to find $\\dot{m}_{\\text{water}}$)</p> </li> <li><code>velocity(t)</code> (if water exhaust speed is approximated)</li> <li>Nozzle model for exhaust velocity</li> </ul>"},{"location":"thinking/energy_flow/#5-kinetic-potential-energy-of-expelled-air","title":"5. Kinetic &amp; Potential Energy of Expelled Air","text":"<ul> <li>Same principle as with water:</li> </ul> <p>$$   E_{\\text{air-out}}(t) = \\int_0^t \\left( \\frac{1}{2} \\dot{m}{\\text{air}}(t') v(t') g h(t') \\right) dt'   $$}}(t')^2 + \\dot{m}_{\\text{air}</p>"},{"location":"thinking/energy_flow/#6-energy-losses","title":"6. Energy Losses","text":"<ul> <li>Drag:</li> </ul> <p>$$   E_{\\text{drag}} = \\int_0^t D(t') \\cdot v(t') \\, dt'   $$</p> <p>Where <code>D(t')</code> is <code>drag(t')</code></p> <ul> <li> <p>Friction in Nozzle (if modeled separately)</p> </li> <li> <p>Can be represented as a percentage loss in thrust or internal pressure drop.</p> </li> </ul>"},{"location":"thinking/energy_flow/#mapping-to-flightdata","title":"Mapping to <code>FlightData</code>","text":"<p>Use the following from the <code>FlightData</code> object:</p> Quantity Related Energy <code>pressure</code>, <code>temperature</code>, <code>air_mass</code> Internal energy / enthalpy of air <code>altitude</code>, <code>velocity</code> Kinetic and potential of rocket and water <code>water_mass</code> Time evolution of remaining water (to compute expelled water) <code>air_mass</code> Time evolution of air loss <code>drag</code> Work done against drag <code>thrust</code> Related to momentum flux (especially for estimating exhaust velocity)"},{"location":"thinking/energy_flow/#summary","title":"Summary","text":"<p>You can express total energy flow as:</p> <p>$$ \\boxed{ E_{\\text{air-in}}(0) = E_{\\text{rocket}}(t) + E_{\\text{water-in}}(t) + E_{\\text{water-out}}(t) + E_{\\text{air-out}}(t) + E_{\\text{drag}} + E_{\\text{friction}} + \\text{(losses)} } $$</p> <p>Where each term represents the energy in various parts of the system at time $t$. The water/air \"as it left the rocket\" terms do represent the integral over the energy that exits the system \u2014 i.e., the total carried-away energy.</p>"}]}