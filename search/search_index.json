{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to WaterRocketPy","text":"<p>The comprehensive Python toolkit for water rocket simulation, analysis, and optimization.</p> <p>WaterRocketPy brings the fascinating physics of water rockets to your fingertips. Whether you're an educator demonstrating physics principles, a student conducting research, or an enthusiast optimizing your next launch, this package provides everything you need to understand and predict water rocket performance.</p>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get up and running in minutes:</p> <pre><code>pip install waterrocketpy\n</code></pre> <pre><code>from waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket\n\nrocket = create_standard_rocket()\nbuilder = RocketBuilder.from_dict(rocket.__dict__)\nsim_params = builder.to_simulation_params()\n\nsimulator = WaterRocketSimulator()\nflight_data = simulator.simulate(sim_params)\n\nprint(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\")\nprint(f\"Flight time: {flight_data.flight_time:.1f} s\")\n</code></pre>"},{"location":"#thats-it-youve-just-simulated-your-first-water-rocket","title":"That's it! You've just simulated your first water rocket.","text":""},{"location":"#key-capabilities","title":"Key Capabilities","text":""},{"location":"#physics-based-simulation-engine-core","title":"Physics-Based Simulation Engine (Core)","text":"<ul> <li>Complete Flight Modeling: From water thrust through air thrust to ballistic flight and landing</li> <li>Thermodynamic Accuracy: Temperature-dependent air expansion, pressure dynamics, and compressible flow</li> <li>Multiple Solver Support: Runge-Kutta methods (RK45, RK23) with adaptive time stepping</li> <li>Detailed Output: 20+ time-series parameters including forces, pressures, temperatures, and flow rates</li> </ul>"},{"location":"#rocket-design-configuration-rocket","title":"Rocket Design &amp; Configuration (Rocket)","text":"<ul> <li>Flexible Builder System: Create custom rockets with different bottle sizes, nozzles, and materials</li> <li>Material Database: Built-in properties for PET, HDPE, and other common bottle materials</li> <li>Standard Configurations: Pre-built rocket templates for quick prototyping</li> <li>Validation System: Automatic parameter checking for physical constraints</li> </ul>"},{"location":"#advanced-analysis-tools-analysis","title":"Advanced Analysis Tools (Analysis)","text":"<ul> <li>Parameter Explorer: Multi-dimensional sensitivity analysis with interactive visualizations</li> <li>Energy Breakdown: Detailed tracking of energy flow and losses throughout flight</li> <li>Phase Detection: Automatic identification of water thrust, air thrust, ballistic, and descent phases</li> <li>Statistical Analysis: Batch processing for Monte Carlo simulations and uncertainty quantification</li> </ul>"},{"location":"#optimization-capabilities-optimization","title":"Optimization Capabilities (Optimization)","text":"<ul> <li>Multi-Objective Optimization: Simultaneously optimize for altitude, velocity, and flight time</li> <li>Constraint Handling: Physical limits on pressure, geometry, and materials</li> <li>Algorithm Selection: Differential evolution, Nelder-Mead, and custom optimization strategies</li> <li>Design Exploration: Automated parameter sweeps and design space visualization</li> </ul>"},{"location":"#visualization-suite-visualization","title":"Visualization Suite (Visualization)","text":"<ul> <li>Flight Visualization: Plotting of all flight parameters with phase highlighting</li> <li>2D Trajectory Animation: Real-time flight path visualization for presentations</li> <li>Batch Comparison: Multi-run analysis with statistical summaries</li> <li>Energy Flow Diagrams: Sankey diagrams showing energy distribution and losses</li> </ul>"},{"location":"#package-architecture","title":"Package Architecture","text":"<p>WaterRocketPy is organized into six main modules, each serving a specific purpose:</p> <pre><code>waterrocketpy/\n\u251c\u2500\u2500 core/          # Simulation engine and physics calculations\n\u251c\u2500\u2500 rocket/        # Rocket design and configuration tools\n\u251c\u2500\u2500 optimization/  # Parameter optimization algorithms  \n\u251c\u2500\u2500 visualization/ # Plotting, animation, and data exploration\n\u251c\u2500\u2500 analysis/      # Advanced analysis and energy breakdowns\n\u2514\u2500\u2500 utils/         # Data I/O, validation, and utilities\n</code></pre> <p></p>"},{"location":"#core-module","title":"Core Module","text":"<p>The heart of WaterRocketPy, containing the physics engine and main simulator: - <code>simulation.py</code> - Main simulation controller and data management - <code>physics_engine.py</code> - All physics calculations and equations of motion - <code>constants.py</code> - Physical constants and default parameters - <code>validation.py</code> - Parameter validation and error checking</p>"},{"location":"#rocket-module","title":"Rocket Module","text":"<p>Tools for defining and building rocket configurations: - <code>builder.py</code> - Rocket builder classes and standard configurations - <code>geometry.py</code> - Geometric calculations for bottles and nozzles - <code>materials.py</code> - Material properties database and calculations</p>"},{"location":"#optimization-module","title":"Optimization Module","text":"<p>Advanced optimization capabilities for rocket design: - <code>water_rocket_optimizer.py</code> - Multi-objective optimization with various algorithms</p>"},{"location":"#visualization-module","title":"Visualization Module","text":"<p>Comprehensive plotting and animation tools: - <code>plot_flight_data.py</code> - Standard flight data visualization - <code>parameter_explorer.py</code> - Interactive parameter exploration - <code>flight_animation.py</code> - 3D trajectory animations</p>"},{"location":"#analysis-module","title":"Analysis Module","text":"<p>Advanced analysis tools for deeper insights: - <code>energy_breakdown.py</code> - Energy flow analysis throughout flight - <code>energy_breakdown_plot.py</code> - Visualization of energy distributions</p>"},{"location":"#utils-module","title":"Utils Module","text":"<p>Supporting utilities for data management: - <code>saver.py</code> - Save simulation results in multiple formats - <code>loader.py</code> - Load and process simulation data</p>"},{"location":"#getting-started","title":"Getting Started","text":""},{"location":"#installation","title":"Installation","text":"<p>From PyPI (Recommended): <pre><code>pip install waterrocketpy\n</code></pre></p> <p>From Source: <pre><code>git clone https://github.com/Cube002/waterrocketpy.git\ncd waterrocketpy\npip install -e .\n</code></pre></p>"},{"location":"#your-first-simulation","title":"Your First Simulation","text":"<p>Try our interactive examples:</p> <ul> <li>Bare Minimum Example - Get started in 30 seconds</li> <li>Getting Started Guide - Complete walkthrough with explanations  </li> <li>Introduction Notebook - Comprehensive introduction to all features</li> </ul>"},{"location":"#example-gallery","title":"Example Gallery","text":"<p>Explore real-world applications:</p> <pre><code># Parameter optimization\nfrom waterrocketpy.optimization import optimize_for_altitude\nresult = optimize_for_altitude(maxiter=50)\n\n# Energy analysis  \nfrom waterrocketpy.analysis import plot_energy_breakdown\nplot_energy_breakdown(flight_data)\n\n# Parameter exploration\nfrom waterrocketpy.visualization import ParameterExplorer\nexplorer = ParameterExplorer()\nexplorer.explore_parameters(param_ranges)\n</code></pre>"},{"location":"#educational-applications","title":"Educational Applications","text":"<p>WaterRocketPy is designed with education in mind:</p> <ul> <li>Physics Demonstrations: Instantly visualize complex physics concepts</li> <li>Student Research Projects: Tools for hypothesis testing and experimental design</li> <li>Competition Preparation: Optimize designs for maximum performance</li> <li>Curriculum Integration: Ready-made examples for classroom use</li> </ul>"},{"location":"#physics-concepts-covered","title":"Physics Concepts Covered","text":"<ul> <li>Fluid dynamics and Bernoulli's principle</li> <li>Thermodynamics and adiabatic processes  </li> <li>Conservation of mass, energy, and momentum</li> <li>Aerodynamics and drag modeling</li> <li>Optimization and engineering design</li> </ul>"},{"location":"#community-support","title":"Community &amp; Support","text":"<ul> <li>Documentation: Comprehensive guides and API reference</li> <li>Examples: 10+ detailed example scripts and Jupyter notebooks</li> <li>GitHub: Source code, issues, and discussions</li> <li>PyPI: Easy installation and version management</li> </ul>"},{"location":"#contributing","title":"Contributing","text":"<p>We welcome contributions of all kinds: - Bug reports and feature requests - Code improvements and new features - Documentation enhancements - Example scripts and use cases</p> <p>See our Contributing Guidelines for details.</p>"},{"location":"#license-credits","title":"License &amp; Credits","text":"<ul> <li>License: MIT License - Free for academic and commercial use</li> <li>Author: Pablo M (pablo.marg8@gmail.com)</li> <li>Physics Models: Based on established fluid dynamics principles</li> <li>Dependencies: NumPy, SciPy, Matplotlib</li> </ul> <p>Ready to explore the physics of water rockets? Get started now \u2192</p>"},{"location":"changelog/","title":"Changelog","text":"<p>I will try to keep this changelog complete so that all notable changes to WaterRocketPy will be documented in this file. Otherwise I refer to the git-repo for the most up to date changes. The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#021-2025-07-27","title":"[0.2.1] - 2025-07-27","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Brand Identity: Added logo and favicon for documentation (b71f0c2)</li> <li>Documentation Examples: Added <code>bare_minimum.ipynb</code> example for quick start (3dca9f0)</li> <li>Development Tools: Enhanced <code>fix_typos.py</code> script for better spell checking (1e7a378)</li> <li>Documentation Structure: Improved documentation index and navigation (e5a9e38)</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Testing Framework: Switched from unittest to pytest for better testing experience (a24b478)</li> <li>Code Cleanup: Removed legacy code and cleaned up file structure (e5a9e38)</li> <li>Documentation: Improved getting started guide and examples (3dca9f0)</li> <li>Spell Checking: Jupyter notebooks now excluded from automatic spell checking (a9b3326)</li> </ul>"},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Development Setup: Fixed testing issues and improved CI/CD pipeline (3dca9f0)</li> <li>File Organization: Better organization of documentation assets (6e16e4a)</li> </ul>"},{"location":"changelog/#020-2024","title":"[0.2.0] - 2024","text":""},{"location":"changelog/#major-features-added","title":"Major Features Added","text":"<ul> <li>Advanced Optimization Module: Complete rocket design optimization system (598d68b)</li> <li>Multi-objective optimization (altitude, velocity, flight time)</li> <li>Support for differential evolution and minimization algorithms</li> <li>Constraint handling for physical limitations</li> <li>Comprehensive example scripts and tests</li> <li>Parameter Explorer: Multi-dimensional parameter sensitivity analysis (51be841)</li> <li>Visual sensitivity analysis plots</li> <li>Batch parameter sweeps</li> <li>Statistical analysis of parameter effects</li> <li>Data Management System: Flight data saving and loading utilities (9436114)</li> <li>JSON and NPZ format support</li> <li>Comprehensive data persistence</li> <li>Test coverage for data operations</li> <li>Advanced Visualization: Flight data plotting and animation (407e1c3)</li> <li>Comprehensive flight phase visualization</li> <li>Animated trajectory plots</li> <li>Multi-plot dashboard for complete analysis</li> <li>Performance Improvements: Enhanced simulation engine (e6b0b7e)</li> <li>Fixed divide-by-zero errors in time series concatenation</li> <li>Improved numerical stability</li> <li>Better memory management</li> </ul>"},{"location":"changelog/#infrastructure-quality","title":"Infrastructure &amp; Quality","text":"<ul> <li>Testing Suite: Comprehensive test coverage (60caad4)</li> <li>Tests for simulator, optimizer, and parameter explorer</li> <li>CI/CD integration with pytest and pytest-cov</li> <li>Automated code linting and quality checks</li> <li>Documentation System: MkDocs-based documentation (6e16e4a)</li> <li>Automated API documentation generation (2f4444a)</li> <li>Interactive Jupyter notebook examples</li> <li>Literature references and theoretical background</li> <li>Development Workflow: Enhanced development experience (4fac3f3)</li> <li>Restructured dependencies and requirements</li> <li>GitHub Actions for automated testing</li> <li>Cross-platform compatibility (Windows, Ubuntu, macOS)</li> </ul>"},{"location":"changelog/#package-structure","title":"Package Structure","text":"<ul> <li>Modular Architecture: Organized codebase into logical modules</li> <li><code>waterrocketpy/optimization/</code> - Optimization algorithms</li> <li><code>waterrocketpy/visualization/</code> - Plotting and animation tools</li> <li><code>waterrocketpy/utils/</code> - Data management utilities</li> <li>Enhanced <code>waterrocketpy/rocket/</code> - Rocket configuration tools</li> </ul>"},{"location":"changelog/#010-2024","title":"[0.1.0] - 2024","text":""},{"location":"changelog/#physics-engine-enhancements","title":"Physics Engine Enhancements","text":"<ul> <li>Temperature Modeling: Fixed air temperature calculations during expansion (a494d89)</li> <li>Energy Analysis: Complete energy breakdown analysis system (321cfd5)</li> <li>Energy flow tracking throughout flight phases</li> <li>Detailed energy distribution plots</li> <li>Thermodynamic efficiency calculations</li> <li>Performance Optimization: (7a3f076)</li> <li>Combined derived data collection with ODE calculations</li> <li>Reduced computational overhead by calculating once instead of twice</li> <li>Improved simulation consistency and accuracy</li> </ul>"},{"location":"changelog/#documentation-literature","title":"Documentation &amp; Literature","text":"<ul> <li>Literature Integration: Added comprehensive literature sources (321cfd5)</li> <li>Theoretical Foundation: Energy flow documentation and physics explanations (bf37bfd)</li> <li>Reference Runs: Baseline simulation results for validation</li> </ul>"},{"location":"changelog/#code-quality","title":"Code Quality","text":"<ul> <li>Enhanced Attributes: Better data structure organization (bf37bfd)</li> <li>Bug Fixes: Resolved pressure calculation issues</li> <li>Data Consistency: Improved data handling and validation</li> </ul>"},{"location":"changelog/#002-2024","title":"[0.0.2] - 2024","text":""},{"location":"changelog/#critical-fixes","title":"Critical Fixes","text":"<ul> <li>Pressure Calculations: Fixed fundamental pressure calculation errors (7207ac3)</li> <li>Requirements: Updated package dependencies for better compatibility (1c85346)</li> </ul>"},{"location":"changelog/#system-improvements","title":"System Improvements","text":"<ul> <li>Core Updates: Various system-level improvements and optimizations (716223a)</li> </ul>"},{"location":"changelog/#001-2024","title":"[0.0.1] - 2024","text":""},{"location":"changelog/#initial-release","title":"Initial Release","text":"<ul> <li>Core Simulation Engine: Complete water rocket physics simulation (11880e3)</li> <li>Water and air mass flow modeling</li> <li>Pressure dynamics during thrust phase</li> <li>Aerodynamic drag modeling</li> <li>Multi-phase flight simulation (thrust, ballistic, landing)</li> <li>Rocket Builder: Flexible rocket configuration system</li> <li>Standard bottle configurations (2L PET bottles)</li> <li>Custom nozzle designs</li> <li>Material property database</li> <li>Basic Visualization: Essential plotting capabilities</li> <li>Example Scripts: Demonstration of core functionality</li> <li>Package Infrastructure: </li> <li>PyPI packaging setup</li> <li>MIT License</li> <li>Basic documentation structure</li> </ul>"},{"location":"changelog/#foundation-architecture","title":"Foundation Architecture","text":"<ul> <li>Physics Engine: Accurate fluid dynamics and thermodynamics modeling</li> <li>Builder System: Object-oriented rocket configuration</li> <li>Data Output: Comprehensive time-series flight data</li> <li>Validation: Parameter validation and error handling</li> </ul>"},{"location":"changelog/#development-notes","title":"Development Notes","text":""},{"location":"changelog/#version-numbering","title":"Version Numbering","text":"<ul> <li>According to the standards of Semantic Versioning 2.0.0</li> <li>Major versions (X.0.0): Significant API changes or major feature additions</li> <li>Minor versions (0.X.0): New features, backward-compatible improvements</li> <li>Patch versions (0.0.X): Bug fixes, documentation updates, minor stuff</li> </ul>"},{"location":"changelog/#key-contributors","title":"Key Contributors","text":"<ul> <li>Primary Development: Pablo</li> <li>Legacy Physics Engine: Pablo, Jonathan</li> <li>License: MIT License</li> </ul>"},{"location":"changelog/#roadmap-highlights","title":"Roadmap Highlights","text":"<ul> <li>Core simulation engine (v0.0.1)</li> <li>Physics accuracy improvements (v0.0.2)</li> <li>Energy analysis system (v0.1.0) </li> <li>Optimization and advanced analysis (v0.2.0)</li> <li> <p>Documentation and tooling (v0.2.1)</p> </li> <li> <p>Future: GUI interface, 2.5D visualization, multi-stage rockets, Heatreanfer through the rocket walls, propane and other gases, parashute deployment and affect on decent, rocket spin about the vertical axis.</p> </li> </ul>"},{"location":"changelog/#todo-s","title":"TODO\u00b4s","text":"<ul> <li>Still working on the sonic air exhaust. This part is still not perfekt as it does not cover pressure spikes.</li> <li>More experimental data needed for a perfekt drag model.</li> <li>Speed dependent aerodynamik model based on modelrockets.</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/Cube002/waterrocketpy/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>waterrocketpy could always use more documentation, whether as part of the official waterrocketpy docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/Cube002/waterrocketpy/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up waterrocketpy for local development.</p> <ol> <li> <p>Fork the waterrocketpy repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/waterrocketpy.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv waterrocketpy\n$ cd waterrocketpy/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 waterrocketpy tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/Cube002/waterrocketpy/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install waterrocketpy, run this command in your terminal:</p> <pre><code>pip install waterrocketpy\n</code></pre> <p>This is the preferred method to install waterrocketpy, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>To install waterrocketpy from sources, run this command in your terminal:</p> <pre><code>pip install git+https://github.com/Cube002/waterrocketpy\n</code></pre>"},{"location":"usage/","title":"Usage Guide","text":""},{"location":"usage/#quick-start","title":"Quick Start","text":""},{"location":"usage/#installation","title":"Installation","text":"<pre><code>pip install waterrocketpy\n</code></pre>"},{"location":"usage/#30-second-example","title":"30-Second Example","text":"<pre><code>from waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket\n\nrocket = create_standard_rocket()\nbuilder = RocketBuilder.from_dict(rocket.__dict__)\nsim_params = builder.to_simulation_params()\n\nsimulator = WaterRocketSimulator()\nflight_data = simulator.simulate(sim_params)\n\nprint(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\")\n</code></pre>"},{"location":"usage/#custom-rocket","title":"Custom Rocket","text":"<pre><code>\"\"\"\nMinimal test script to verify the water rocket simulation works.\n\"\"\"\n\nimport sys\nimport os\n\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket\n\nprint(\"\u2713 All imports successful\")\n\n# Create a simple rocket\nprint(\"\\n1. Creating standard rocket...\")\nrocket = create_standard_rocket()\n\nprint(f\"   Rocket created: {rocket.name}\")\nprint(f\"   Total mass: {rocket.total_mass:.3f} kg\")\n\n# Convert to simulation parameters\nprint(\"\\n2. Converting to simulation parameters...\")\nbuilder = RocketBuilder.from_dict(rocket.__dict__)\nsim_params = builder.to_simulation_params()\nprint(f\"   Parameters ready: {len(sim_params)} parameters\")\n\n# Run simulation\nprint(\"\\n3. Running simulation...\")\nsimulator = WaterRocketSimulator()\n\n# Short simulation for testing\nsim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\nflight_data = simulator.simulate(sim_params, sim_settings)\n\n\nprint(f\"   \u2713 Simulation completed successfully!\")\nprint(f\"   Maximum altitude: {flight_data.max_altitude:.2f} m\")\nprint(f\"   Maximum velocity: {flight_data.max_velocity:.2f} m/s\")\nprint(f\"   Flight time: {flight_data.flight_time:.2f} s\")\nprint(f\"   Data points: {len(flight_data.time)}\")\n\nprint(\"\\n\u2713 Your simulation is working correctly.\")\n</code></pre> <p>This guide covers the simple examples for WaterRocketPy. For additional examples and detailed API documentation, refer to the API Reference and Example Notebooks.</p>"},{"location":"usage/#future-contents","title":"Future Contents","text":"<ol> <li>Quick Start</li> <li>Basic Simulation</li> <li>Rocket Configuration</li> <li>Advanced Analysis</li> <li>Optimization</li> <li>Visualization</li> <li>Data Management</li> <li>Batch Processing</li> <li>Common Use Cases</li> <li>Tips &amp; Best Practices</li> </ol>"},{"location":"Literature_sources/constants/","title":"Constants","text":"<p><code>constants.py</code></p> <pre><code>\"\"\"\nPhysical constants and default values for water rocket simulations.\n\"\"\"\n\n# Physical Constants\nGRAVITY = 9.81  # gravitational acceleration (m/s^2)\nWATER_DENSITY = 1000  # density of water (kg/m^3)\nAIR_DENSITY_SL = 1.225  # air density at sea level (kg/m^3)\nATMOSPHERIC_PRESSURE = 101325  # atmospheric pressure (Pa)\nADIABATIC_INDEX_AIR = 1.4  # adiabatic index for air\nINITIAL_TEMPERATURE = 300  # Initial temperature of air (K)\nAIR_SPECIFIC_HEAT_RATIO = 1.4  # ratio of specific heats for dry air (Cp/Cv)\nWATER_SPECIFIC_HEAT_RATIO = 1.01  # approximate Cp/Cv ratio for liquid water\n\n# Material Properties\nPET_DENSITY = 1380  # kg/m^3\nPET_TENSILE_STRENGTH = 75e6  # Pa (75 MPa)\n\nALUMINUM_DENSITY = 2700  # kg/m^3\nALUMINUM_TENSILE_STRENGTH = 310e6  # Pa (310 MPa for 6061-T6)\n\nSTEEL_DENSITY = 7850  # kg/m^3\nSTEEL_TENSILE_STRENGTH = 400e6  # Pa (mild steel)\n\nCARBONFIBER_DENSITY = 1600  # kg/m^3\nCARBONFIBER_TENSILE_STRENGTH = 600e6  # Pa (depends on weave, avg ~600 MPa)\n</code></pre>"},{"location":"Literature_sources/constants/#sources","title":"\ud83d\udcda Sources:","text":"<ul> <li> <p>Air Specific Heat Ratio:   NASA Glenn Research Center \u2013 Air Properties</p> </li> <li> <p>Water Specific Heat Ratio:   Water has $C_p \\approx 4.18 \\, \\text{kJ/kg\u00b7K}$, $C_v \\approx 4.14 \\, \\text{kJ/kg\u00b7K}$,   \u21d2 $\\gamma = C_p / C_v \\approx 1.01$</p> </li> <li> <p>PET (Polyethylene Terephthalate):</p> </li> <li> <p>Density: \\~1380 kg/m\u00b3</p> </li> <li> <p>Tensile strength: \\~75 MPa     Source: MatWeb - PET</p> </li> <li> <p>Aluminum (6061-T6):</p> </li> <li> <p>Density: 2700 kg/m\u00b3</p> </li> <li> <p>Tensile strength: 310 MPa     Source: MatWeb - 6061-T6</p> </li> <li> <p>Steel (Mild/Low Carbon):</p> </li> <li> <p>Density: 7850 kg/m\u00b3</p> </li> <li> <p>Tensile strength: 400 MPa (can range widely)     Source: AZO Materials - Mild Steel</p> </li> <li> <p>Carbon Fiber (Average):</p> </li> <li> <p>Density: \\~1600 kg/m\u00b3</p> </li> <li>Tensile strength: \\~600 MPa (varies by type and orientation)     Source: Matmatch - Carbon Fiber</li> </ul> <p>Let me know if you'd like to make these values configurable or include additional materials.</p>"},{"location":"Literature_sources/literature/","title":"AirThrust:","text":"<p>https://www.youtube.com/watch?v=p8e8A3sdVOg&amp;ab_channel=JoshTheEngineer</p>"},{"location":"Literature_sources/literature/#airthrust-for-water-rockets","title":"AirThrust for water rockets:","text":"<p>https://www.et.byu.edu/~wheeler/benchtop/pix/thrust_eqns.pdf</p>"},{"location":"Literature_sources/literature/#drag","title":"Drag:","text":"<p>http://ftp.demec.ufpr.br/foguete/bibliografia/TR-11%20AERODYNAMIC%20DRAG%20OF%20MODEL%20ROCKET.pdf</p>"},{"location":"api/main/","title":"waterrocketpy.main","text":""},{"location":"api/analysis/energy_breakdown/","title":"waterrocketpy.analysis.energy_breakdown","text":""},{"location":"api/analysis/energy_breakdown/#waterrocketpy.analysis.energy_breakdown.EnergyComponents","title":"<code> EnergyComponents        </code>  <code>dataclass</code>","text":"<p>Container for energy breakdown results.</p> Source code in <code>waterrocketpy/analysis/energy_breakdown.py</code> <pre><code>@dataclass\nclass EnergyComponents:\n    \"\"\"Container for energy breakdown results.\"\"\"\n\n    time: np.ndarray\n\n    # Internal energy\n    air_internal_energy: np.ndarray\n\n    # Rocket system energy\n    rocket_kinetic_energy: np.ndarray\n    rocket_potential_energy: np.ndarray\n    water_in_kinetic_energy: np.ndarray\n    water_in_potential_energy: np.ndarray\n\n    # Expelled fluid energy (cumulative)\n    water_out_kinetic_energy: np.ndarray\n    water_out_potential_energy: np.ndarray\n    air_out_kinetic_energy: np.ndarray\n    air_out_potential_energy: np.ndarray\n\n    # Energy losses (cumulative)\n    drag_energy_loss: np.ndarray\n\n    # Total energy accounting\n    total_initial_energy: float\n    total_final_energy: np.ndarray\n    energy_conservation_error: np.ndarray\n\n    # Summary values\n    max_kinetic_energy: float\n    max_potential_energy: float\n    total_drag_loss: float\n    total_expelled_energy: float\n</code></pre>"},{"location":"api/analysis/energy_breakdown/#waterrocketpy.analysis.energy_breakdown.tenergy_breakdown","title":"<code>tenergy_breakdown(flight_data, rocket_params)</code>","text":"<p>Perform comprehensive energy breakdown analysis of water rocket flight.</p> <p>Parameters:</p> Name Type Description Default <code>flight_data</code> <p>FlightData object from simulation</p> required <code>rocket_params</code> <code>Dict[str, Any]</code> <p>Rocket configuration parameters</p> required <p>Returns:</p> Type Description <code>EnergyComponents</code> <p>EnergyComponents object with detailed energy analysis</p> Source code in <code>waterrocketpy/analysis/energy_breakdown.py</code> <pre><code>def tenergy_breakdown(\n    flight_data, rocket_params: Dict[str, Any]\n) -&gt; EnergyComponents:\n    \"\"\"\n    Perform comprehensive energy breakdown analysis of water rocket flight.\n\n    Args:\n        flight_data: FlightData object from simulation\n        rocket_params: Rocket configuration parameters\n\n    Returns:\n        EnergyComponents object with detailed energy analysis\n    \"\"\"\n\n    # Extract data arrays\n    time = flight_data.time\n    altitude = flight_data.altitude\n    velocity = flight_data.velocity\n    water_mass = flight_data.water_mass\n    air_mass = flight_data.air_mass\n    pressure = flight_data.pressure\n    air_temperature = flight_data.air_temperature\n    drag = flight_data.drag\n    thrust = flight_data.thrust\n\n    # Calculate rocket mass components\n    m_empty = rocket_params[\"m_empty\"]\n    total_mass = m_empty + water_mass + air_mass\n\n    # 1. Internal Energy of Pressurized Air\n    # Using U = m * cv * T for internal energy\n    air_internal_energy = air_mass * AIR_SPECIFIC_HEAT_CV * air_temperature\n\n    # 2. Kinetic Energy of Rocket System\n    rocket_kinetic_energy = 0.5 * total_mass * velocity**2\n\n    # 3. Potential Energy of Rocket System\n    rocket_potential_energy = total_mass * GRAVITY * altitude\n\n    # 4. Kinetic Energy of Water Inside Rocket\n    water_in_kinetic_energy = 0.5 * water_mass * velocity**2\n\n    # 5. Potential Energy of Water Inside Rocket\n    water_in_potential_energy = water_mass * GRAVITY * altitude\n\n    # 6. Energy of Expelled Water (cumulative integration)\n    water_out_kinetic_energy = np.zeros_like(time)\n    water_out_potential_energy = np.zeros_like(time)\n\n    # Calculate expelled water energy by integrating over time\n    for i in range(1, len(time)):\n        dt = time[i] - time[i - 1]\n\n        # Water mass flow rate (negative since mass is decreasing) NOOOO its\n        # the other way around! leaving water / air is defined as positive in\n        # the simulation\n        if i &lt; len(flight_data.water_mass_flow_rate):\n            dm_water_dt = flight_data.water_mass_flow_rate[i]\n        else:\n            dm_water_dt = 0.0\n\n        if dm_water_dt &gt; 0:  # Water is being expelled\n            # Estimate water exhaust velocity\n            if flight_data.water_exhaust_speed[i] is not None:\n                v_exhaust = flight_data.water_exhaust_speed[i]\n            else:\n                # Fallback: estimate from thrust and mass flow rate\n                if dm_water_dt &gt; 0:\n                    v_exhaust = (\n                        thrust[i] / dm_water_dt if dm_water_dt &gt; 1e-10 else 0.0\n                    )\n                else:\n                    v_exhaust = 0.0\n\n            # Energy carried away by expelled water\n            dE_kin_water = 0.5 * dm_water_dt * v_exhaust**2 * dt\n            dE_pot_water = dm_water_dt * GRAVITY * altitude[i] * dt\n\n            water_out_kinetic_energy[i] = (\n                water_out_kinetic_energy[i - 1] + dE_kin_water\n            )\n            water_out_potential_energy[i] = (\n                water_out_potential_energy[i - 1] + dE_pot_water\n            )\n        else:\n            water_out_kinetic_energy[i] = water_out_kinetic_energy[i - 1]\n            water_out_potential_energy[i] = water_out_potential_energy[i - 1]\n\n    # 7. Energy of Expelled Air (cumulative integration)\n    air_out_kinetic_energy = np.zeros_like(time)\n    air_out_potential_energy = np.zeros_like(time)\n\n    for i in range(1, len(time)):\n        dt = time[i] - time[i - 1]\n\n        # Air mass flow rate\n        if i &lt; len(flight_data.air_mass_flow_rate):\n            dm_air_dt = flight_data.air_mass_flow_rate[i]\n        else:\n            dm_air_dt = 0.0\n\n        if dm_air_dt &gt; 0:  # Air is being expelled\n            # Estimate air exhaust velocity -&gt; leaving water / air is defined\n            # as positive in the simulation\n            if flight_data.air_exhaust_speed[i] is not None:\n                v_exhaust_air = flight_data.air_exhaust_speed[i]\n            else:\n                # Fallback: estimate from thrust and mass flow rate\n                if dm_air_dt &gt; 0:\n                    v_exhaust_air = (\n                        thrust[i] / dm_air_dt if dm_air_dt &gt; 1e-10 else 0.0\n                    )\n                else:\n                    v_exhaust_air = 0.0\n\n            # Energy carried away by expelled air\n            dE_kin_air = 0.5 * dm_air_dt * v_exhaust_air**2 * dt\n            dE_pot_air = dm_air_dt * GRAVITY * altitude[i] * dt\n\n            air_out_kinetic_energy[i] = (\n                air_out_kinetic_energy[i - 1] + dE_kin_air\n            )\n            air_out_potential_energy[i] = (\n                air_out_potential_energy[i - 1] + dE_pot_air\n            )\n        else:\n            air_out_kinetic_energy[i] = air_out_kinetic_energy[i - 1]\n            air_out_potential_energy[i] = air_out_potential_energy[i - 1]\n\n    # 8. Energy Loss Due to Drag (cumulative)\n    drag_energy_loss = np.zeros_like(time)\n    for i in range(1, len(time)):\n        dt = time[i] - time[i - 1]\n        # Energy lost to drag = drag force * distance = drag * velocity * dt\n        dE_drag = abs(drag[i]) * abs(velocity[i]) * dt\n        drag_energy_loss[i] = drag_energy_loss[i - 1] + dE_drag\n\n    # 9. Calculate Initial Total Energy\n    # Initial energy is stored as internal energy in pressurized air\n    initial_air_volume = rocket_params[\"V_bottle\"] * (\n        1 - rocket_params[\"water_fraction\"]\n    )\n    initial_air_mass = (rocket_params[\"P0\"] * initial_air_volume) / (\n        287.0 * INITIAL_TEMPERATURE\n    )  # Using ideal gas law\n    total_initial_energy = (\n        initial_air_mass * AIR_SPECIFIC_HEAT_CV * INITIAL_TEMPERATURE\n    )\n\n    # 10. Energy Conservation Check\n    # Total energy at time t should equal:\n    # Internal + Kinetic + Potential + Expelled + Losses\n    total_final_energy = (\n        air_internal_energy\n        + rocket_kinetic_energy\n        + rocket_potential_energy\n        + water_out_kinetic_energy\n        + water_out_potential_energy\n        + air_out_kinetic_energy\n        + air_out_potential_energy\n        + drag_energy_loss\n    )\n\n    energy_conservation_error = (\n        abs(total_final_energy - total_initial_energy)\n        / total_initial_energy\n        * 100\n    )\n\n    # Calculate summary values\n    max_kinetic_energy = np.max(rocket_kinetic_energy)\n    max_potential_energy = np.max(rocket_potential_energy)\n    total_drag_loss = drag_energy_loss[-1]\n    total_expelled_energy = (\n        water_out_kinetic_energy[-1]\n        + water_out_potential_energy[-1]\n        + air_out_kinetic_energy[-1]\n        + air_out_potential_energy[-1]\n    )\n\n    return EnergyComponents(\n        time=time,\n        air_internal_energy=air_internal_energy,\n        rocket_kinetic_energy=rocket_kinetic_energy,\n        rocket_potential_energy=rocket_potential_energy,\n        water_in_kinetic_energy=water_in_kinetic_energy,\n        water_in_potential_energy=water_in_potential_energy,\n        water_out_kinetic_energy=water_out_kinetic_energy,\n        water_out_potential_energy=water_out_potential_energy,\n        air_out_kinetic_energy=air_out_kinetic_energy,\n        air_out_potential_energy=air_out_potential_energy,\n        drag_energy_loss=drag_energy_loss,\n        total_initial_energy=total_initial_energy,\n        total_final_energy=total_final_energy,\n        energy_conservation_error=energy_conservation_error,\n        max_kinetic_energy=max_kinetic_energy,\n        max_potential_energy=max_potential_energy,\n        total_drag_loss=total_drag_loss,\n        total_expelled_energy=total_expelled_energy,\n    )\n</code></pre>"},{"location":"api/analysis/energy_breakdown_plot/","title":"waterrocketpy.analysis.energy_breakdown_plot","text":""},{"location":"api/analysis/energy_breakdown_plot/#waterrocketpy.analysis.energy_breakdown_plot--energy-breakdown-analysis-module","title":"Energy Breakdown Analysis Module","text":"<p>This module provides functions to plot the energy breakdown of water rocket flights. The calculations are done in energy_breakdown.py, and the plotting is handled in energy_breakdown_plot.py.</p> <ol> <li>Create energy breakdown plots</li> <li>Understand energy flow through the system</li> </ol>"},{"location":"api/analysis/energy_breakdown_plot/#waterrocketpy.analysis.energy_breakdown_plot.create_energy_plots","title":"<code>create_energy_plots(energy_components, flight_data)</code>","text":"<p>Create comprehensive energy breakdown plots.</p> Source code in <code>waterrocketpy/analysis/energy_breakdown_plot.py</code> <pre><code>def create_energy_plots(energy_components, flight_data):\n    \"\"\"Create comprehensive energy breakdown plots.\"\"\"\n\n    # Set up the plotting style\n    plt.style.use(\"seaborn-v0_8\")\n    colors = {\n        \"internal\": \"#FF6B6B\",\n        \"kinetic\": \"#4ECDC4\",\n        \"potential\": \"#45B7D1\",\n        \"expelled\": \"#96CEB4\",\n        \"losses\": \"#FFEAA7\",\n        \"total\": \"#2D3436\",\n    }\n\n    # Create figure with subplots\n    fig = plt.figure(figsize=(16, 12))\n    gs = fig.add_gridspec(3, 2, hspace=0.3, wspace=0.3)\n\n    # Main energy breakdown plot (large, spanning top row)\n    ax1 = fig.add_subplot(gs[0, :])\n\n    # Calculate combined energy components for stacked plot\n    time = energy_components.time\n\n    # Energy stored in the system\n    internal_energy = energy_components.air_internal_energy\n    kinetic_energy = energy_components.rocket_kinetic_energy\n    potential_energy = energy_components.rocket_potential_energy\n\n    # Energy that left the system\n    expelled_kinetic = (\n        energy_components.water_out_kinetic_energy\n        + energy_components.air_out_kinetic_energy\n    )\n    expelled_potential = (\n        energy_components.water_out_potential_energy\n        + energy_components.air_out_potential_energy\n    )\n    expelled_total = expelled_kinetic + expelled_potential\n\n    # Energy losses\n    drag_losses = energy_components.drag_energy_loss\n\n    # Create stacked area plot\n    ax1.fill_between(\n        time,\n        0,\n        internal_energy,\n        color=colors[\"internal\"],\n        alpha=0.8,\n        label=\"Internal Energy (Air)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy,\n        internal_energy + kinetic_energy,\n        color=colors[\"kinetic\"],\n        alpha=0.8,\n        label=\"Kinetic Energy (Rocket)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy,\n        internal_energy + kinetic_energy + potential_energy,\n        color=colors[\"potential\"],\n        alpha=0.8,\n        label=\"Potential Energy (Rocket)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy + potential_energy,\n        internal_energy + kinetic_energy + potential_energy + expelled_total,\n        color=colors[\"expelled\"],\n        alpha=0.8,\n        label=\"Expelled Energy (Water + Air)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy + potential_energy + expelled_total,\n        internal_energy\n        + kinetic_energy\n        + potential_energy\n        + expelled_total\n        + drag_losses,\n        color=colors[\"losses\"],\n        alpha=0.8,\n        label=\"Energy Losses (Drag)\",\n    )\n\n    # Add total energy line\n    total_energy = (\n        internal_energy\n        + kinetic_energy\n        + potential_energy\n        + expelled_total\n        + drag_losses\n    )\n    ax1.plot(\n        time,\n        total_energy,\n        color=colors[\"total\"],\n        linewidth=2,\n        label=f\"Total Energy (Initial: {energy_components.total_initial_energy:.0f} J)\",\n    )\n\n    # Add vertical lines for phase transitions\n    if flight_data.water_depletion_time &gt; 0:\n        ax1.axvline(\n            flight_data.water_depletion_time,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Water Depletion\",\n        )\n    if flight_data.air_depletion_time &gt; 0:\n        ax1.axvline(\n            flight_data.air_depletion_time,\n            color=\"orange\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Air Depletion\",\n        )\n\n    ax1.set_xlabel(\"Time (s)\")\n    ax1.set_ylabel(\"Energy (J)\")\n    ax1.set_title(\n        \"Complete Energy Breakdown Over Time\", fontsize=14, fontweight=\"bold\"\n    )\n    ax1.legend(loc=\"upper right\", bbox_to_anchor=(1.02, 1))\n    ax1.grid(True, alpha=0.3)\n\n    # Detailed kinetic energy breakdown\n    ax2 = fig.add_subplot(gs[1, 0])\n    ax2.plot(\n        time,\n        energy_components.rocket_kinetic_energy,\n        color=colors[\"kinetic\"],\n        linewidth=2,\n        label=\"Rocket Kinetic\",\n    )\n    ax2.plot(\n        time,\n        energy_components.water_out_kinetic_energy,\n        color=\"#74b9ff\",\n        linewidth=2,\n        label=\"Expelled Water Kinetic\",\n    )\n    ax2.plot(\n        time,\n        energy_components.air_out_kinetic_energy,\n        color=\"#a29bfe\",\n        linewidth=2,\n        label=\"Expelled Air Kinetic\",\n    )\n    ax2.set_xlabel(\"Time (s)\")\n    ax2.set_ylabel(\"Kinetic Energy (J)\")\n    ax2.set_title(\"Kinetic Energy Components\")\n    ax2.legend()\n    ax2.grid(True, alpha=0.3)\n\n    # Detailed potential energy breakdown\n    ax3 = fig.add_subplot(gs[1, 1])\n    ax3.plot(\n        time,\n        energy_components.rocket_potential_energy,\n        color=colors[\"potential\"],\n        linewidth=2,\n        label=\"Rocket Potential\",\n    )\n    ax3.plot(\n        time,\n        energy_components.water_out_potential_energy,\n        color=\"#00b894\",\n        linewidth=2,\n        label=\"Expelled Water Potential\",\n    )\n    ax3.plot(\n        time,\n        energy_components.air_out_potential_energy,\n        color=\"#00cec9\",\n        linewidth=2,\n        label=\"Expelled Air Potential\",\n    )\n    ax3.set_xlabel(\"Time (s)\")\n    ax3.set_ylabel(\"Potential Energy (J)\")\n    ax3.set_title(\"Potential Energy Components\")\n    ax3.legend()\n    ax3.grid(True, alpha=0.3)\n\n    # Energy conservation check\n    ax4 = fig.add_subplot(gs[2, 0])\n    ax4.plot(\n        time,\n        energy_components.energy_conservation_error,\n        color=\"red\",\n        linewidth=2,\n    )\n    ax4.set_xlabel(\"Time (s)\")\n    ax4.set_ylabel(\"Conservation Error (%)\")\n    ax4.set_title(\"Energy Conservation Error\")\n    ax4.grid(True, alpha=0.3)\n\n    # Energy flow rates\n    ax5 = fig.add_subplot(gs[2, 1])\n\n    # Calculate energy flow rates (derivatives)\n    dt = np.diff(time)\n    expelled_rate = np.diff(expelled_total) / dt\n    drag_rate = np.diff(drag_losses) / dt\n\n    # Pad with zeros to match time array length\n    expelled_rate = np.append(expelled_rate, 0)\n    drag_rate = np.append(drag_rate, 0)\n\n    ax5.plot(\n        time,\n        expelled_rate,\n        color=colors[\"expelled\"],\n        linewidth=2,\n        label=\"Expelled Energy Rate\",\n    )\n    ax5.plot(\n        time,\n        drag_rate,\n        color=colors[\"losses\"],\n        linewidth=2,\n        label=\"Drag Loss Rate\",\n    )\n    ax5.set_xlabel(\"Time (s)\")\n    ax5.set_ylabel(\"Energy Rate (J/s)\")\n    ax5.set_title(\"Energy Flow Rates\")\n    ax5.legend()\n    ax5.grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.savefig(\"energy_breakdown_analysis.png\", dpi=300, bbox_inches=\"tight\")\n    plt.show()\n</code></pre>"},{"location":"api/analysis/energy_breakdown_plot/#waterrocketpy.analysis.energy_breakdown_plot.create_energy_summary_chart","title":"<code>create_energy_summary_chart(energy_components, flight_data)</code>","text":"<p>Create pie charts showing energy distribution at key time points.</p> Source code in <code>waterrocketpy/analysis/energy_breakdown_plot.py</code> <pre><code>def create_energy_summary_chart(energy_components, flight_data):\n    \"\"\"Create pie charts showing energy distribution at key time points.\"\"\"\n\n    # Time series data\n    time = energy_components.time\n\n    # Find indices of interest\n    max_altitude_index = np.argmax(flight_data.altitude)\n    max_velocity_index = np.argmax(flight_data.velocity)\n    final_index = -1  # Last value\n\n    # Helper function to extract energy components at a given index\n    def get_energy_distribution_at(index):\n        ke = energy_components.rocket_kinetic_energy[index]\n        pe = energy_components.rocket_potential_energy[index]\n        ie = energy_components.air_internal_energy[index]\n        expelled = (\n            energy_components.water_out_kinetic_energy[index]\n            + energy_components.water_out_potential_energy[index]\n            + energy_components.air_out_kinetic_energy[index]\n            + energy_components.air_out_potential_energy[index]\n        )\n        losses = energy_components.drag_energy_loss[index]\n        return ke, pe, ie, expelled, losses\n\n    # Collect energy values at each key time\n    snapshots = {\n        \"At Max Altitude\": get_energy_distribution_at(max_altitude_index),\n        \"At Max Velocity\": get_energy_distribution_at(max_velocity_index),\n        \"Final State\": get_energy_distribution_at(final_index),\n    }\n\n    # Set up pie chart layout\n    fig, axes = plt.subplots(1, 3, figsize=(20, 6))\n\n    for ax, (title, (ke, pe, ie, expelled, losses)) in zip(\n        axes, snapshots.items()\n    ):\n        energies = []\n        labels = []\n        colors = []\n\n        if ke &gt; 1.0:\n            energies.append(ke)\n            labels.append(f\"Kinetic\\n{ke:.1f} J\")\n            colors.append(\"#4ECDC4\")\n        if pe &gt; 1.0:\n            energies.append(pe)\n            labels.append(f\"Potential\\n{pe:.1f} J\")\n            colors.append(\"#45B7D1\")\n        if ie &gt; 1.0:\n            energies.append(ie)\n            labels.append(f\"Internal\\n{ie:.1f} J\")\n            colors.append(\"#FF6B6B\")\n        if expelled &gt; 1.0:\n            energies.append(expelled)\n            labels.append(f\"Expelled\\n{expelled:.1f} J\")\n            colors.append(\"#96CEB4\")\n        if losses &gt; 1.0:\n            energies.append(losses)\n            labels.append(f\"Drag Losses\\n{losses:.1f} J\")\n            colors.append(\"#FFEAA7\")\n\n        ax.pie(\n            energies,\n            labels=labels,\n            colors=colors,\n            autopct=\"%1.1f%%\",\n            startangle=90,\n        )\n        ax.set_title(title)\n\n    plt.suptitle(\n        f\"Energy Distribution at Key Points (Total: {energy_components.total_initial_energy:.0f} J)\",\n        fontsize=16,\n        fontweight=\"bold\",\n    )\n    plt.tight_layout(rect=[0, 0, 1, 0.95])\n    plt.savefig(\"energy_snapshots.png\", dpi=300, bbox_inches=\"tight\")\n    plt.show()\n</code></pre>"},{"location":"api/core/constants/","title":"waterrocketpy.core.constants","text":"<p>Physical constants and default values for water rocket simulations.</p>"},{"location":"api/core/physics_engine/","title":"waterrocketpy.core.physics_engine","text":"<p>Physics calculations for water rocket simulation.</p>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine","title":"<code> PhysicsEngine        </code>","text":"<p>Handles all physics calculations for water rocket simulation.</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>class PhysicsEngine:\n    \"\"\"Handles all physics calculations for water rocket simulation.\"\"\"\n\n    def __init__(self, gravity=GRAVITY, air_density=AIR_DENSITY_SL):\n        self.gravity = gravity\n        self.air_density = air_density\n        self.air_gas_constant = 287.0  # J/(kg\u00b7K) for air\n\n    def calculate_water_thrust(\n        self, pressure, nozzle_area, discharge_coefficient\n    ):\n        \"\"\"\n        Calculate thrust force from water expulsion.\n\n        Args:\n            pressure (float): Internal pressure (Pa)\n            nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n            discharge_coefficient (float): Discharge coefficient\n\n        Returns:\n            tuple: (thrust_force, exit_velocity, mass_flow_rate)\n        \"\"\"\n        pressure_diff = max(pressure - ATMOSPHERIC_PRESSURE, 0)\n\n        # Exit velocity using Torricelli's equation\n        exit_velocity = discharge_coefficient * np.sqrt(\n            2 * pressure_diff / WATER_DENSITY\n        )\n\n        # Mass flow rate\n        mass_flow_rate = WATER_DENSITY * nozzle_area * exit_velocity\n\n        # Thrust force\n        thrust_force = mass_flow_rate * exit_velocity\n\n        return thrust_force, exit_velocity, mass_flow_rate\n\n    def calculate_air_thrust(\n        self, pressure, temperature, nozzle_area, discharge_coefficient\n    ):\n        \"\"\"\n        Calculate thrust force from air expulsion through converging nozzle.\n        Hole prinziple: from values inside the tank, calculate the exit flow properties, from them calculate the change inside the tank :D\n        Args:\n            pressure (float): Internal air pressure (Pa)\n            temperature (float): Internal air temperature (K)\n            nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n            discharge_coefficient (float): Discharge coefficient\n\n        Returns:\n            tuple: (thrust_force, air_exit_velocity, mass_flow_rate, air_exit_pressure, air_exit_temperature)\n        \"\"\"\n        if pressure &lt;= ATMOSPHERIC_PRESSURE:\n            return 0.0, 0.0, 0.0, 0.0, 0.0\n\n        gamma = ADIABATIC_INDEX_AIR\n        R = self.air_gas_constant\n\n        # Critical pressure ratio for choked flow\n        pressure_ratio_critical = (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n        pressure_ratio = pressure / ATMOSPHERIC_PRESSURE\n\n        # Check if flow is choked\n        if pressure_ratio &gt; pressure_ratio_critical:\n            # Choked flow - sonic at throat\n\n            # Throat conditions (sonic)\n            T_throat = temperature * (2 / (gamma + 1))\n            P_throat = pressure * (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n            rho_throat = P_throat / (R * T_throat)\n\n            # Sonic velocity at throat\n            v_throat = np.sqrt(gamma * R * T_throat)\n\n            # Mass flow rate (choked)\n            mass_flow_rate = (\n                discharge_coefficient * rho_throat * nozzle_area * v_throat\n            )\n\n            # For converging nozzle, exit conditions = throat conditions\n            air_exit_velocity = v_throat\n            air_exit_pressure = P_throat\n            air_exit_temperature = T_throat\n\n        else:\n            # Subsonic flow - exit pressure = ambient pressure\n            air_exit_pressure = ATMOSPHERIC_PRESSURE\n\n            # Isentropic relations for exit conditions\n            pressure_ratio_exit = air_exit_pressure / pressure\n            T_exit = temperature * (\n                pressure_ratio_exit ** ((gamma - 1) / gamma)\n            )\n            rho_exit = air_exit_pressure / (R * T_exit)\n\n            # Exit velocity from isentropic relations\n            air_exit_velocity = np.sqrt(\n                2\n                * gamma\n                * R\n                * temperature\n                / (\n                    gamma - 1\n                )  # TODO woher kommt das /(gamma-1) her - \u00fcberpr\u00fcfe die gleichungen\n                * (1 - pressure_ratio_exit ** ((gamma - 1) / gamma))\n            )\n\n            # Mass flow rate\n            mass_flow_rate = (\n                discharge_coefficient\n                * rho_exit\n                * nozzle_area\n                * air_exit_velocity\n            )\n\n        # Thrust force (momentum + pressure thrust)\n        momentum_thrust = mass_flow_rate * air_exit_velocity\n        pressure_thrust = nozzle_area * (\n            air_exit_pressure - ATMOSPHERIC_PRESSURE\n        )\n        thrust_force = momentum_thrust + pressure_thrust\n\n        return (\n            thrust_force,\n            air_exit_velocity,\n            mass_flow_rate,\n            air_exit_pressure,\n            air_exit_temperature,\n        )\n\n    def calculate_air_mass_flow_rate(\n        self,\n        pressure,\n        temperature,\n        air_volume,\n        nozzle_area,\n        discharge_coefficient,\n    ):\n        \"\"\"\n        Calculate air mass flow rate and resulting pressure change.\n\n        Args:\n            pressure (float): Current pressure (Pa)\n            temperature (float): Current temperature (K)\n            air_volume (float): Current air volume (m\u00b3)\n            nozzle_area (float): Nozzle area (m\u00b2)\n            discharge_coefficient (float): Discharge coefficient\n\n        Returns:\n            float: Mass flow rate (kg/s)\n        \"\"\"\n        if pressure &lt;= ATMOSPHERIC_PRESSURE:\n            return 0.0\n\n        # Get mass flow rate from air thrust calculation\n        _, _, mass_flow_rate = self.calculate_air_thrust(\n            pressure, temperature, nozzle_area, discharge_coefficient\n        )\n\n        return mass_flow_rate\n\n    def calculate_drag(self, velocity, drag_coefficient, cross_sectional_area):\n        \"\"\"\n        Calculate drag force on the rocket.\n\n        Args:\n            velocity (float): Rocket velocity (m/s)\n            drag_coefficient (float): Drag coefficient\n            cross_sectional_area (float): Cross-sectional area (m\u00b2)\n\n        Returns:\n            float: Drag force (N)\n        \"\"\"\n        return (\n            0.5\n            * self.air_density\n            * velocity**2\n            * drag_coefficient\n            * cross_sectional_area\n            * np.sign(velocity)\n        )\n\n    def calculate_pressure_adiabatic(\n        self, initial_pressure, initial_volume, current_volume\n    ):\n        \"\"\"\n        Calculate pressure during adiabatic expansion.\n\n        Args:\n            initial_pressure (float): Initial pressure (Pa)\n            initial_volume (float): Initial air volume (m\u00b3)\n            current_volume (float): Current air volume (m\u00b3)\n\n        Returns:\n            float: Current pressure (Pa)\n        \"\"\"\n        if current_volume &lt;= 0:\n            return initial_pressure\n\n        return (\n            initial_pressure\n            * (initial_volume / current_volume) ** ADIABATIC_INDEX_AIR\n        )\n\n    def calculate_temperature_adiabatic(\n        self, initial_temperature, initial_pressure, current_pressure\n    ):\n        \"\"\"\n        Calculate temperature during adiabatic expansion.\n\n        Args:\n            initial_temperature (float): Initial temperature (K)\n            initial_pressure (float): Initial pressure (Pa)\n            current_pressure (float): Current pressure (Pa)\n\n        Returns:\n            float: Current temperature (K)\n        \"\"\"\n        return initial_temperature * (current_pressure / initial_pressure) ** (\n            (ADIABATIC_INDEX_AIR - 1) / ADIABATIC_INDEX_AIR\n        )\n\n    def calculate_air_volume(self, bottle_volume, water_mass):\n        \"\"\"\n        Calculate current air volume in the bottle.\n\n        Args:\n            bottle_volume (float): Total bottle volume (m\u00b3)\n            water_mass (float): Current water mass (kg)\n\n        Returns:\n            float: Air volume (m\u00b3)\n        \"\"\"\n        water_volume = water_mass / WATER_DENSITY\n        air_volume = bottle_volume - water_volume\n        return max(air_volume, 1e-10)  # Prevent division by zero\n\n    def calculate_air_volume_air_phase(\n        self, bottle_volume, initial_air_mass, current_air_mass\n    ):\n        \"\"\"\n        Calculate current air volume in the bottle.\n\n        Args:\n            bottle_volume (float): Total bottle volume (m\u00b3)\n            initial_air_mass (float): Initial air mass (kg)\n            current_air_mass (float): Current air mass (kg)\n\n        Returns:\n            float: Air volume (m\u00b3)\n        \"\"\"\n        current_air_density = current_air_mass / bottle_volume\n        theoretical_air_volume = initial_air_mass / current_air_density\n        return max(theoretical_air_volume, 1e-10)  # Prevent division by zero\n\n    def calculate_air_mass_from_conditions(\n        self, pressure, temperature, volume\n    ):\n        \"\"\"\n        Calculate air mass from thermodynamic conditions.\n\n        Args:\n            pressure (float): Pressure (Pa)\n            temperature (float): Temperature (K)\n            volume (float): Volume (m\u00b3)\n\n        Returns:\n            float: Air mass (kg)\n        \"\"\"\n        # Using ideal gas law: PV = mRT/M, so m = PV*M/(RT)\n        # For air, M/R = 1/R_specific where R_specific = 287 J/(kg\u00b7K)\n        return pressure * volume / (self.air_gas_constant * temperature)\n\n    def calculate_net_force(self, thrust, drag, mass):\n        \"\"\"\n        Calculate net force and acceleration.\n\n        Args:\n            thrust (float): Thrust force (N)\n            drag (float): Drag force (N)\n            mass (float): Total rocket mass (kg)\n\n        Returns:\n            tuple: (net_force, acceleration)\n        \"\"\"\n        net_force = thrust - drag\n        acceleration = net_force / mass - self.gravity\n        return net_force, acceleration\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_mass_flow_rate","title":"<code>calculate_air_mass_flow_rate(self, pressure, temperature, air_volume, nozzle_area, discharge_coefficient)</code>","text":"<p>Calculate air mass flow rate and resulting pressure change.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Current pressure (Pa)</p> required <code>temperature</code> <code>float</code> <p>Current temperature (K)</p> required <code>air_volume</code> <code>float</code> <p>Current air volume (m\u00b3)</p> required <code>nozzle_area</code> <code>float</code> <p>Nozzle area (m\u00b2)</p> required <code>discharge_coefficient</code> <code>float</code> <p>Discharge coefficient</p> required <p>Returns:</p> Type Description <code>float</code> <p>Mass flow rate (kg/s)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_mass_flow_rate(\n    self,\n    pressure,\n    temperature,\n    air_volume,\n    nozzle_area,\n    discharge_coefficient,\n):\n    \"\"\"\n    Calculate air mass flow rate and resulting pressure change.\n\n    Args:\n        pressure (float): Current pressure (Pa)\n        temperature (float): Current temperature (K)\n        air_volume (float): Current air volume (m\u00b3)\n        nozzle_area (float): Nozzle area (m\u00b2)\n        discharge_coefficient (float): Discharge coefficient\n\n    Returns:\n        float: Mass flow rate (kg/s)\n    \"\"\"\n    if pressure &lt;= ATMOSPHERIC_PRESSURE:\n        return 0.0\n\n    # Get mass flow rate from air thrust calculation\n    _, _, mass_flow_rate = self.calculate_air_thrust(\n        pressure, temperature, nozzle_area, discharge_coefficient\n    )\n\n    return mass_flow_rate\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_mass_from_conditions","title":"<code>calculate_air_mass_from_conditions(self, pressure, temperature, volume)</code>","text":"<p>Calculate air mass from thermodynamic conditions.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Pressure (Pa)</p> required <code>temperature</code> <code>float</code> <p>Temperature (K)</p> required <code>volume</code> <code>float</code> <p>Volume (m\u00b3)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Air mass (kg)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_mass_from_conditions(\n    self, pressure, temperature, volume\n):\n    \"\"\"\n    Calculate air mass from thermodynamic conditions.\n\n    Args:\n        pressure (float): Pressure (Pa)\n        temperature (float): Temperature (K)\n        volume (float): Volume (m\u00b3)\n\n    Returns:\n        float: Air mass (kg)\n    \"\"\"\n    # Using ideal gas law: PV = mRT/M, so m = PV*M/(RT)\n    # For air, M/R = 1/R_specific where R_specific = 287 J/(kg\u00b7K)\n    return pressure * volume / (self.air_gas_constant * temperature)\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_thrust","title":"<code>calculate_air_thrust(self, pressure, temperature, nozzle_area, discharge_coefficient)</code>","text":"<p>Calculate thrust force from air expulsion through converging nozzle. Hole prinziple: from values inside the tank, calculate the exit flow properties, from them calculate the change inside the tank :D</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Internal air pressure (Pa)</p> required <code>temperature</code> <code>float</code> <p>Internal air temperature (K)</p> required <code>nozzle_area</code> <code>float</code> <p>Nozzle cross-sectional area (m\u00b2)</p> required <code>discharge_coefficient</code> <code>float</code> <p>Discharge coefficient</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(thrust_force, air_exit_velocity, mass_flow_rate, air_exit_pressure, air_exit_temperature)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_thrust(\n    self, pressure, temperature, nozzle_area, discharge_coefficient\n):\n    \"\"\"\n    Calculate thrust force from air expulsion through converging nozzle.\n    Hole prinziple: from values inside the tank, calculate the exit flow properties, from them calculate the change inside the tank :D\n    Args:\n        pressure (float): Internal air pressure (Pa)\n        temperature (float): Internal air temperature (K)\n        nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n        discharge_coefficient (float): Discharge coefficient\n\n    Returns:\n        tuple: (thrust_force, air_exit_velocity, mass_flow_rate, air_exit_pressure, air_exit_temperature)\n    \"\"\"\n    if pressure &lt;= ATMOSPHERIC_PRESSURE:\n        return 0.0, 0.0, 0.0, 0.0, 0.0\n\n    gamma = ADIABATIC_INDEX_AIR\n    R = self.air_gas_constant\n\n    # Critical pressure ratio for choked flow\n    pressure_ratio_critical = (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n    pressure_ratio = pressure / ATMOSPHERIC_PRESSURE\n\n    # Check if flow is choked\n    if pressure_ratio &gt; pressure_ratio_critical:\n        # Choked flow - sonic at throat\n\n        # Throat conditions (sonic)\n        T_throat = temperature * (2 / (gamma + 1))\n        P_throat = pressure * (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n        rho_throat = P_throat / (R * T_throat)\n\n        # Sonic velocity at throat\n        v_throat = np.sqrt(gamma * R * T_throat)\n\n        # Mass flow rate (choked)\n        mass_flow_rate = (\n            discharge_coefficient * rho_throat * nozzle_area * v_throat\n        )\n\n        # For converging nozzle, exit conditions = throat conditions\n        air_exit_velocity = v_throat\n        air_exit_pressure = P_throat\n        air_exit_temperature = T_throat\n\n    else:\n        # Subsonic flow - exit pressure = ambient pressure\n        air_exit_pressure = ATMOSPHERIC_PRESSURE\n\n        # Isentropic relations for exit conditions\n        pressure_ratio_exit = air_exit_pressure / pressure\n        T_exit = temperature * (\n            pressure_ratio_exit ** ((gamma - 1) / gamma)\n        )\n        rho_exit = air_exit_pressure / (R * T_exit)\n\n        # Exit velocity from isentropic relations\n        air_exit_velocity = np.sqrt(\n            2\n            * gamma\n            * R\n            * temperature\n            / (\n                gamma - 1\n            )  # TODO woher kommt das /(gamma-1) her - \u00fcberpr\u00fcfe die gleichungen\n            * (1 - pressure_ratio_exit ** ((gamma - 1) / gamma))\n        )\n\n        # Mass flow rate\n        mass_flow_rate = (\n            discharge_coefficient\n            * rho_exit\n            * nozzle_area\n            * air_exit_velocity\n        )\n\n    # Thrust force (momentum + pressure thrust)\n    momentum_thrust = mass_flow_rate * air_exit_velocity\n    pressure_thrust = nozzle_area * (\n        air_exit_pressure - ATMOSPHERIC_PRESSURE\n    )\n    thrust_force = momentum_thrust + pressure_thrust\n\n    return (\n        thrust_force,\n        air_exit_velocity,\n        mass_flow_rate,\n        air_exit_pressure,\n        air_exit_temperature,\n    )\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_volume","title":"<code>calculate_air_volume(self, bottle_volume, water_mass)</code>","text":"<p>Calculate current air volume in the bottle.</p> <p>Parameters:</p> Name Type Description Default <code>bottle_volume</code> <code>float</code> <p>Total bottle volume (m\u00b3)</p> required <code>water_mass</code> <code>float</code> <p>Current water mass (kg)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Air volume (m\u00b3)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_volume(self, bottle_volume, water_mass):\n    \"\"\"\n    Calculate current air volume in the bottle.\n\n    Args:\n        bottle_volume (float): Total bottle volume (m\u00b3)\n        water_mass (float): Current water mass (kg)\n\n    Returns:\n        float: Air volume (m\u00b3)\n    \"\"\"\n    water_volume = water_mass / WATER_DENSITY\n    air_volume = bottle_volume - water_volume\n    return max(air_volume, 1e-10)  # Prevent division by zero\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_volume_air_phase","title":"<code>calculate_air_volume_air_phase(self, bottle_volume, initial_air_mass, current_air_mass)</code>","text":"<p>Calculate current air volume in the bottle.</p> <p>Parameters:</p> Name Type Description Default <code>bottle_volume</code> <code>float</code> <p>Total bottle volume (m\u00b3)</p> required <code>initial_air_mass</code> <code>float</code> <p>Initial air mass (kg)</p> required <code>current_air_mass</code> <code>float</code> <p>Current air mass (kg)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Air volume (m\u00b3)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_volume_air_phase(\n    self, bottle_volume, initial_air_mass, current_air_mass\n):\n    \"\"\"\n    Calculate current air volume in the bottle.\n\n    Args:\n        bottle_volume (float): Total bottle volume (m\u00b3)\n        initial_air_mass (float): Initial air mass (kg)\n        current_air_mass (float): Current air mass (kg)\n\n    Returns:\n        float: Air volume (m\u00b3)\n    \"\"\"\n    current_air_density = current_air_mass / bottle_volume\n    theoretical_air_volume = initial_air_mass / current_air_density\n    return max(theoretical_air_volume, 1e-10)  # Prevent division by zero\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_drag","title":"<code>calculate_drag(self, velocity, drag_coefficient, cross_sectional_area)</code>","text":"<p>Calculate drag force on the rocket.</p> <p>Parameters:</p> Name Type Description Default <code>velocity</code> <code>float</code> <p>Rocket velocity (m/s)</p> required <code>drag_coefficient</code> <code>float</code> <p>Drag coefficient</p> required <code>cross_sectional_area</code> <code>float</code> <p>Cross-sectional area (m\u00b2)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Drag force (N)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_drag(self, velocity, drag_coefficient, cross_sectional_area):\n    \"\"\"\n    Calculate drag force on the rocket.\n\n    Args:\n        velocity (float): Rocket velocity (m/s)\n        drag_coefficient (float): Drag coefficient\n        cross_sectional_area (float): Cross-sectional area (m\u00b2)\n\n    Returns:\n        float: Drag force (N)\n    \"\"\"\n    return (\n        0.5\n        * self.air_density\n        * velocity**2\n        * drag_coefficient\n        * cross_sectional_area\n        * np.sign(velocity)\n    )\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_net_force","title":"<code>calculate_net_force(self, thrust, drag, mass)</code>","text":"<p>Calculate net force and acceleration.</p> <p>Parameters:</p> Name Type Description Default <code>thrust</code> <code>float</code> <p>Thrust force (N)</p> required <code>drag</code> <code>float</code> <p>Drag force (N)</p> required <code>mass</code> <code>float</code> <p>Total rocket mass (kg)</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(net_force, acceleration)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_net_force(self, thrust, drag, mass):\n    \"\"\"\n    Calculate net force and acceleration.\n\n    Args:\n        thrust (float): Thrust force (N)\n        drag (float): Drag force (N)\n        mass (float): Total rocket mass (kg)\n\n    Returns:\n        tuple: (net_force, acceleration)\n    \"\"\"\n    net_force = thrust - drag\n    acceleration = net_force / mass - self.gravity\n    return net_force, acceleration\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_pressure_adiabatic","title":"<code>calculate_pressure_adiabatic(self, initial_pressure, initial_volume, current_volume)</code>","text":"<p>Calculate pressure during adiabatic expansion.</p> <p>Parameters:</p> Name Type Description Default <code>initial_pressure</code> <code>float</code> <p>Initial pressure (Pa)</p> required <code>initial_volume</code> <code>float</code> <p>Initial air volume (m\u00b3)</p> required <code>current_volume</code> <code>float</code> <p>Current air volume (m\u00b3)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Current pressure (Pa)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_pressure_adiabatic(\n    self, initial_pressure, initial_volume, current_volume\n):\n    \"\"\"\n    Calculate pressure during adiabatic expansion.\n\n    Args:\n        initial_pressure (float): Initial pressure (Pa)\n        initial_volume (float): Initial air volume (m\u00b3)\n        current_volume (float): Current air volume (m\u00b3)\n\n    Returns:\n        float: Current pressure (Pa)\n    \"\"\"\n    if current_volume &lt;= 0:\n        return initial_pressure\n\n    return (\n        initial_pressure\n        * (initial_volume / current_volume) ** ADIABATIC_INDEX_AIR\n    )\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_temperature_adiabatic","title":"<code>calculate_temperature_adiabatic(self, initial_temperature, initial_pressure, current_pressure)</code>","text":"<p>Calculate temperature during adiabatic expansion.</p> <p>Parameters:</p> Name Type Description Default <code>initial_temperature</code> <code>float</code> <p>Initial temperature (K)</p> required <code>initial_pressure</code> <code>float</code> <p>Initial pressure (Pa)</p> required <code>current_pressure</code> <code>float</code> <p>Current pressure (Pa)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Current temperature (K)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_temperature_adiabatic(\n    self, initial_temperature, initial_pressure, current_pressure\n):\n    \"\"\"\n    Calculate temperature during adiabatic expansion.\n\n    Args:\n        initial_temperature (float): Initial temperature (K)\n        initial_pressure (float): Initial pressure (Pa)\n        current_pressure (float): Current pressure (Pa)\n\n    Returns:\n        float: Current temperature (K)\n    \"\"\"\n    return initial_temperature * (current_pressure / initial_pressure) ** (\n        (ADIABATIC_INDEX_AIR - 1) / ADIABATIC_INDEX_AIR\n    )\n</code></pre>"},{"location":"api/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_water_thrust","title":"<code>calculate_water_thrust(self, pressure, nozzle_area, discharge_coefficient)</code>","text":"<p>Calculate thrust force from water expulsion.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Internal pressure (Pa)</p> required <code>nozzle_area</code> <code>float</code> <p>Nozzle cross-sectional area (m\u00b2)</p> required <code>discharge_coefficient</code> <code>float</code> <p>Discharge coefficient</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(thrust_force, exit_velocity, mass_flow_rate)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_water_thrust(\n    self, pressure, nozzle_area, discharge_coefficient\n):\n    \"\"\"\n    Calculate thrust force from water expulsion.\n\n    Args:\n        pressure (float): Internal pressure (Pa)\n        nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n        discharge_coefficient (float): Discharge coefficient\n\n    Returns:\n        tuple: (thrust_force, exit_velocity, mass_flow_rate)\n    \"\"\"\n    pressure_diff = max(pressure - ATMOSPHERIC_PRESSURE, 0)\n\n    # Exit velocity using Torricelli's equation\n    exit_velocity = discharge_coefficient * np.sqrt(\n        2 * pressure_diff / WATER_DENSITY\n    )\n\n    # Mass flow rate\n    mass_flow_rate = WATER_DENSITY * nozzle_area * exit_velocity\n\n    # Thrust force\n    thrust_force = mass_flow_rate * exit_velocity\n\n    return thrust_force, exit_velocity, mass_flow_rate\n</code></pre>"},{"location":"api/core/simulation/","title":"waterrocketpy.core.simulation","text":"<p>Main simulation engine for water rocket flight.</p>"},{"location":"api/core/simulation/#waterrocketpy.core.simulation.FlightData","title":"<code> FlightData        </code>  <code>dataclass</code>","text":"<p>Container for flight simulation results.</p> Source code in <code>waterrocketpy/core/simulation.py</code> <pre><code>@dataclass\nclass FlightData:\n    \"\"\"Container for flight simulation results.\"\"\"\n\n    time: np.ndarray\n    altitude: np.ndarray\n    velocity: np.ndarray\n    acceleration: np.ndarray\n    water_mass: np.ndarray\n    liquid_gas_mass: np.ndarray\n    air_mass: np.ndarray\n    pressure: np.ndarray\n    air_temperature: np.ndarray\n    thrust: np.ndarray\n    drag: np.ndarray\n\n    water_exhaust_speed: np.ndarray\n    air_exhaust_speed: np.ndarray\n    water_mass_flow_rate: np.ndarray\n    air_mass_flow_rate: np.ndarray\n    air_exit_pressure: np.ndarray\n    air_exit_temperature: np.ndarray\n\n    max_altitude: float\n    max_velocity: float\n    flight_time: float\n    water_depletion_time: float\n    air_depletion_time: float\n</code></pre>"},{"location":"api/core/simulation/#waterrocketpy.core.simulation.WaterRocketSimulator","title":"<code> WaterRocketSimulator        </code>","text":"<p>Main simulation class for water rocket flight.</p> Source code in <code>waterrocketpy/core/simulation.py</code> <pre><code>class WaterRocketSimulator:\n    \"\"\"Main simulation class for water rocket flight.\"\"\"\n\n    def __init__(self, physics_engine: PhysicsEngine = None, verbose: bool = True):\n        self.physics_engine = physics_engine or PhysicsEngine()\n        self.validator = ParameterValidator()\n        self.verbose = verbose  # Enable verbose output for debugging\n\n        # Storage for derived quantities during integration\n        self.derived_data = {\n            \"time\": [],\n            \"pressure\": [],\n            \"temperature\": [],\n            \"thrust\": [],\n            \"drag\": [],\n            \"water_exhaust_speed\": [],\n            \"air_exhaust_speed\": [],\n            \"water_mass_flow_rate\": [],\n            \"air_mass_flow_rate\": [],\n            \"air_exit_pressure\": [],\n            \"air_exit_temperature\": [],\n        }\n\n    def _store_derived_quantities(\n        self,\n        t,\n        pressure,\n        temperature,\n        thrust,\n        drag,\n        water_exhaust_speed=None,\n        air_exhaust_speed=None,\n        water_mass_flow_rate=None,\n        air_mass_flow_rate=None,\n        air_exit_pressure=None,\n        air_exit_temperature=None,\n    ):\n        self.derived_data[\"time\"].append(t)\n        self.derived_data[\"pressure\"].append(pressure)\n        self.derived_data[\"temperature\"].append(temperature)\n        self.derived_data[\"thrust\"].append(thrust)\n        self.derived_data[\"drag\"].append(drag)\n        self.derived_data[\"water_exhaust_speed\"].append(water_exhaust_speed)\n        self.derived_data[\"air_exhaust_speed\"].append(air_exhaust_speed)\n        self.derived_data[\"water_mass_flow_rate\"].append(water_mass_flow_rate)\n        self.derived_data[\"air_mass_flow_rate\"].append(air_mass_flow_rate)\n        self.derived_data[\"air_exit_pressure\"].append(air_exit_pressure)\n        self.derived_data[\"air_exit_temperature\"].append(air_exit_temperature)\n\n    def _rocket_ode_water_phase(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; np.ndarray:\n        \"\"\"\n        ODE system for rocket dynamics during water expulsion phase.\n\n        Args:\n            t: Current time\n            state: [altitude, velocity, water_mass, liquid_gas_mass]\n            params: Rocket parameters\n\n        Returns:\n            Derivatives [velocity, acceleration, dm_water/dt, dm_gas/dt]\n        \"\"\"\n        altitude, velocity, water_mass, liquid_gas_mass = state\n\n        # Calculate current air volume\n        air_volume = self.physics_engine.calculate_air_volume(\n            params[\"V_bottle\"], water_mass\n        )\n\n        # Calculate pressure and temperature\n        if water_mass &gt; 0 and liquid_gas_mass &gt; 0:\n            # Pressure from vaporizing liquid gas (constant while liquid\n            # remains)\n            pressure = 10e5  # 10 bar in Pa\n            air_temperature = INITIAL_TEMPERATURE\n            dm_dt_liquid_gas = (\n                0  # Simplified: no vaporization rate calculation\n            )\n        else:\n            dm_dt_liquid_gas = 0\n            if water_mass &gt; 0 or True:\n                # Adiabatic expansion\n                initial_air_volume = params[\"V_bottle\"] * (\n                    1 - params[\"water_fraction\"]\n                )\n                pressure = self.physics_engine.calculate_pressure_adiabatic(\n                    params[\"P0\"], initial_air_volume, air_volume\n                )\n                air_temperature = (\n                    self.physics_engine.calculate_temperature_adiabatic(\n                        INITIAL_TEMPERATURE, params[\"P0\"], pressure\n                    )\n                )\n            else:  # NO, bad. should not happen\n                pressure = ATMOSPHERIC_PRESSURE\n                air_temperature = INITIAL_TEMPERATURE\n\n        # Calculate thrust and mass flow rate\n        if water_mass &gt; 0:\n            thrust, exit_water_velocity, mass_flow_rate = (\n                self.physics_engine.calculate_water_thrust(\n                    pressure, params[\"A_nozzle\"], params[\"C_d\"]\n                )\n            )\n            dm_dt_water = -mass_flow_rate\n        else:\n            thrust = 0\n            dm_dt_water = 0\n            exit_water_velocity = None\n            mass_flow_rate = None\n\n        # Calculate drag\n        drag = self.physics_engine.calculate_drag(\n            velocity, params[\"C_drag\"], params[\"A_rocket\"]\n        )\n\n        # Store derived quantities\n        self._store_derived_quantities(\n            t,\n            pressure,\n            air_temperature,\n            thrust,\n            drag,\n            water_exhaust_speed=exit_water_velocity,\n            water_mass_flow_rate=mass_flow_rate,\n        )\n\n        # Calculate acceleration\n        total_mass = params[\"m_empty\"] + water_mass\n        _, acceleration = self.physics_engine.calculate_net_force(\n            thrust, drag, total_mass\n        )\n\n        return np.array(\n            [velocity, acceleration, dm_dt_water, dm_dt_liquid_gas]\n        )\n\n    def _rocket_ode_air_phase(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; np.ndarray:\n        \"\"\"\n        ODE system for rocket dynamics during air expulsion phase.\n\n        Args:\n            t: Current time\n            state: [altitude, velocity, air_mass, temperature]\n            params: Rocket parameters\n\n        Returns:\n            Derivatives [velocity, acceleration, dm_air/dt, dT/dt]\n        \"\"\"\n        altitude, velocity, air_mass, air_temperature = state\n\n        if air_mass &lt;= 0:\n            # Store zero values for derived quantities\n            self._store_derived_quantities(\n                t, ATMOSPHERIC_PRESSURE, air_temperature, 0, 0\n            )\n            return np.array([velocity, -self.physics_engine.gravity, 0, 0])\n\n        # Calculate current air volume and pressure\n        air_volume = params[\"V_bottle\"]  # All bottle volume is now air\n\n        # Calculate pressure from ideal gas law: P = mRT/V\n        pressure = (\n            air_mass\n            * self.physics_engine.air_gas_constant\n            * air_temperature\n            / air_volume\n        )\n\n        # Ensure pressure doesn't go below atmospheric\n        pressure = max(pressure, ATMOSPHERIC_PRESSURE)\n\n        # Calculate air thrust and mass flow rate\n        if pressure &gt; ATMOSPHERIC_PRESSURE:\n            (\n                thrust,\n                exit_air_velocity,\n                mass_flow_rate,\n                air_exit_pressure,\n                air_exit_temperature,\n            ) = self.physics_engine.calculate_air_thrust(\n                pressure, air_temperature, params[\"A_nozzle\"], params[\"C_d\"]\n            )\n            dm_dt_air = -mass_flow_rate\n\n            # Recommended (correct):\n            if air_mass &gt; 0:\n                dT_dt = air_temperature * (ADIABATIC_INDEX_AIR - 1) / air_mass * dm_dt_air\n            else:\n                dT_dt = 0\n\n        else:\n            thrust = 0\n            dm_dt_air = 0\n            dT_dt = 0\n            exit_air_velocity = None\n            mass_flow_rate = None\n            air_exit_pressure = None\n            air_exit_temperature = None\n\n        # Calculate drag\n        drag = self.physics_engine.calculate_drag(\n            velocity, params[\"C_drag\"], params[\"A_rocket\"]\n        )\n\n        # Store derived quantities\n        self._store_derived_quantities(\n            t,\n            pressure,\n            air_temperature,\n            thrust,\n            drag,\n            air_exhaust_speed=exit_air_velocity,\n            air_mass_flow_rate=mass_flow_rate,\n            air_exit_pressure=air_exit_pressure,\n            air_exit_temperature=air_exit_temperature,\n        )\n\n        # Calculate acceleration\n        total_mass = params[\"m_empty\"] + air_mass\n        _, acceleration = self.physics_engine.calculate_net_force(\n            thrust, drag, total_mass\n        )\n\n        return np.array([velocity, acceleration, dm_dt_air, dT_dt])\n\n    def _rocket_ode_coasting_phase(\n        self,\n        t: float,\n        state: np.ndarray,\n        params: Dict[str, Any],\n        final_air_pressure,\n        final_air_temperature,\n    ) -&gt; np.ndarray:\n        \"\"\"\n        ODE system for rocket dynamics during coasting phase.\n\n        Args:\n            t: Current time\n            state: [altitude, velocity]\n            params: Rocket parameters\n\n        Returns:\n            Derivatives [velocity, acceleration]\n        \"\"\"\n        altitude, velocity = state\n\n        # Only drag and gravity forces\n        drag = self.physics_engine.calculate_drag(\n            velocity, params[\"C_drag\"], params[\"A_rocket\"]\n        )\n\n        # Store derived quantities\n        self._store_derived_quantities(\n            t,\n            final_air_pressure,\n            final_air_temperature,\n            0,\n            drag,\n            water_exhaust_speed=None,\n            air_exhaust_speed=None,\n            water_mass_flow_rate=0,\n            air_mass_flow_rate=0,\n            air_exit_pressure=None,\n            air_exit_temperature=None,\n        )\n\n        # Calculate acceleration\n        total_mass = params[\"m_empty\"]\n        _, acceleration = self.physics_engine.calculate_net_force(\n            0, drag, total_mass\n        )\n\n        return np.array([velocity, acceleration])\n\n    def _water_depletion_event(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; float:\n        \"\"\"Event function to detect water depletion.\"\"\"\n        return state[2]  # water_mass\n\n    def _air_depletion_event(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; float:\n        \"\"\"Event function to detect air depletion (pressure = atmospheric).\"\"\"\n        if len(state) &lt; 4:\n            return 1.0  # Not in air phase\n\n        altitude, velocity, air_mass, air_temperature = state\n        if air_mass &lt;= 0:\n            return 0.0\n\n        # Calculate pressure\n        air_volume = params[\"V_bottle\"]\n        pressure = (\n            air_mass\n            * self.physics_engine.air_gas_constant\n            * air_temperature\n            / air_volume\n        )\n        #print(f\"Pressure at t={t:.3f}s: {pressure:.2f} Pa\")\n        return pressure - ATMOSPHERIC_PRESSURE\n\n    def _hit_ground_event(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; float:\n        \"\"\"Event function to detect _hit_ground_event (altetude &lt; 0 ).\"\"\"\n        # if len(state) &lt; 4:\n        #    return 1.0  # Not in air phase\n\n        altitude, velocity = state\n        if altitude &lt;= 0:\n            return 0.0\n        return altitude\n\n    def _setup_water_events(self, params: Dict[str, Any]):\n        \"\"\"Setup event functions for water phase simulation.\"\"\"\n\n        def water_depletion(t, state, *args):\n            return self._water_depletion_event(t, state, params)\n\n        water_depletion.terminal = True\n        water_depletion.direction = -1\n\n        return [water_depletion]\n\n    def _setup_air_events(self, params: Dict[str, Any]):\n        \"\"\"Setup event functions for air phase simulation.\"\"\"\n\n        def air_depletion(t, state, *args):\n            return self._air_depletion_event(t, state, params)\n\n        air_depletion.terminal = True\n        air_depletion.direction = -1\n\n        return [air_depletion]\n\n    def _setup_coasting_events(self, params: Dict[str, Any]):\n        \"\"\"Setup event functions for coasting phase simulation.\"\"\"\n\n        def hit_ground(t, state, *args):\n            return self._hit_ground_event(t, state, params)\n\n        hit_ground.terminal = True\n        hit_ground.direction = -1\n\n        return [hit_ground]\n\n    def simulate(\n        self, rocket_params: Dict[str, Any], sim_params: Dict[str, Any] = None\n    ) -&gt; FlightData:\n        \"\"\"\n        Run complete water rocket simulation with three phases.\n\n        Args:\n            rocket_params: Rocket configuration parameters\n            sim_params: Simulation parameters (optional)\n\n        Returns:\n            FlightData object with simulation results\n        \"\"\"\n        # Validate parameters\n        warnings = self.validator.validate_rocket_parameters(rocket_params)\n        if warnings:\n            print(\"Warnings:\", warnings)\n\n        # Set default simulation parameters\n        if sim_params is None:\n            sim_params = {}\n\n        max_time = sim_params.get(\"max_time\", DEFAULT_MAX_TIME)\n        time_step = sim_params.get(\"time_step\", DEFAULT_TIME_STEP)\n        solver = sim_params.get(\"solver\", DEFAULT_SOLVER)\n\n        # Initialize storage for derived quantities\n        self.derived_data = {\n            \"time\": [],\n            \"pressure\": [],\n            \"temperature\": [],\n            \"thrust\": [],\n            \"drag\": [],\n            \"water_exhaust_speed\": [],\n            \"air_exhaust_speed\": [],\n            \"water_mass_flow_rate\": [],\n            \"air_mass_flow_rate\": [],\n            \"air_exit_pressure\": [],\n            \"air_exit_temperature\": [],\n        }\n\n        # Initialize storage for all phases\n        all_times = []\n        all_altitudes = []\n        all_velocities = []\n        all_water_masses = []\n        all_liquid_gas_masses = []\n        all_air_masses = []\n\n        water_depletion_time = 0.0\n        air_depletion_time = 0.0\n\n        # Phase 1: Water expulsion phase\n        if self.verbose:\n            print(\"Starting water expulsion phase...\")\n        water_volume_initial = (\n            rocket_params[\"V_bottle\"] * rocket_params[\"water_fraction\"]\n        )\n        water_mass_initial = WATER_DENSITY * water_volume_initial\n        liquid_gas_mass_initial = rocket_params.get(\"liquid_gas_mass\", 0.0)\n\n        initial_state_water = np.array(\n            [0.0, 0.0, water_mass_initial, liquid_gas_mass_initial]\n        )\n        time_span = (0, max_time)\n\n        # Setup events for water phase\n        water_events = self._setup_water_events(rocket_params)\n\n        # Solve water phase\n        solution_water = solve_ivp(\n            self._rocket_ode_water_phase,\n            time_span,\n            initial_state_water,\n            args=(rocket_params,),\n            events=water_events,\n            max_step=time_step,\n            method=solver,\n            rtol=1e-8,\n            atol=1e-10,\n        )\n\n        # Store water phase results\n        all_times.append(solution_water.t)\n        all_altitudes.append(solution_water.y[0, :])\n        all_velocities.append(solution_water.y[1, :])\n        all_water_masses.append(solution_water.y[2, :])\n        all_liquid_gas_masses.append(solution_water.y[3, :])\n\n        # Calculate air mass during water phase\n        initial_air_volume = rocket_params[\"V_bottle\"] * (\n            1 - rocket_params[\"water_fraction\"]\n        )\n        initial_air_mass = (\n            self.physics_engine.calculate_air_mass_from_conditions(\n                rocket_params[\"P0\"], INITIAL_TEMPERATURE, initial_air_volume\n            )\n        )\n        air_masses_water_phase = np.full_like(\n            solution_water.t, initial_air_mass\n        )\n        all_air_masses.append(air_masses_water_phase)\n\n        # Phase 2: Air expulsion phase (if water depleted)\n        if solution_water.t_events[0].size &gt; 0:\n            water_depletion_time = solution_water.t_events[0][0]\n            if self.verbose:\n                print(\n                    f\"Water depleted at t={water_depletion_time:.3f}s, starting air expulsion phase...\"\n                )\n\n            # Get final state from water phase\n            final_state_water = solution_water.y[:, -1]\n\n            # Calculate initial conditions for air phase\n            final_altitude = final_state_water[0]\n            final_velocity = final_state_water[1]\n\n            # Calculate air mass and temperature at start of air phase\n            air_volume_at_transition = rocket_params[\"V_bottle\"]\n            initial_air_volume = rocket_params[\"V_bottle\"] * (\n                1 - rocket_params[\"water_fraction\"]\n            )\n\n            # Pressure at end of water phase\n            pressure_at_transition = (\n                self.physics_engine.calculate_pressure_adiabatic(\n                    rocket_params[\"P0\"],\n                    initial_air_volume,\n                    air_volume_at_transition,\n                )\n            )\n\n            # Temperature at end of water phase\n            temperature_at_transition = (\n                self.physics_engine.calculate_temperature_adiabatic(\n                    INITIAL_TEMPERATURE,\n                    rocket_params[\"P0\"],\n                    pressure_at_transition,\n                )\n            )\n\n            # Air mass at transition\n            air_mass_at_transition = (\n                self.physics_engine.calculate_air_mass_from_conditions(\n                    pressure_at_transition,\n                    temperature_at_transition,\n                    air_volume_at_transition,\n                )\n            )\n\n            initial_state_air = np.array(\n                [\n                    final_altitude,\n                    final_velocity,\n                    air_mass_at_transition,\n                    temperature_at_transition,\n                ]\n            )\n\n            # Setup events for air phase\n            air_events = self._setup_air_events(rocket_params)\n\n            # Solve air phase\n            solution_air = solve_ivp(\n                self._rocket_ode_air_phase,\n                (water_depletion_time, max_time),\n                initial_state_air,\n                args=(rocket_params,),\n                events=air_events,\n                max_step=time_step,\n                method=solver,\n                rtol=1e-8,\n                atol=1e-10,\n            )\n            final_air_mass = solution_air.y[2, -1]\n            final_air_temperature = solution_air.y[3, -1]\n            final_air_pressure = (\n                final_air_mass\n                * self.physics_engine.air_gas_constant\n                * final_air_temperature\n                / rocket_params[\"V_bottle\"]\n            )\n\n            # Store air phase results\n            all_times.append(solution_air.t)\n            all_altitudes.append(solution_air.y[0, :])\n            all_velocities.append(solution_air.y[1, :])\n            all_water_masses.append(np.zeros_like(solution_air.t))\n            all_liquid_gas_masses.append(np.zeros_like(solution_air.t))\n            all_air_masses.append(solution_air.y[2, :])\n\n            # Phase 3: Coasting phase (if air depleted)\n            if solution_air.t_events[0].size &gt; 0:\n                air_depletion_time = solution_air.t_events[0][0]\n                if self.verbose:\n                    print(\n                        f\"Air depleted at t={air_depletion_time:.3f}s, starting coasting phase...\"\n                    )\n\n                # Get final state from air phase\n                final_state_air = solution_air.y[:, -1]\n                final_altitude = final_state_air[0]\n                final_velocity = final_state_air[1]\n\n                initial_state_coasting = np.array(\n                    [final_altitude, final_velocity]\n                )\n                # Setup events for coasting phase\n                coasting_events = self._setup_coasting_events(rocket_params)\n                # Solve coasting phase\n                solution_coasting = solve_ivp(\n                    lambda t, y: self._rocket_ode_coasting_phase(\n                        t,\n                        y,\n                        rocket_params,\n                        final_air_pressure,\n                        final_air_temperature,\n                    ),\n                    (air_depletion_time, max_time),\n                    initial_state_coasting,\n                    # args=(rocket_params,),\n                    events=coasting_events,\n                    max_step=time_step,\n                    method=solver,\n                    rtol=1e-8,\n                    atol=1e-10,\n                )\n\n                # Store coasting phase results\n                all_times.append(solution_coasting.t)\n                all_altitudes.append(solution_coasting.y[0, :])\n                all_velocities.append(solution_coasting.y[1, :])\n                all_water_masses.append(np.zeros_like(solution_coasting.t))\n                all_liquid_gas_masses.append(\n                    np.zeros_like(solution_coasting.t)\n                )\n                all_air_masses.append(\n                    np.ones_like(solution_coasting.t) * final_air_mass\n                )\n                # i just want to have the same air mass temperature and\n                # pressure as after the end of the air run.\n\n        # Combine all phases\n        time = np.concatenate(all_times)\n        altitude = np.concatenate(all_altitudes)\n        velocity = np.concatenate(all_velocities)\n        water_mass = np.concatenate(all_water_masses)\n        liquid_gas_mass = np.concatenate(all_liquid_gas_masses)\n        air_mass = np.concatenate(all_air_masses)\n\n        # Remove duplicates from the original time series arrays\n        time, altitude, velocity, water_mass, liquid_gas_mass, air_mass = filter_unique_time_series(\n            time, altitude, velocity, water_mass, liquid_gas_mass, air_mass\n        )\n\n        # Convert to NumPy for interpolation\n        derived_time = np.array(self.derived_data[\"time\"])\n        # Interpolate each quantity\n        pressure = interp1d(\n            derived_time,\n            self.derived_data[\"pressure\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n        air_temperature = interp1d(\n            derived_time,\n            self.derived_data[\"temperature\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n        thrust = interp1d(\n            derived_time,\n            self.derived_data[\"thrust\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n        drag = interp1d(\n            derived_time,\n            self.derived_data[\"drag\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n\n        # Interpolate additional derived quantities\n        water_exhaust_speed = interp1d(\n            derived_time,\n            self.derived_data[\"water_exhaust_speed\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        air_exhaust_speed = interp1d(\n            derived_time,\n            self.derived_data[\"air_exhaust_speed\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        water_mass_flow_rate = interp1d(\n            derived_time,\n            self.derived_data[\"water_mass_flow_rate\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        air_mass_flow_rate = interp1d(\n            derived_time,\n            self.derived_data[\"air_mass_flow_rate\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        air_exit_pressure = interp1d(\n            derived_time,\n            self.derived_data[\"air_exit_pressure\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=ATMOSPHERIC_PRESSURE,\n        )(time)\n        air_exit_temperature = interp1d(\n            derived_time,\n            self.derived_data[\"air_exit_temperature\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=INITIAL_TEMPERATURE,\n        )(time)\n\n        # Calculate accelerations\n        acceleration = np.gradient(velocity, time)\n\n        # Create flight data object\n        flight_data = FlightData(\n            time=time,\n            altitude=altitude,\n            velocity=velocity,\n            acceleration=acceleration,\n            water_mass=water_mass,\n            liquid_gas_mass=liquid_gas_mass,\n            air_mass=air_mass,\n            pressure=pressure,\n            air_temperature=air_temperature,\n            thrust=thrust,\n            drag=drag,\n            water_exhaust_speed=water_exhaust_speed,\n            air_exhaust_speed=air_exhaust_speed,\n            water_mass_flow_rate=water_mass_flow_rate,\n            air_mass_flow_rate=air_mass_flow_rate,\n            air_exit_pressure=air_exit_pressure,\n            air_exit_temperature=air_exit_temperature,\n            max_altitude=np.max(altitude),\n            max_velocity=np.max(velocity),\n            flight_time=time[-1],\n            water_depletion_time=water_depletion_time,\n            air_depletion_time=air_depletion_time,\n        )\n\n        return flight_data\n</code></pre>"},{"location":"api/core/simulation/#waterrocketpy.core.simulation.WaterRocketSimulator.simulate","title":"<code>simulate(self, rocket_params, sim_params=None)</code>","text":"<p>Run complete water rocket simulation with three phases.</p> <p>Parameters:</p> Name Type Description Default <code>rocket_params</code> <code>Dict[str, Any]</code> <p>Rocket configuration parameters</p> required <code>sim_params</code> <code>Dict[str, Any]</code> <p>Simulation parameters (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>FlightData</code> <p>FlightData object with simulation results</p> Source code in <code>waterrocketpy/core/simulation.py</code> <pre><code>def simulate(\n    self, rocket_params: Dict[str, Any], sim_params: Dict[str, Any] = None\n) -&gt; FlightData:\n    \"\"\"\n    Run complete water rocket simulation with three phases.\n\n    Args:\n        rocket_params: Rocket configuration parameters\n        sim_params: Simulation parameters (optional)\n\n    Returns:\n        FlightData object with simulation results\n    \"\"\"\n    # Validate parameters\n    warnings = self.validator.validate_rocket_parameters(rocket_params)\n    if warnings:\n        print(\"Warnings:\", warnings)\n\n    # Set default simulation parameters\n    if sim_params is None:\n        sim_params = {}\n\n    max_time = sim_params.get(\"max_time\", DEFAULT_MAX_TIME)\n    time_step = sim_params.get(\"time_step\", DEFAULT_TIME_STEP)\n    solver = sim_params.get(\"solver\", DEFAULT_SOLVER)\n\n    # Initialize storage for derived quantities\n    self.derived_data = {\n        \"time\": [],\n        \"pressure\": [],\n        \"temperature\": [],\n        \"thrust\": [],\n        \"drag\": [],\n        \"water_exhaust_speed\": [],\n        \"air_exhaust_speed\": [],\n        \"water_mass_flow_rate\": [],\n        \"air_mass_flow_rate\": [],\n        \"air_exit_pressure\": [],\n        \"air_exit_temperature\": [],\n    }\n\n    # Initialize storage for all phases\n    all_times = []\n    all_altitudes = []\n    all_velocities = []\n    all_water_masses = []\n    all_liquid_gas_masses = []\n    all_air_masses = []\n\n    water_depletion_time = 0.0\n    air_depletion_time = 0.0\n\n    # Phase 1: Water expulsion phase\n    if self.verbose:\n        print(\"Starting water expulsion phase...\")\n    water_volume_initial = (\n        rocket_params[\"V_bottle\"] * rocket_params[\"water_fraction\"]\n    )\n    water_mass_initial = WATER_DENSITY * water_volume_initial\n    liquid_gas_mass_initial = rocket_params.get(\"liquid_gas_mass\", 0.0)\n\n    initial_state_water = np.array(\n        [0.0, 0.0, water_mass_initial, liquid_gas_mass_initial]\n    )\n    time_span = (0, max_time)\n\n    # Setup events for water phase\n    water_events = self._setup_water_events(rocket_params)\n\n    # Solve water phase\n    solution_water = solve_ivp(\n        self._rocket_ode_water_phase,\n        time_span,\n        initial_state_water,\n        args=(rocket_params,),\n        events=water_events,\n        max_step=time_step,\n        method=solver,\n        rtol=1e-8,\n        atol=1e-10,\n    )\n\n    # Store water phase results\n    all_times.append(solution_water.t)\n    all_altitudes.append(solution_water.y[0, :])\n    all_velocities.append(solution_water.y[1, :])\n    all_water_masses.append(solution_water.y[2, :])\n    all_liquid_gas_masses.append(solution_water.y[3, :])\n\n    # Calculate air mass during water phase\n    initial_air_volume = rocket_params[\"V_bottle\"] * (\n        1 - rocket_params[\"water_fraction\"]\n    )\n    initial_air_mass = (\n        self.physics_engine.calculate_air_mass_from_conditions(\n            rocket_params[\"P0\"], INITIAL_TEMPERATURE, initial_air_volume\n        )\n    )\n    air_masses_water_phase = np.full_like(\n        solution_water.t, initial_air_mass\n    )\n    all_air_masses.append(air_masses_water_phase)\n\n    # Phase 2: Air expulsion phase (if water depleted)\n    if solution_water.t_events[0].size &gt; 0:\n        water_depletion_time = solution_water.t_events[0][0]\n        if self.verbose:\n            print(\n                f\"Water depleted at t={water_depletion_time:.3f}s, starting air expulsion phase...\"\n            )\n\n        # Get final state from water phase\n        final_state_water = solution_water.y[:, -1]\n\n        # Calculate initial conditions for air phase\n        final_altitude = final_state_water[0]\n        final_velocity = final_state_water[1]\n\n        # Calculate air mass and temperature at start of air phase\n        air_volume_at_transition = rocket_params[\"V_bottle\"]\n        initial_air_volume = rocket_params[\"V_bottle\"] * (\n            1 - rocket_params[\"water_fraction\"]\n        )\n\n        # Pressure at end of water phase\n        pressure_at_transition = (\n            self.physics_engine.calculate_pressure_adiabatic(\n                rocket_params[\"P0\"],\n                initial_air_volume,\n                air_volume_at_transition,\n            )\n        )\n\n        # Temperature at end of water phase\n        temperature_at_transition = (\n            self.physics_engine.calculate_temperature_adiabatic(\n                INITIAL_TEMPERATURE,\n                rocket_params[\"P0\"],\n                pressure_at_transition,\n            )\n        )\n\n        # Air mass at transition\n        air_mass_at_transition = (\n            self.physics_engine.calculate_air_mass_from_conditions(\n                pressure_at_transition,\n                temperature_at_transition,\n                air_volume_at_transition,\n            )\n        )\n\n        initial_state_air = np.array(\n            [\n                final_altitude,\n                final_velocity,\n                air_mass_at_transition,\n                temperature_at_transition,\n            ]\n        )\n\n        # Setup events for air phase\n        air_events = self._setup_air_events(rocket_params)\n\n        # Solve air phase\n        solution_air = solve_ivp(\n            self._rocket_ode_air_phase,\n            (water_depletion_time, max_time),\n            initial_state_air,\n            args=(rocket_params,),\n            events=air_events,\n            max_step=time_step,\n            method=solver,\n            rtol=1e-8,\n            atol=1e-10,\n        )\n        final_air_mass = solution_air.y[2, -1]\n        final_air_temperature = solution_air.y[3, -1]\n        final_air_pressure = (\n            final_air_mass\n            * self.physics_engine.air_gas_constant\n            * final_air_temperature\n            / rocket_params[\"V_bottle\"]\n        )\n\n        # Store air phase results\n        all_times.append(solution_air.t)\n        all_altitudes.append(solution_air.y[0, :])\n        all_velocities.append(solution_air.y[1, :])\n        all_water_masses.append(np.zeros_like(solution_air.t))\n        all_liquid_gas_masses.append(np.zeros_like(solution_air.t))\n        all_air_masses.append(solution_air.y[2, :])\n\n        # Phase 3: Coasting phase (if air depleted)\n        if solution_air.t_events[0].size &gt; 0:\n            air_depletion_time = solution_air.t_events[0][0]\n            if self.verbose:\n                print(\n                    f\"Air depleted at t={air_depletion_time:.3f}s, starting coasting phase...\"\n                )\n\n            # Get final state from air phase\n            final_state_air = solution_air.y[:, -1]\n            final_altitude = final_state_air[0]\n            final_velocity = final_state_air[1]\n\n            initial_state_coasting = np.array(\n                [final_altitude, final_velocity]\n            )\n            # Setup events for coasting phase\n            coasting_events = self._setup_coasting_events(rocket_params)\n            # Solve coasting phase\n            solution_coasting = solve_ivp(\n                lambda t, y: self._rocket_ode_coasting_phase(\n                    t,\n                    y,\n                    rocket_params,\n                    final_air_pressure,\n                    final_air_temperature,\n                ),\n                (air_depletion_time, max_time),\n                initial_state_coasting,\n                # args=(rocket_params,),\n                events=coasting_events,\n                max_step=time_step,\n                method=solver,\n                rtol=1e-8,\n                atol=1e-10,\n            )\n\n            # Store coasting phase results\n            all_times.append(solution_coasting.t)\n            all_altitudes.append(solution_coasting.y[0, :])\n            all_velocities.append(solution_coasting.y[1, :])\n            all_water_masses.append(np.zeros_like(solution_coasting.t))\n            all_liquid_gas_masses.append(\n                np.zeros_like(solution_coasting.t)\n            )\n            all_air_masses.append(\n                np.ones_like(solution_coasting.t) * final_air_mass\n            )\n            # i just want to have the same air mass temperature and\n            # pressure as after the end of the air run.\n\n    # Combine all phases\n    time = np.concatenate(all_times)\n    altitude = np.concatenate(all_altitudes)\n    velocity = np.concatenate(all_velocities)\n    water_mass = np.concatenate(all_water_masses)\n    liquid_gas_mass = np.concatenate(all_liquid_gas_masses)\n    air_mass = np.concatenate(all_air_masses)\n\n    # Remove duplicates from the original time series arrays\n    time, altitude, velocity, water_mass, liquid_gas_mass, air_mass = filter_unique_time_series(\n        time, altitude, velocity, water_mass, liquid_gas_mass, air_mass\n    )\n\n    # Convert to NumPy for interpolation\n    derived_time = np.array(self.derived_data[\"time\"])\n    # Interpolate each quantity\n    pressure = interp1d(\n        derived_time,\n        self.derived_data[\"pressure\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n    air_temperature = interp1d(\n        derived_time,\n        self.derived_data[\"temperature\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n    thrust = interp1d(\n        derived_time,\n        self.derived_data[\"thrust\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n    drag = interp1d(\n        derived_time,\n        self.derived_data[\"drag\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n\n    # Interpolate additional derived quantities\n    water_exhaust_speed = interp1d(\n        derived_time,\n        self.derived_data[\"water_exhaust_speed\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    air_exhaust_speed = interp1d(\n        derived_time,\n        self.derived_data[\"air_exhaust_speed\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    water_mass_flow_rate = interp1d(\n        derived_time,\n        self.derived_data[\"water_mass_flow_rate\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    air_mass_flow_rate = interp1d(\n        derived_time,\n        self.derived_data[\"air_mass_flow_rate\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    air_exit_pressure = interp1d(\n        derived_time,\n        self.derived_data[\"air_exit_pressure\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=ATMOSPHERIC_PRESSURE,\n    )(time)\n    air_exit_temperature = interp1d(\n        derived_time,\n        self.derived_data[\"air_exit_temperature\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=INITIAL_TEMPERATURE,\n    )(time)\n\n    # Calculate accelerations\n    acceleration = np.gradient(velocity, time)\n\n    # Create flight data object\n    flight_data = FlightData(\n        time=time,\n        altitude=altitude,\n        velocity=velocity,\n        acceleration=acceleration,\n        water_mass=water_mass,\n        liquid_gas_mass=liquid_gas_mass,\n        air_mass=air_mass,\n        pressure=pressure,\n        air_temperature=air_temperature,\n        thrust=thrust,\n        drag=drag,\n        water_exhaust_speed=water_exhaust_speed,\n        air_exhaust_speed=air_exhaust_speed,\n        water_mass_flow_rate=water_mass_flow_rate,\n        air_mass_flow_rate=air_mass_flow_rate,\n        air_exit_pressure=air_exit_pressure,\n        air_exit_temperature=air_exit_temperature,\n        max_altitude=np.max(altitude),\n        max_velocity=np.max(velocity),\n        flight_time=time[-1],\n        water_depletion_time=water_depletion_time,\n        air_depletion_time=air_depletion_time,\n    )\n\n    return flight_data\n</code></pre>"},{"location":"api/core/validation/","title":"waterrocketpy.core.validation","text":"<p>Validation functions for water rocket simulation parameters.</p>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator","title":"<code> ParameterValidator        </code>","text":"<p>Validates simulation and rocket parameters.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>class ParameterValidator:\n    \"\"\"Validates simulation and rocket parameters.\"\"\"\n\n    @staticmethod\n    def validate_positive(\n        value: float, name: str, min_value: float = 0\n    ) -&gt; None:\n        \"\"\"Validate that a value is positive.\"\"\"\n        if value &lt;= min_value:\n            raise ValidationError(\n                f\"{name} must be greater than {min_value}, got {value}\"\n            )\n\n    @staticmethod\n    def validate_range(\n        value: float, name: str, min_val: float, max_val: float\n    ) -&gt; None:\n        \"\"\"Validate that a value is within a specified range.\"\"\"\n        if not (min_val &lt;= value &lt;= max_val):\n            raise ValidationError(\n                f\"{name} must be between {min_val} and {max_val}, got {value}\"\n            )\n\n    @staticmethod\n    def validate_fraction(value: float, name: str) -&gt; None:\n        \"\"\"Validate that a value is a valid fraction (0-1).\"\"\"\n        ParameterValidator.validate_range(value, name, 0.0, 1.0)\n\n    @staticmethod\n    def validate_rocket_parameters(params: Dict[str, Any]) -&gt; List[str]:\n        \"\"\"\n        Validate rocket parameters and return list of warnings.\n\n        Args:\n            params: Dictionary of rocket parameters\n\n        Returns:\n            List of warning messages\n\n        Raises:\n            ValidationError: If critical parameters are invalid\n        \"\"\"\n        warnings = []\n\n        # Required parameters\n        required_params = [\n            \"P0\",\n            \"A_nozzle\",\n            \"V_bottle\",\n            \"water_fraction\",\n            \"C_d\",\n            \"m_empty\",\n            \"C_drag\",\n            \"A_rocket\",\n        ]\n\n        for param in required_params:\n            if param not in params:\n                raise ValidationError(f\"Missing required parameter: {param}\")\n\n        # Validate pressure\n        ParameterValidator.validate_positive(\n            params[\"P0\"], \"Initial pressure (P0)\"\n        )\n        if params[\"P0\"] &lt; ATMOSPHERIC_PRESSURE:\n            warnings.append(\"Initial pressure is below atmospheric pressure\")\n        if params[\"P0\"] &gt; 50 * ATMOSPHERIC_PRESSURE:\n            warnings.append(\n                \"Initial pressure is very high (&gt;50 bar) - safety concern\"\n            )\n\n        # Validate areas\n        ParameterValidator.validate_positive(\n            params[\"A_nozzle\"], \"Nozzle area (A_nozzle)\"\n        )\n        ParameterValidator.validate_positive(\n            params[\"A_rocket\"], \"Rocket cross-sectional area (A_rocket)\"\n        )\n\n        # Validate volume\n        ParameterValidator.validate_positive(\n            params[\"V_bottle\"], \"Bottle volume (V_bottle)\"\n        )\n\n        # Validate water fraction\n        ParameterValidator.validate_fraction(\n            params[\"water_fraction\"], \"Water fraction\"\n        )\n        if params[\"water_fraction\"] &lt; 0.1:\n            warnings.append(\n                \"Water fraction is very low (&lt;10%) - may result in poor performance\"\n            )\n        if params[\"water_fraction\"] &gt; 0.8:\n            warnings.append(\n                \"Water fraction is very high (&gt;80%) - may result in poor performance\"\n            )\n\n        # Validate coefficients\n        ParameterValidator.validate_range(\n            params[\"C_d\"], \"Discharge coefficient (C_d)\", 0.1, 1.0\n        )\n        ParameterValidator.validate_range(\n            params[\"C_drag\"], \"Drag coefficient (C_drag)\", 0.1, 2.0\n        )\n\n        # Validate mass\n        ParameterValidator.validate_positive(\n            params[\"m_empty\"], \"Empty mass (m_empty)\"\n        )\n\n        # Check for reasonable values\n        if params[\"C_d\"] &lt; 0.6:\n            warnings.append(\n                \"Discharge coefficient is low (&lt;0.6) - check nozzle design\"\n            )\n        if params[\"C_drag\"] &gt; 1.5:\n            warnings.append(\n                \"Drag coefficient is high (&gt;1.5) - check rocket aerodynamics\"\n            )\n\n        return warnings\n\n    @staticmethod\n    def validate_simulation_parameters(params: Dict[str, Any]) -&gt; List[str]:\n        \"\"\"\n        Validate simulation parameters.\n\n        Args:\n            params: Dictionary of simulation parameters\n\n        Returns:\n            List of warning messages\n        \"\"\"\n        warnings = []\n\n        if \"max_time\" in params:\n            ParameterValidator.validate_positive(\n                params[\"max_time\"], \"Maximum simulation time\"\n            )\n            if params[\"max_time\"] &gt; 60:\n                warnings.append(\"Maximum simulation time is very long (&gt;60s)\")\n\n        if \"time_step\" in params:\n            ParameterValidator.validate_positive(\n                params[\"time_step\"], \"Time step\"\n            )\n            if params[\"time_step\"] &gt; 0.1:\n                warnings.append(\n                    \"Time step is large (&gt;0.1s) - may affect accuracy\"\n                )\n            if params[\"time_step\"] &lt; 0.001:\n                warnings.append(\n                    \"Time step is very small (&lt;0.001s) - may be computationally expensive\"\n                )\n\n        return warnings\n\n    @staticmethod\n    def validate_flight_data(\n        time: np.ndarray,\n        altitude: np.ndarray,\n        velocity: np.ndarray,\n        mass: np.ndarray,\n    ) -&gt; bool:\n        \"\"\"\n        Validate flight data for physical consistency.\n\n        Args:\n            time: Time array\n            altitude: Altitude array\n            velocity: Velocity array\n            mass: Mass array\n\n        Returns:\n            bool: True if data is valid\n        \"\"\"\n        # Check array lengths\n        if not (len(time) == len(altitude) == len(velocity) == len(mass)):\n            raise ValidationError(\n                \"All flight data arrays must have the same length\"\n            )\n\n        # Check for NaN or infinite values\n        for arr, name in [\n            (time, \"time\"),\n            (altitude, \"altitude\"),\n            (velocity, \"velocity\"),\n            (mass, \"mass\"),\n        ]:\n            if np.any(np.isnan(arr)) or np.any(np.isinf(arr)):\n                raise ValidationError(\n                    f\"{name} array contains NaN or infinite values\"\n                )\n\n        # Check physical constraints\n        if np.any(mass &lt; 0):\n            raise ValidationError(\"Mass cannot be negative\")\n\n        if np.any(altitude &lt; 0):\n            raise ValidationError(\"Altitude cannot be negative\")\n\n        # Check time monotonicity\n        if not np.all(np.diff(time) &gt; 0):\n            raise ValidationError(\n                \"Time array must be monotonically increasing\"\n            )\n\n        return True\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_flight_data","title":"<code>validate_flight_data(time, altitude, velocity, mass)</code>  <code>staticmethod</code>","text":"<p>Validate flight data for physical consistency.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>ndarray</code> <p>Time array</p> required <code>altitude</code> <code>ndarray</code> <p>Altitude array</p> required <code>velocity</code> <code>ndarray</code> <p>Velocity array</p> required <code>mass</code> <code>ndarray</code> <p>Mass array</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if data is valid</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_flight_data(\n    time: np.ndarray,\n    altitude: np.ndarray,\n    velocity: np.ndarray,\n    mass: np.ndarray,\n) -&gt; bool:\n    \"\"\"\n    Validate flight data for physical consistency.\n\n    Args:\n        time: Time array\n        altitude: Altitude array\n        velocity: Velocity array\n        mass: Mass array\n\n    Returns:\n        bool: True if data is valid\n    \"\"\"\n    # Check array lengths\n    if not (len(time) == len(altitude) == len(velocity) == len(mass)):\n        raise ValidationError(\n            \"All flight data arrays must have the same length\"\n        )\n\n    # Check for NaN or infinite values\n    for arr, name in [\n        (time, \"time\"),\n        (altitude, \"altitude\"),\n        (velocity, \"velocity\"),\n        (mass, \"mass\"),\n    ]:\n        if np.any(np.isnan(arr)) or np.any(np.isinf(arr)):\n            raise ValidationError(\n                f\"{name} array contains NaN or infinite values\"\n            )\n\n    # Check physical constraints\n    if np.any(mass &lt; 0):\n        raise ValidationError(\"Mass cannot be negative\")\n\n    if np.any(altitude &lt; 0):\n        raise ValidationError(\"Altitude cannot be negative\")\n\n    # Check time monotonicity\n    if not np.all(np.diff(time) &gt; 0):\n        raise ValidationError(\n            \"Time array must be monotonically increasing\"\n        )\n\n    return True\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_fraction","title":"<code>validate_fraction(value, name)</code>  <code>staticmethod</code>","text":"<p>Validate that a value is a valid fraction (0-1).</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_fraction(value: float, name: str) -&gt; None:\n    \"\"\"Validate that a value is a valid fraction (0-1).\"\"\"\n    ParameterValidator.validate_range(value, name, 0.0, 1.0)\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_positive","title":"<code>validate_positive(value, name, min_value=0)</code>  <code>staticmethod</code>","text":"<p>Validate that a value is positive.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_positive(\n    value: float, name: str, min_value: float = 0\n) -&gt; None:\n    \"\"\"Validate that a value is positive.\"\"\"\n    if value &lt;= min_value:\n        raise ValidationError(\n            f\"{name} must be greater than {min_value}, got {value}\"\n        )\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_range","title":"<code>validate_range(value, name, min_val, max_val)</code>  <code>staticmethod</code>","text":"<p>Validate that a value is within a specified range.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_range(\n    value: float, name: str, min_val: float, max_val: float\n) -&gt; None:\n    \"\"\"Validate that a value is within a specified range.\"\"\"\n    if not (min_val &lt;= value &lt;= max_val):\n        raise ValidationError(\n            f\"{name} must be between {min_val} and {max_val}, got {value}\"\n        )\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_rocket_parameters","title":"<code>validate_rocket_parameters(params)</code>  <code>staticmethod</code>","text":"<p>Validate rocket parameters and return list of warnings.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Any]</code> <p>Dictionary of rocket parameters</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of warning messages</p> <p>Exceptions:</p> Type Description <code>ValidationError</code> <p>If critical parameters are invalid</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_rocket_parameters(params: Dict[str, Any]) -&gt; List[str]:\n    \"\"\"\n    Validate rocket parameters and return list of warnings.\n\n    Args:\n        params: Dictionary of rocket parameters\n\n    Returns:\n        List of warning messages\n\n    Raises:\n        ValidationError: If critical parameters are invalid\n    \"\"\"\n    warnings = []\n\n    # Required parameters\n    required_params = [\n        \"P0\",\n        \"A_nozzle\",\n        \"V_bottle\",\n        \"water_fraction\",\n        \"C_d\",\n        \"m_empty\",\n        \"C_drag\",\n        \"A_rocket\",\n    ]\n\n    for param in required_params:\n        if param not in params:\n            raise ValidationError(f\"Missing required parameter: {param}\")\n\n    # Validate pressure\n    ParameterValidator.validate_positive(\n        params[\"P0\"], \"Initial pressure (P0)\"\n    )\n    if params[\"P0\"] &lt; ATMOSPHERIC_PRESSURE:\n        warnings.append(\"Initial pressure is below atmospheric pressure\")\n    if params[\"P0\"] &gt; 50 * ATMOSPHERIC_PRESSURE:\n        warnings.append(\n            \"Initial pressure is very high (&gt;50 bar) - safety concern\"\n        )\n\n    # Validate areas\n    ParameterValidator.validate_positive(\n        params[\"A_nozzle\"], \"Nozzle area (A_nozzle)\"\n    )\n    ParameterValidator.validate_positive(\n        params[\"A_rocket\"], \"Rocket cross-sectional area (A_rocket)\"\n    )\n\n    # Validate volume\n    ParameterValidator.validate_positive(\n        params[\"V_bottle\"], \"Bottle volume (V_bottle)\"\n    )\n\n    # Validate water fraction\n    ParameterValidator.validate_fraction(\n        params[\"water_fraction\"], \"Water fraction\"\n    )\n    if params[\"water_fraction\"] &lt; 0.1:\n        warnings.append(\n            \"Water fraction is very low (&lt;10%) - may result in poor performance\"\n        )\n    if params[\"water_fraction\"] &gt; 0.8:\n        warnings.append(\n            \"Water fraction is very high (&gt;80%) - may result in poor performance\"\n        )\n\n    # Validate coefficients\n    ParameterValidator.validate_range(\n        params[\"C_d\"], \"Discharge coefficient (C_d)\", 0.1, 1.0\n    )\n    ParameterValidator.validate_range(\n        params[\"C_drag\"], \"Drag coefficient (C_drag)\", 0.1, 2.0\n    )\n\n    # Validate mass\n    ParameterValidator.validate_positive(\n        params[\"m_empty\"], \"Empty mass (m_empty)\"\n    )\n\n    # Check for reasonable values\n    if params[\"C_d\"] &lt; 0.6:\n        warnings.append(\n            \"Discharge coefficient is low (&lt;0.6) - check nozzle design\"\n        )\n    if params[\"C_drag\"] &gt; 1.5:\n        warnings.append(\n            \"Drag coefficient is high (&gt;1.5) - check rocket aerodynamics\"\n        )\n\n    return warnings\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_simulation_parameters","title":"<code>validate_simulation_parameters(params)</code>  <code>staticmethod</code>","text":"<p>Validate simulation parameters.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Any]</code> <p>Dictionary of simulation parameters</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of warning messages</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_simulation_parameters(params: Dict[str, Any]) -&gt; List[str]:\n    \"\"\"\n    Validate simulation parameters.\n\n    Args:\n        params: Dictionary of simulation parameters\n\n    Returns:\n        List of warning messages\n    \"\"\"\n    warnings = []\n\n    if \"max_time\" in params:\n        ParameterValidator.validate_positive(\n            params[\"max_time\"], \"Maximum simulation time\"\n        )\n        if params[\"max_time\"] &gt; 60:\n            warnings.append(\"Maximum simulation time is very long (&gt;60s)\")\n\n    if \"time_step\" in params:\n        ParameterValidator.validate_positive(\n            params[\"time_step\"], \"Time step\"\n        )\n        if params[\"time_step\"] &gt; 0.1:\n            warnings.append(\n                \"Time step is large (&gt;0.1s) - may affect accuracy\"\n            )\n        if params[\"time_step\"] &lt; 0.001:\n            warnings.append(\n                \"Time step is very small (&lt;0.001s) - may be computationally expensive\"\n            )\n\n    return warnings\n</code></pre>"},{"location":"api/core/validation/#waterrocketpy.core.validation.ValidationError","title":"<code> ValidationError            (Exception)         </code>","text":"<p>Custom exception for validation errors.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>class ValidationError(Exception):\n    \"\"\"Custom exception for validation errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_plot_energy_breakdown3/","title":"examples.Work_in_Progress.use_plot_energy_breakdown3","text":"<p>Example demonstrating energy breakdown analysis for water rocket simulation.</p> <p>This script shows how to: 1. Run a water rocket simulation 2. Perform detailed energy analysis 3. Create energy breakdown plots 4. Understand energy flow through the system</p>"},{"location":"api/examples/Work_in_Progress/use_plot_energy_breakdown3/#examples.Work_in_Progress.use_plot_energy_breakdown3.create_energy_plots","title":"<code>create_energy_plots(energy_components, flight_data)</code>","text":"<p>Create comprehensive energy breakdown plots.</p> Source code in <code>Work_in_Progress/use_plot_energy_breakdown3.py</code> <pre><code>def create_energy_plots(energy_components, flight_data):\n    \"\"\"Create comprehensive energy breakdown plots.\"\"\"\n\n    # Set up the plotting style\n    plt.style.use(\"seaborn-v0_8\")\n    colors = {\n        \"internal\": \"#FF6B6B\",\n        \"kinetic\": \"#4ECDC4\",\n        \"potential\": \"#45B7D1\",\n        \"expelled\": \"#96CEB4\",\n        \"losses\": \"#FFEAA7\",\n        \"total\": \"#2D3436\",\n    }\n\n    # Create figure with subplots\n    fig = plt.figure(figsize=(16, 12))\n    gs = fig.add_gridspec(3, 2, hspace=0.3, wspace=0.3)\n\n    # Main energy breakdown plot (large, spanning top row)\n    ax1 = fig.add_subplot(gs[0, :])\n\n    # Calculate combined energy components for stacked plot\n    time = energy_components.time\n\n    # Energy stored in the system\n    internal_energy = energy_components.air_internal_energy\n    kinetic_energy = energy_components.rocket_kinetic_energy\n    potential_energy = energy_components.rocket_potential_energy\n\n    # Energy that left the system\n    expelled_kinetic = (\n        energy_components.water_out_kinetic_energy\n        + energy_components.air_out_kinetic_energy\n    )\n    expelled_potential = (\n        energy_components.water_out_potential_energy\n        + energy_components.air_out_potential_energy\n    )\n    expelled_total = expelled_kinetic + expelled_potential\n\n    # Energy losses\n    drag_losses = energy_components.drag_energy_loss\n\n    # Create stacked area plot\n    ax1.fill_between(\n        time,\n        0,\n        internal_energy,\n        color=colors[\"internal\"],\n        alpha=0.8,\n        label=\"Internal Energy (Air)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy,\n        internal_energy + kinetic_energy,\n        color=colors[\"kinetic\"],\n        alpha=0.8,\n        label=\"Kinetic Energy (Rocket)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy,\n        internal_energy + kinetic_energy + potential_energy,\n        color=colors[\"potential\"],\n        alpha=0.8,\n        label=\"Potential Energy (Rocket)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy + potential_energy,\n        internal_energy + kinetic_energy + potential_energy + expelled_total,\n        color=colors[\"expelled\"],\n        alpha=0.8,\n        label=\"Expelled Energy (Water + Air)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy + potential_energy + expelled_total,\n        internal_energy\n        + kinetic_energy\n        + potential_energy\n        + expelled_total\n        + drag_losses,\n        color=colors[\"losses\"],\n        alpha=0.8,\n        label=\"Energy Losses (Drag)\",\n    )\n\n    # Add total energy line\n    total_energy = (\n        internal_energy\n        + kinetic_energy\n        + potential_energy\n        + expelled_total\n        + drag_losses\n    )\n    ax1.plot(\n        time,\n        total_energy,\n        color=colors[\"total\"],\n        linewidth=2,\n        label=f\"Total Energy (Initial: {energy_components.total_initial_energy:.0f} J)\",\n    )\n\n    # Add vertical lines for phase transitions\n    if flight_data.water_depletion_time &gt; 0:\n        ax1.axvline(\n            flight_data.water_depletion_time,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Water Depletion\",\n        )\n    if flight_data.air_depletion_time &gt; 0:\n        ax1.axvline(\n            flight_data.air_depletion_time,\n            color=\"orange\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Air Depletion\",\n        )\n\n    ax1.set_xlabel(\"Time (s)\")\n    ax1.set_ylabel(\"Energy (J)\")\n    ax1.set_title(\n        \"Complete Energy Breakdown Over Time\", fontsize=14, fontweight=\"bold\"\n    )\n    ax1.legend(loc=\"upper right\", bbox_to_anchor=(1.02, 1))\n    ax1.grid(True, alpha=0.3)\n\n    # Detailed kinetic energy breakdown\n    ax2 = fig.add_subplot(gs[1, 0])\n    ax2.plot(\n        time,\n        energy_components.rocket_kinetic_energy,\n        color=colors[\"kinetic\"],\n        linewidth=2,\n        label=\"Rocket Kinetic\",\n    )\n    ax2.plot(\n        time,\n        energy_components.water_out_kinetic_energy,\n        color=\"#74b9ff\",\n        linewidth=2,\n        label=\"Expelled Water Kinetic\",\n    )\n    ax2.plot(\n        time,\n        energy_components.air_out_kinetic_energy,\n        color=\"#a29bfe\",\n        linewidth=2,\n        label=\"Expelled Air Kinetic\",\n    )\n    ax2.set_xlabel(\"Time (s)\")\n    ax2.set_ylabel(\"Kinetic Energy (J)\")\n    ax2.set_title(\"Kinetic Energy Components\")\n    ax2.legend()\n    ax2.grid(True, alpha=0.3)\n\n    # Detailed potential energy breakdown\n    ax3 = fig.add_subplot(gs[1, 1])\n    ax3.plot(\n        time,\n        energy_components.rocket_potential_energy,\n        color=colors[\"potential\"],\n        linewidth=2,\n        label=\"Rocket Potential\",\n    )\n    ax3.plot(\n        time,\n        energy_components.water_out_potential_energy,\n        color=\"#00b894\",\n        linewidth=2,\n        label=\"Expelled Water Potential\",\n    )\n    ax3.plot(\n        time,\n        energy_components.air_out_potential_energy,\n        color=\"#00cec9\",\n        linewidth=2,\n        label=\"Expelled Air Potential\",\n    )\n    ax3.set_xlabel(\"Time (s)\")\n    ax3.set_ylabel(\"Potential Energy (J)\")\n    ax3.set_title(\"Potential Energy Components\")\n    ax3.legend()\n    ax3.grid(True, alpha=0.3)\n\n    # Energy conservation check\n    ax4 = fig.add_subplot(gs[2, 0])\n    ax4.plot(\n        time,\n        energy_components.energy_conservation_error,\n        color=\"red\",\n        linewidth=2,\n    )\n    ax4.set_xlabel(\"Time (s)\")\n    ax4.set_ylabel(\"Conservation Error (%)\")\n    ax4.set_title(\"Energy Conservation Error\")\n    ax4.grid(True, alpha=0.3)\n\n    # Energy flow rates\n    ax5 = fig.add_subplot(gs[2, 1])\n\n    # Calculate energy flow rates (derivatives)\n    dt = np.diff(time)\n    expelled_rate = np.diff(expelled_total) / dt\n    drag_rate = np.diff(drag_losses) / dt\n\n    # Pad with zeros to match time array length\n    expelled_rate = np.append(expelled_rate, 0)\n    drag_rate = np.append(drag_rate, 0)\n\n    ax5.plot(\n        time,\n        expelled_rate,\n        color=colors[\"expelled\"],\n        linewidth=2,\n        label=\"Expelled Energy Rate\",\n    )\n    ax5.plot(\n        time,\n        drag_rate,\n        color=colors[\"losses\"],\n        linewidth=2,\n        label=\"Drag Loss Rate\",\n    )\n    ax5.set_xlabel(\"Time (s)\")\n    ax5.set_ylabel(\"Energy Rate (J/s)\")\n    ax5.set_title(\"Energy Flow Rates\")\n    ax5.legend()\n    ax5.grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.savefig(\"energy_breakdown_analysis.png\", dpi=300, bbox_inches=\"tight\")\n    plt.show()\n\n    # Create a summary pie chart of final energy distribution\n    create_energy_summary_chart(energy_components)\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_plot_energy_breakdown3/#examples.Work_in_Progress.use_plot_energy_breakdown3.create_energy_summary_chart","title":"<code>create_energy_summary_chart(energy_components)</code>","text":"<p>Create a pie chart showing final energy distribution.</p> Source code in <code>Work_in_Progress/use_plot_energy_breakdown3.py</code> <pre><code>def create_energy_summary_chart(energy_components):\n    \"\"\"Create a pie chart showing final energy distribution.\"\"\"\n\n    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 6))\n\n    # Final energy distribution\n    final_kinetic = energy_components.rocket_kinetic_energy[-1]\n    final_potential = energy_components.rocket_potential_energy[-1]\n    final_internal = energy_components.air_internal_energy[-1]\n    final_expelled = (\n        energy_components.water_out_kinetic_energy[-1]\n        + energy_components.water_out_potential_energy[-1]\n        + energy_components.air_out_kinetic_energy[-1]\n        + energy_components.air_out_potential_energy[-1]\n    )\n    final_losses = energy_components.drag_energy_loss[-1]\n\n    # Filter out very small values\n    threshold = 0.01 * energy_components.total_initial_energy\n\n    energies = []\n    labels = []\n    colors = []\n\n    if final_kinetic &gt; threshold:\n        energies.append(final_kinetic)\n        labels.append(f\"Kinetic\\n{final_kinetic:.1f} J\")\n        colors.append(\"#4ECDC4\")\n\n    if final_potential &gt; threshold:\n        energies.append(final_potential)\n        labels.append(f\"Potential\\n{final_potential:.1f} J\")\n        colors.append(\"#45B7D1\")\n\n    if final_internal &gt; threshold:\n        energies.append(final_internal)\n        labels.append(f\"Internal\\n{final_internal:.1f} J\")\n        colors.append(\"#FF6B6B\")\n\n    if final_expelled &gt; threshold:\n        energies.append(final_expelled)\n        labels.append(f\"Expelled\\n{final_expelled:.1f} J\")\n        colors.append(\"#96CEB4\")\n\n    if final_losses &gt; threshold:\n        energies.append(final_losses)\n        labels.append(f\"Drag Losses\\n{final_losses:.1f} J\")\n        colors.append(\"#FFEAA7\")\n\n    # Create pie chart\n    wedges, texts, autotexts = ax1.pie(\n        energies,\n        labels=labels,\n        colors=colors,\n        autopct=\"%1.1f%%\",\n        startangle=90,\n    )\n    ax1.set_title(\n        f\"Final Energy Distribution\\n(Total Initial: {energy_components.total_initial_energy:.0f} J)\"\n    )\n\n    # Energy efficiency analysis\n    efficiency_data = {\n        \"Useful Energy\\n(Kinetic + Potential)\": final_kinetic\n        + final_potential,\n        \"Expelled Energy\\n(Carried Away)\": final_expelled,\n        \"Energy Losses\\n(Drag)\": final_losses,\n        \"Remaining Internal\\n(Unused)\": final_internal,\n    }\n\n    ax2.bar(\n        range(len(efficiency_data)),\n        list(efficiency_data.values()),\n        color=[\"#00b894\", \"#74b9ff\", \"#fd79a8\", \"#fdcb6e\"],\n    )\n    ax2.set_xticks(range(len(efficiency_data)))\n    ax2.set_xticklabels(efficiency_data.keys(), rotation=45, ha=\"right\")\n    ax2.set_ylabel(\"Energy (J)\")\n    ax2.set_title(\"Energy Efficiency Analysis\")\n    ax2.grid(True, alpha=0.3)\n\n    # Add efficiency percentages\n    total_energy = energy_components.total_initial_energy\n    for i, (key, value) in enumerate(efficiency_data.items()):\n        percentage = (value / total_energy) * 100\n        ax2.text(\n            i,\n            value + 0.5,\n            f\"{percentage:.1f}%\",\n            ha=\"center\",\n            va=\"bottom\",\n            fontweight=\"bold\",\n        )\n\n    plt.tight_layout()\n    plt.savefig(\"energy_summary.png\", dpi=300, bbox_inches=\"tight\")\n    plt.show()\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_plot_energy_breakdown3/#examples.Work_in_Progress.use_plot_energy_breakdown3.main","title":"<code>main()</code>","text":"<p>Run energy analysis example.</p> Source code in <code>Work_in_Progress/use_plot_energy_breakdown3.py</code> <pre><code>def main():\n    \"\"\"Run energy analysis example.\"\"\"\n\n    print(\"=== Water Rocket Energy Analysis Example ===\\n\")\n\n    # Create a rocket configuration\n    print(\"1. Creating rocket configuration...\")\n    rocket_config = (\n        RocketBuilder()\n        .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.015)  # 15mm nozzle\n        .set_mass(empty_mass=0.25, water_fraction=0.4)  # 250g empty, 40% water\n        .set_initial_conditions(pressure=10 * ATMOSPHERIC_PRESSURE)  # 10 bar\n        .set_metadata(\"Energy Analysis Rocket\", \"Rocket for energy analysis\")\n        .build()\n    )\n\n    print(f\"   Rocket: {rocket_config.name}\")\n    print(\n        f\"   Initial pressure: {rocket_config.initial_pressure/ATMOSPHERIC_PRESSURE:.1f} bar\"\n    )\n    print(f\"   Water fraction: {rocket_config.water_fraction:.1%}\")\n    print(f\"   Water mass: {rocket_config.water_mass:.3f} kg\")\n\n    # Convert to simulation parameters\n    print(\"\\n2. Converting to simulation parameters...\")\n    builder = RocketBuilder.from_dict(rocket_config.__dict__)\n    rocket_params = builder.to_simulation_params()\n\n    # Create simulator and run simulation\n    print(\"\\n3. Running simulation...\")\n    simulator = WaterRocketSimulator()\n\n    sim_settings = {\"max_time\": 15.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\n    try:\n        # Run simulation\n        flight_data = simulator.simulate(rocket_params, sim_settings)\n\n        print(f\"   \u2713 Simulation completed successfully!\")\n        print(f\"   Maximum altitude: {flight_data.max_altitude:.2f} m\")\n        print(f\"   Maximum velocity: {flight_data.max_velocity:.2f} m/s\")\n        print(f\"   Flight time: {flight_data.flight_time:.2f} s\")\n        print(\n            f\"   Water depletion time: {flight_data.water_depletion_time:.2f} s\"\n        )\n\n        # Perform energy analysis\n        print(\"\\n4. Performing energy breakdown analysis...\")\n        energy_components = tenergy_breakdown(flight_data, rocket_params)\n\n        print(f\"   \u2713 Energy analysis completed!\")\n        print(\n            f\"   Initial total energy: {energy_components.total_initial_energy:.2f} J\"\n        )\n        print(\n            f\"   Maximum kinetic energy: {energy_components.max_kinetic_energy:.2f} J\"\n        )\n        print(\n            f\"   Maximum potential energy: {energy_components.max_potential_energy:.2f} J\"\n        )\n        print(f\"   Total drag loss: {energy_components.total_drag_loss:.2f} J\")\n        print(\n            f\"   Total expelled energy: {energy_components.total_expelled_energy:.2f} J\"\n        )  # somehow not printing\n        print(\n            f\"   Final energy conservation error: {energy_components.energy_conservation_error[-1]:.2f}%\"\n        )  # somehow not printing\n\n        # Create comprehensive energy plots\n        print(\"\\n5. Creating energy breakdown plots...\")\n        create_energy_plots(energy_components, flight_data)\n        create_energy_summary_chart(energy_components, flight_data)\n\n        print(\"\\n   \u2713 Plots created successfully!\")\n        print(\n            \"   Check the generated plot files for detailed energy analysis.\"\n        )\n\n    except Exception as e:\n        print(f\"   \u2717 Error: {e}\")\n        return\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_plot_energy_breakdown3_c/","title":"examples.Work_in_Progress.use_plot_energy_breakdown3_c","text":"<p>Example demonstrating energy breakdown analysis for water rocket simulation.</p> <p>This script shows how to: 1. Run a water rocket simulation 2. Perform detailed energy analysis 3. Create energy breakdown plots 4. Understand energy flow through the system</p>"},{"location":"api/examples/Work_in_Progress/use_plot_energy_breakdown3_c/#examples.Work_in_Progress.use_plot_energy_breakdown3_c.main","title":"<code>main()</code>","text":"<p>Run energy analysis example.</p> Source code in <code>Work_in_Progress/use_plot_energy_breakdown3_c.py</code> <pre><code>def main():\n    \"\"\"Run energy analysis example.\"\"\"\n\n    print(\"=== Water Rocket Energy Analysis Example ===\\n\")\n\n    # Create a rocket configuration\n    print(\"1. Creating rocket configuration...\")\n    rocket_config = (\n        RocketBuilder()\n        .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.015)  # 15mm nozzle\n        .set_mass(empty_mass=0.25, water_fraction=0.4)  # 250g empty, 40% water\n        .set_initial_conditions(pressure=10 * ATMOSPHERIC_PRESSURE)  # 10 bar\n        .set_metadata(\"Energy Analysis Rocket\", \"Rocket for energy analysis\")\n        .build()\n    )\n\n    print(f\"   Rocket: {rocket_config.name}\")\n    print(\n        f\"   Initial pressure: {rocket_config.initial_pressure/ATMOSPHERIC_PRESSURE:.1f} bar\"\n    )\n    print(f\"   Water fraction: {rocket_config.water_fraction:.1%}\")\n    print(f\"   Water mass: {rocket_config.water_mass:.3f} kg\")\n\n    # Convert to simulation parameters\n    print(\"\\n2. Converting to simulation parameters...\")\n    builder = RocketBuilder.from_dict(rocket_config.__dict__)\n    rocket_params = builder.to_simulation_params()\n\n    # Create simulator and run simulation\n    print(\"\\n3. Running simulation...\")\n    simulator = WaterRocketSimulator()\n\n    sim_settings = {\"max_time\": 15.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\n    try:\n        # Run simulation\n        flight_data = simulator.simulate(rocket_params, sim_settings)\n\n        print(f\"   \u2713 Simulation completed successfully!\")\n        print(f\"   Maximum altitude: {flight_data.max_altitude:.2f} m\")\n        print(f\"   Maximum velocity: {flight_data.max_velocity:.2f} m/s\")\n        print(f\"   Flight time: {flight_data.flight_time:.2f} s\")\n        print(\n            f\"   Water depletion time: {flight_data.water_depletion_time:.2f} s\"\n        )\n\n        # Perform energy analysis\n        print(\"\\n4. Performing energy breakdown analysis...\")\n        energy_components = tenergy_breakdown(flight_data, rocket_params)\n\n        # Override internal energy so total energy conserved\n        total_energy_assumed = 1554.1 - 420\n\n        # Calculate other energies at each timestep\n        kinetic_energy = energy_components.rocket_kinetic_energy\n        potential_energy = energy_components.rocket_potential_energy\n        expelled_energy = (\n            energy_components.water_out_kinetic_energy\n            + energy_components.water_out_potential_energy\n            + energy_components.air_out_kinetic_energy\n            + energy_components.air_out_potential_energy\n        )\n        drag_losses = energy_components.drag_energy_loss\n\n        # Calculate \"fixed\" internal energy as the remainder\n        corrected_internal_energy = total_energy_assumed - (\n            kinetic_energy + potential_energy + expelled_energy + drag_losses\n        )\n\n        # Ensure internal energy doesn't go negative\n        corrected_internal_energy = np.clip(corrected_internal_energy, 0, None)\n\n        # Override the internal energy in the energy_components object\n        energy_components.air_internal_energy = corrected_internal_energy\n        energy_components.total_initial_energy = total_energy_assumed\n\n        print(f\"   \u2713 Energy analysis completed!\")\n        print(\n            f\"   Initial total energy: {energy_components.total_initial_energy:.2f} J\"\n        )\n        print(\n            f\"   Maximum kinetic energy: {energy_components.max_kinetic_energy:.2f} J\"\n        )\n        print(\n            f\"   Maximum potential energy: {energy_components.max_potential_energy:.2f} J\"\n        )\n        print(f\"   Total drag loss: {energy_components.total_drag_loss:.2f} J\")\n        print(\n            f\"   Total expelled energy: {energy_components.total_expelled_energy:.2f} J\"\n        )  # somehow not printing\n        print(\n            f\"   Final energy conservation error: {energy_components.energy_conservation_error[-1]:.2f}%\"\n        )  # somehow not printing\n\n        # Create comprehensive energy plots\n        print(\"\\n5. Creating energy breakdown plots...\")\n        create_energy_plots(energy_components, flight_data)\n        create_energy_summary_chart(energy_components, flight_data)\n\n\n        print(\"\\n   \u2713 Plots created successfully!\")\n        print(\n            \"   Check the generated plot files for detailed energy analysis.\"\n        )\n\n    except Exception as e:\n        print(f\"   \u2717 Error: {e}\")\n        return\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_sim_and_builder/","title":"examples.Work_in_Progress.use_sim_and_builder","text":"<p>Simple example demonstrating water rocket simulation using waterrocketpy.</p> <p>This script shows how to: 1. Create a rocket configuration using the builder pattern 2. Run a simulation with the rocket 3. Display basic results</p> <p>Run this from the root of your waterrocketpy package directory.</p>"},{"location":"api/examples/Work_in_Progress/use_sim_and_builder/#examples.Work_in_Progress.use_sim_and_builder.compare_configurations","title":"<code>compare_configurations()</code>","text":"<p>Compare different rocket configurations.</p> Source code in <code>Work_in_Progress/use_sim_and_builder.py</code> <pre><code>def compare_configurations():\n    \"\"\"Compare different rocket configurations.\"\"\"\n\n    print(\"\\n=== Comparing Different Configurations ===\\n\")\n\n    # Create different rocket configurations\n    configs = [\n        (\n            \"Low Pressure\",\n            RocketBuilder()\n            .set_initial_conditions(pressure=5 * ATMOSPHERIC_PRESSURE)\n            .set_metadata(\"Low Pressure\", \"5 bar initial pressure\")\n            .build(),\n        ),\n        (\n            \"Medium Pressure\",\n            RocketBuilder()\n            .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)\n            .set_metadata(\"Medium Pressure\", \"8 bar initial pressure\")\n            .build(),\n        ),\n        (\n            \"High Pressure\",\n            RocketBuilder()\n            .set_initial_conditions(pressure=12 * ATMOSPHERIC_PRESSURE)\n            .set_metadata(\"High Pressure\", \"12 bar initial pressure\")\n            .build(),\n        ),\n    ]\n\n    simulator = WaterRocketSimulator()\n    results = []\n\n    for name, config in configs:\n        print(f\"Simulating {name}...\")\n        builder = RocketBuilder.from_dict(config.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        try:\n            flight_data = simulator.simulate(sim_params, {\"max_time\": 15.0})\n            results.append((name, flight_data))\n            print(f\"   Max altitude: {flight_data.max_altitude:.2f} m\")\n        except Exception as e:\n            print(f\"   Error: {e}\")\n\n    # Plot comparison\n    if results:\n        plt.figure(figsize=(10, 6))\n        for name, data in results:\n            plt.plot(data.time, data.altitude, linewidth=2, label=name)\n\n        plt.xlabel(\"Time (s)\")\n        plt.ylabel(\"Altitude (m)\")\n        plt.title(\"Altitude Comparison: Different Initial Pressures\")\n        plt.legend()\n        plt.grid(True, alpha=0.3)\n        plt.show()\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_sim_and_builder/#examples.Work_in_Progress.use_sim_and_builder.create_plots","title":"<code>create_plots(flight_data)</code>","text":"<p>Create simple plots of the simulation results.</p> Source code in <code>Work_in_Progress/use_sim_and_builder.py</code> <pre><code>def create_plots(flight_data):\n    \"\"\"Create simple plots of the simulation results.\"\"\"\n\n    # Create figure with subplots\n    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(12, 10))\n    fig.suptitle(\"Water Rocket Simulation Results\", fontsize=16)\n\n    # Plot 1: Altitude vs Time\n    ax1.plot(flight_data.time, flight_data.altitude, \"b-\", linewidth=2)\n    ax1.set_xlabel(\"Time (s)\")\n    ax1.set_ylabel(\"Altitude (m)\")\n    ax1.set_title(\"Altitude vs Time\")\n    ax1.grid(True, alpha=0.3)\n\n    # Plot 2: Velocity vs Time\n    ax2.plot(flight_data.time, flight_data.velocity, \"r-\", linewidth=2)\n    ax2.set_xlabel(\"Time (s)\")\n    ax2.set_ylabel(\"Velocity (m/s)\")\n    ax2.set_title(\"Velocity vs Time\")\n    ax2.grid(True, alpha=0.3)\n\n    # Plot 3: Water Mass vs Time\n    ax3.plot(flight_data.time, flight_data.water_mass, \"g-\", linewidth=2)\n    ax3.set_xlabel(\"Time (s)\")\n    ax3.set_ylabel(\"Water Mass (kg)\")\n    ax3.set_title(\"Water Mass vs Time\")\n    ax3.grid(True, alpha=0.3)\n\n    # Plot 4: Thrust and Drag vs Time\n    ax4.plot(\n        flight_data.time,\n        flight_data.thrust,\n        \"orange\",\n        linewidth=2,\n        label=\"Thrust\",\n    )\n    ax4.plot(\n        flight_data.time, flight_data.drag, \"purple\", linewidth=2, label=\"Drag\"\n    )\n    ax4.set_xlabel(\"Time (s)\")\n    ax4.set_ylabel(\"Force (N)\")\n    ax4.set_title(\"Forces vs Time\")\n    ax4.legend()\n    ax4.grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.show()\n\n    # Print some key statistics\n    print(f\"   Peak thrust: {np.max(flight_data.thrust):.2f} N\")\n    print(f\"   Peak drag: {np.max(flight_data.drag):.2f} N\")\n    print(\n        f\"   Thrust duration: {np.sum(flight_data.thrust &gt; 0) * (flight_data.time[1] - flight_data.time[0]):.2f} s\"\n    )\n</code></pre>"},{"location":"api/examples/Work_in_Progress/use_sim_and_builder/#examples.Work_in_Progress.use_sim_and_builder.main","title":"<code>main()</code>","text":"<p>Run a simple water rocket simulation example.</p> Source code in <code>Work_in_Progress/use_sim_and_builder.py</code> <pre><code>def main():\n    \"\"\"Run a simple water rocket simulation example.\"\"\"\n\n    print(\"=== Water Rocket Simulation Example ===\\n\")\n\n    # Method 1: Create a rocket using the builder pattern\n    print(\"1. Creating rocket using builder pattern...\")\n\n    custom_rocket = (\n        RocketBuilder()\n        .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle, 10cm diameter\n        .set_nozzle(diameter=0.015)  # 15mm nozzle\n        .set_mass(\n            empty_mass=0.25, water_fraction=0.33\n        )  # 250g empty, 33% water\n        .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)  # 8 bar\n        .set_metadata(\"Custom Rocket\", \"Example rocket configuration\")\n        .build()\n    )\n\n    print(f\"   Rocket: {custom_rocket.name}\")\n    print(f\"   Water mass: {custom_rocket.water_mass:.3f} kg\")\n    print(f\"   Total mass: {custom_rocket.total_mass:.3f} kg\")\n    print(f\"   Nozzle area: {custom_rocket.nozzle_area*1000:.1f} mm\u00b2\")\n\n    # Method 2: Use a pre-built configuration\n    print(\"\\n2. Using pre-built standard rocket...\")\n    standard_rocket = create_standard_rocket()\n    print(f\"   Rocket: {standard_rocket.name}\")\n\n    # Method 3: Use a create_dimensional_rocket_example configuration\n    print(\"\\n3. Using create_dimensional_rocket_example standard rocket...\")\n    dimensional_rocket = create_dimensional_rocket_example()\n    print(f\"   Rocket: {standard_rocket.name}\")\n\n    # Convert rocket configuration to simulation parameters\n    print(\"\\n3. Converting to simulation parameters...\")\n    builder = RocketBuilder.from_dict(standard_rocket.__dict__)\n    sim_params = builder.to_simulation_params()\n\n    print(\"   Simulation parameters:\")\n    for key, value in sim_params.items():\n        if isinstance(value, float):\n            print(f\"     {key}: {value:.6f}\")\n        else:\n            print(f\"     {key}: {value}\")\n\n    # Create simulator and run simulation\n    print(\"\\n4. Running simulation...\")\n    simulator = WaterRocketSimulator()\n\n    # Set simulation parameters\n    simulation_settings = {\n        \"max_time\": 30,  # Maximum simulation time (seconds)\n        \"time_step\": 0.01,  # Time step (seconds)\n        \"solver\": \"RK45\",  # ODE solver method\n    }\n\n    try:\n        # Run the simulation\n        flight_data = simulator.simulate(sim_params, simulation_settings)\n\n        # Display results\n        print(\"\\n5. Simulation Results:\")\n        print(f\"   Maximum altitude: {flight_data.max_altitude:.2f} m\")\n        print(f\"   Maximum velocity: {flight_data.max_velocity:.2f} m/s\")\n        print(f\"   Flight time: {flight_data.flight_time:.2f} s\")\n        print(\n            f\"   Water depletion time: {flight_data.water_depletion_time:.2f} s\"\n        )\n\n        # Create simple plots\n        print(\"\\n6. Creating plots...\")\n        create_plots(flight_data)\n\n    except Exception as e:\n        print(f\"   Error during simulation: {e}\")\n        print(f\"   Error type: {type(e).__name__}\")\n        import traceback\n\n        traceback.print_exc()\n</code></pre>"},{"location":"api/examples/analysis/use_parameter_explorer_multiple_Parameters/","title":"examples.analysis.use_parameter_explorer_multiple_Parameters","text":"<p>Simple example demonstrating ...</p> <p>This script shows how to:</p> <p>Run this from the root of your waterrocketpy package directory.</p>"},{"location":"api/examples/analysis/use_parameter_explorer_multiple_Parameters/#examples.analysis.use_parameter_explorer_multiple_Parameters.main","title":"<code>main()</code>","text":"<p>Run a simple water rocket simulation example.</p> Source code in <code>analysis/use_parameter_explorer_multiple_Parameters.py</code> <pre><code>def main():\n    \"\"\"Run a simple water rocket simulation example.\"\"\"\n\n    print(\"=== Water Rocket Simulation Example ===\\n\")\n\n    # Method 1: Create a rocket using the builder pattern\n    print(\"1. Creating rocket using builder pattern...\")\n    # Basic usage example\n    explorer = ParameterExplorer()\n    base_rocket = create_standard_rocket()\n\n    # Define parameters to explore\n    parameters = [\"empty_mass\", \"water_fraction\", \"nozzle_diameter\"]\n\n    # Extract base parameters\n    base_params = explorer.extract_base_parameters(base_rocket)\n    print(\"\\n2. Base parameters:\")\n    for name, value in base_params.items():\n        print(f\"   {name}: {value}\")\n\n    # Run exploration\n    results = explorer.explore_multiple_parameters(\n        base_rocket,\n        explorer.create_parameter_configs(base_params, parameters),\n        target=\"apogee\",\n    )\n\n    # Visualize and analyze\n    results[0]\n    explorer.print_sensitivity_analysis(results)    \n    explorer.plot_results(results)\n    print(\"\\n3. Exploration completed successfully!\")\n</code></pre>"},{"location":"api/examples/analysis/use_parameter_explorer_simple/","title":"examples.analysis.use_parameter_explorer_simple","text":"<p>Simple example demonstrating water rocket parameter exploration.</p> <p>This script shows how to: 1. Create a base rocket configuration 2. Set up parameter exploration ranges 3. Run multi-parameter analysis 4. Visualize results with 2D plots and sensitivity analysis 5. Compare different target metrics</p> <p>Run this from the root of your waterrocketpy package directory.</p>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/","title":"examples.optimization.use_water_rocket_optimizer","text":"<p>Test script for water rocket optimization.</p> <p>This script tests the water rocket optimization module with different scenarios.</p>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.compare_targets","title":"<code>compare_targets()</code>","text":"<p>Test 5: Compare optimization for different targets with same bounds.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def compare_targets():\n    \"\"\"Test 5: Compare optimization for different targets with same bounds.\"\"\"\n    print(\"\\n\\nTEST 5: Comparing different optimization targets\")\n\n    # Use the same bounds and settings for fair comparison\n    common_bounds = [\n        (0.1, 0.8),  # L_body: 22-28 cm\n        (0.05, 0.1),  # d_body: 8.6-9.0 cm\n        (7, 12),  # p_max_bar: 7.5-8.5 bar\n        (0.001, 0.05),  # nozzle_diameter: 9-11 mm\n        (0.2, 0.5),  # water_fraction: 28-35%\n    ]\n\n    common_settings = {\n        \"method\": \"differential_evolution\",\n        \"maxiter\": 40,\n        \"popsize\": 8,\n        \"seed\": 789,\n    }\n\n    results = {}\n\n    print(\"Optimizing for altitude...\")\n    results[\"altitude\"] = optimize_for_altitude(\n        bounds=common_bounds, **common_settings\n    )\n\n    print(\"Optimizing for velocity...\")\n    results[\"velocity\"] = optimize_for_velocity(\n        bounds=common_bounds, **common_settings\n    )\n\n    print(\"Optimizing for flight time...\")\n    results[\"flight_time\"] = optimize_for_flight_time(\n        bounds=common_bounds, **common_settings\n    )\n\n    # Print comparison\n    print(f\"\\n{'='*80}\")\n    print(\"COMPARISON OF DIFFERENT TARGETS\")\n    print(f\"{'='*80}\")\n\n    print(\n        f\"{'Target':&lt;12} {'Best Value':&lt;12} {'L_body(cm)':&lt;10} {'d_body(cm)':&lt;10} \"\n        f\"{'P(bar)':&lt;8} {'Nozzle(mm)':&lt;10} {'Water%':&lt;8}\"\n    )\n    print(\"-\" * 80)\n\n    for target, result in results.items():\n        params = result[\"best_params\"]\n        print(\n            f\"{target:&lt;12} {result['best_value']:&lt;12.4f} \"\n            f\"{params['L_body']*100:&lt;10.2f} {params['d_body']*100:&lt;10.2f} \"\n            f\"{params['p_max_bar']:&lt;8.2f} {params['nozzle_diameter']*1000:&lt;10.2f} \"\n            f\"{params['water_fraction']*100:&lt;8.1f}\"\n        )\n\n    return results\n</code></pre>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.main","title":"<code>main()</code>","text":"<p>Run all tests.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def main():\n    \"\"\"Run all tests.\"\"\"\n    print(\"Water Rocket Optimization Test Suite\")\n    print(\"=\" * 60)\n\n    try:\n        # Run individual tests\n        #test1_result = test_quick_altitude_optimization()\n        test2_result = test_custom_bounds_velocity()\n        #test3_result = test_minimize_method()\n        test4_result = test_custom_optimizer_settings()\n\n        # Comparison test\n        #comparison_results = compare_targets()\n\n        # Summary\n        print(f\"\\n{'='*60}\")\n        print(\"TEST SUITE COMPLETED SUCCESSFULLY\")\n        print(f\"{'='*60}\")\n        print(\n            \"All tests passed! The optimization module is working correctly.\"\n        )\n        print(\"\\nTo use the optimizer in your own code, you can:\")\n        print(\n            \"1. Use the convenience functions: optimize_for_altitude(), etc.\"\n        )\n        print(\"2. Create a WaterRocketOptimizer instance for custom settings\")\n        print(\"3. Adjust bounds and optimizer parameters as needed\")\n\n    except Exception as e:\n        print(f\"\\nERROR: Test failed with exception: {e}\")\n        print(\n            \"Please check that all dependencies are installed and paths are correct.\"\n        )\n        raise\n</code></pre>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.print_results","title":"<code>print_results(result, test_name)</code>","text":"<p>Print optimization results in a nice format.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def print_results(result: Dict[str, Any], test_name: str):\n    \"\"\"Print optimization results in a nice format.\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"RESULTS FOR: {test_name}\")\n    print(f\"{'='*60}\")\n    print(f\"Success: {result['success']}\")\n    print(f\"Target: {result['target']}\")\n    print(f\"Best value: {result['best_value']:.6f}\")\n    print(f\"Evaluations: {result['n_evaluations']}\")\n\n    print(\"\\nOptimal Parameters:\")\n    for param, value in result[\"best_params\"].items():\n        if param == \"p_max_bar\":\n            print(f\"  {param:20}: {value:8.2f} bar\")\n        elif param in [\"L_body\", \"d_body\"]:\n            print(f\"  {param:20}: {value:8.4f} m ({value*100:6.2f} cm)\")\n        elif param == \"nozzle_diameter\":\n            print(f\"  {param:20}: {value:8.4f} m ({value*1000:6.2f} mm)\")\n        elif param == \"water_fraction\":\n            print(f\"  {param:20}: {value:8.4f} ({value*100:6.2f}%)\")\n        else:\n            print(f\"  {param:20}: {value:8.4f}\")\n\n    if result[\"best_flight_data\"] is not None:\n        fd = result[\"best_flight_data\"]\n        print(\"\\nFlight Performance:\")\n        print(f\"  Max Altitude        : {fd.max_altitude:8.4f} m\")\n        print(f\"  Max Velocity        : {fd.max_velocity:8.4f} m/s\")\n        print(f\"  Flight Time         : {fd.flight_time:8.4f} s\")\n        print(f\"  Water Depletion Time: {fd.water_depletion_time:8.4f} s\")\n</code></pre>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.test_custom_bounds_velocity","title":"<code>test_custom_bounds_velocity()</code>","text":"<p>Test 2: Velocity optimization with custom bounds.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def test_custom_bounds_velocity():\n    \"\"\"Test 2: Velocity optimization with custom bounds.\"\"\"\n    print(\"\\n\\nTEST 2: Velocity optimization with custom bounds\")\n\n    # Define tighter bounds around typical values\n    custom_bounds = [\n        (0.20, 0.30),  # L_body: 20-30 cm\n        (0.085, 0.095),  # d_body: 8.5-9.5 cm (around 2L bottle)\n        (7.0, 9.0),  # p_max_bar: 7-9 bar\n        (0.009, 0.012),  # nozzle_diameter: 9-12 mm\n        (0.25, 0.40),  # water_fraction: 25-40%\n    ]\n\n    start_time = time.time()\n\n    result = optimize_for_velocity(\n        bounds=custom_bounds,\n        method=\"differential_evolution\",\n        maxiter=25,\n        popsize=10,\n        seed=123,\n    )\n\n    elapsed_time = time.time() - start_time\n    print(f\"Optimization completed in {elapsed_time:.2f} seconds\")\n\n    print_results(result, \"Custom Bounds Velocity Optimization\")\n    return result\n</code></pre>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.test_custom_optimizer_settings","title":"<code>test_custom_optimizer_settings()</code>","text":"<p>Test 4: Advanced usage with custom optimizer instance.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def test_custom_optimizer_settings():\n    \"\"\"Test 4: Advanced usage with custom optimizer instance.\"\"\"\n    print(\"\\n\\nTEST 4: Advanced optimization with custom settings\")\n\n    # Create optimizer with custom simulation settings\n    optimizer = WaterRocketOptimizer(\n        L_cone=0.08,  # Fixed nose cone length\n        material_name=\"PET\",  # Fixed material\n        simulation_settings={\n            \"max_time\": 40,  # Longer simulation\n            \"time_step\": 0.01,  # precision\n            \"solver\": \"RK45\",\n        },\n    )\n\n    # Use default bounds but modify them slightly\n    bounds = optimizer.get_default_bounds()\n    bounds[2] = (5.0, 11.0)  # Wider pressure range: 5-11 bar\n\n    start_time = time.time()\n\n    result = optimizer.optimize(\n        bounds=bounds,\n        target=\"max_altitude\",\n        method=\"differential_evolution\",\n        maxiter=30,\n        popsize=12,\n        atol=1e-6,  # Higher accuracy\n        seed=456,\n    )\n\n    elapsed_time = time.time() - start_time\n    print(f\"Optimization completed in {elapsed_time:.2f} seconds\")\n\n    print_results(result, \"Advanced Custom Settings\")\n    optimizer.plot_optimization_history()\n    return result\n</code></pre>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.test_minimize_method","title":"<code>test_minimize_method()</code>","text":"<p>Test 3: Flight time optimization using minimize method.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def test_minimize_method():\n    \"\"\"Test 3: Flight time optimization using minimize method.\"\"\"\n    print(\"\\n\\nTEST 3: Flight time optimization using minimize method\")\n\n    # Starting point based on your original example\n    initial_guess = [0.25, 0.088, 8.0, 0.01, 0.3]\n\n    start_time = time.time()\n\n    result = optimize_for_flight_time(\n        method=\"minimize\",\n        x0=initial_guess,\n        options={\"maxiter\": 50, \"disp\": True},\n    )\n\n    elapsed_time = time.time() - start_time\n    print(f\"Optimization completed in {elapsed_time:.2f} seconds\")\n\n    print_results(result, \"Flight Time Optimization (Minimize)\")\n    return result\n</code></pre>"},{"location":"api/examples/optimization/use_water_rocket_optimizer/#examples.optimization.use_water_rocket_optimizer.test_quick_altitude_optimization","title":"<code>test_quick_altitude_optimization()</code>","text":"<p>Test 1: Quick altitude optimization with small population.</p> Source code in <code>optimization/use_water_rocket_optimizer.py</code> <pre><code>def test_quick_altitude_optimization():\n    \"\"\"Test 1: Quick altitude optimization with small population.\"\"\"\n    print(\"TEST 1: Quick altitude optimization (small population for speed)\")\n\n    start_time = time.time()\n\n    result = optimize_for_altitude(\n        method=\"differential_evolution\",\n        maxiter=10,  # Small number for quick test\n        popsize=8,  # Small population\n        seed=42,  # For reproducible results\n    )\n\n    elapsed_time = time.time() - start_time\n    print(f\"Optimization completed in {elapsed_time:.2f} seconds\")\n\n    print_results(result, \"Quick Altitude Optimization\")\n    return result\n</code></pre>"},{"location":"api/examples/visualization/use_plot_flight_data/","title":"examples.visualization.use_plot_flight_data","text":"<p>Comprehensive flight data visualization script for water rocket simulation. Creates multiple organized plots showing all aspects of the rocket's flight performance.</p>"},{"location":"api/examples/visualization/use_plot_flight_data/#examples.visualization.use_plot_flight_data.main","title":"<code>main()</code>","text":"<p>Main function to run simulation and create all plots.</p> Source code in <code>visualization/use_plot_flight_data.py</code> <pre><code>def main():\n    \"\"\"Main function to run simulation and create all plots.\"\"\"\n    print(\"Water Rocket Flight Data Visualization\")\n    print(\"=\" * 50)\n\n    # Setup plotting style\n    setup_plot_style()\n\n    try:\n        # Create and run simulation\n        print(\"1. Creating standard rocket...\")\n        rocket = create_standard_rocket()\n        print(f\"   \u2713 Rocket created: {rocket.name}\")\n\n        print(\"2. Setting up simulation...\")\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        simulator = WaterRocketSimulator()\n        sim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\n        print(\"3. Running simulation...\")\n        flight_data = simulator.simulate(sim_params, sim_settings)\n        print(f\"   \u2713 Simulation completed! {len(flight_data.time)} data points generated\")\n\n        # Identify flight phases\n        print(\"4. Analyzing flight phases...\")\n        phases = identify_flight_phases(flight_data)\n\n        # Print summary\n        print_flight_summary(flight_data, phases)\n\n        # Create all plots\n        print(\"5. Generating plots...\")\n\n        figs = []\n\n        print(\"   - Trajectory and velocity plots...\")\n        figs.append(plot_trajectory_and_velocity(flight_data, phases))\n\n        print(\"   - Forces and acceleration plots...\")\n        figs.append(plot_forces_and_acceleration(flight_data, phases))\n\n        print(\"   - Propellant and pressure plots...\")\n        figs.append(plot_propellant_and_pressure(flight_data, phases))\n\n        print(\"   - Exhaust properties plots...\")\n        figs.append(plot_exhaust_properties(flight_data, phases))\n\n        print(\"   - Air exit conditions plots...\")\n        figs.append(plot_air_exit_conditions(flight_data, phases))\n\n        # Show all plots\n        print(\"6. Displaying plots...\")\n        plt.show()\n\n        print(\"\u2713 All plots generated successfully!\")\n\n    except Exception as e:\n        print(f\"\u2717 Error: {e}\")\n        import traceback\n        traceback.print_exc()\n</code></pre>"},{"location":"api/examples/visualization/use_plot_flight_data_save/","title":"examples.visualization.use_plot_flight_data_save","text":"<p>Comprehensive flight data visualization script for water rocket simulation. Creates multiple organized plots showing all aspects of the rocket's flight performance.</p>"},{"location":"api/examples/visualization/use_plot_flight_data_save/#examples.visualization.use_plot_flight_data_save.get_next_run_directory","title":"<code>get_next_run_directory(base_dir='Plots', prefix='run_')</code>","text":"<p>Finds the next available indexed run directory like run_001, run_002, etc.</p> Source code in <code>visualization/use_plot_flight_data_save.py</code> <pre><code>def get_next_run_directory(base_dir=\"Plots\", prefix=\"run_\"):\n    \"\"\"Finds the next available indexed run directory like run_001, run_002, etc.\"\"\"\n    os.makedirs(base_dir, exist_ok=True)\n    existing = [d for d in os.listdir(base_dir) if d.startswith(prefix) and d[len(prefix):].isdigit()]\n    indices = [int(d[len(prefix):]) for d in existing]\n    next_index = max(indices, default=0) + 1\n    run_dir = os.path.join(base_dir, f\"{prefix}{next_index:03d}\")\n    os.makedirs(run_dir)\n    return run_dir\n</code></pre>"},{"location":"api/examples/visualization/use_plot_flight_data_save/#examples.visualization.use_plot_flight_data_save.main","title":"<code>main()</code>","text":"<p>Main function to run simulation and create all plots.</p> Source code in <code>visualization/use_plot_flight_data_save.py</code> <pre><code>def main():\n    \"\"\"Main function to run simulation and create all plots.\"\"\"\n    print(\"Water Rocket Flight Data Visualization\")\n    print(\"=\" * 50)\n\n    # Setup plotting style\n    setup_plot_style()\n\n    # Prepare output folder\n    output_dir = get_next_run_directory()\n    print(f\"\u2713 Output directory created: {output_dir}\")\n\n    try:\n        # Create and run simulation\n        print(\"1. Creating standard rocket...\")\n        rocket = create_standard_IPT_rocket()\n        print(f\"   \u2713 Rocket created: {rocket.name}\")\n\n        print(\"2. Setting up simulation...\")\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        simulator = WaterRocketSimulator()\n        sim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\n        print(\"3. Running simulation...\")\n        flight_data = simulator.simulate(sim_params, sim_settings)\n        print(f\"   \u2713 Simulation completed! {len(flight_data.time)} data points generated\")\n\n        # Identify flight phases\n        print(\"4. Analyzing flight phases...\")\n        phases = identify_flight_phases(flight_data)\n\n        # Print summary to terminal\n        print_flight_summary(flight_data, phases)\n\n        # Save simulation parameters to file\n        params_file = os.path.join(output_dir, \"simulation_parameters.txt\")\n        with open(params_file, \"w\") as f:\n            f.write(\"=== Rocket Parameters ===\\n\")\n            for key, value in rocket.__dict__.items():\n                f.write(f\"{key}: {value}\\n\")\n\n            f.write(\"\\n=== Simulation Settings ===\\n\")\n            for key, value in sim_settings.items():\n                f.write(f\"{key}: {value}\\n\")\n\n        print(f\"   \u2713 Simulation parameters saved to {params_file}\")\n\n        # Generate and save plots\n        print(\"5. Generating and saving plots...\")\n        plot_funcs = [\n            (\"trajectory_and_velocity\", plot_trajectory_and_velocity),\n            (\"forces_and_acceleration\", plot_forces_and_acceleration),\n            (\"propellant_and_pressure\", plot_propellant_and_pressure),\n            (\"exhaust_properties\", plot_exhaust_properties),\n            (\"air_exit_conditions\", plot_air_exit_conditions),\n        ]\n\n        for name, func in plot_funcs:\n            print(f\"   - Plotting {name.replace('_', ' ')}...\")\n            fig = func(flight_data, phases)\n            fig_path = os.path.join(output_dir, f\"{name}.png\")\n            fig.savefig(fig_path, dpi=300, bbox_inches=\"tight\")\n            print(f\"     \u2713 Saved to {fig_path}\")\n\n        print(\"\u2713 All plots generated and saved successfully!\")\n\n    except Exception as e:\n        print(f\"\u2717 Error: {e}\")\n        import traceback\n        traceback.print_exc()\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/","title":"waterrocketpy.optimization.water_rocket_optimizer","text":"<p>Water Rocket Parameter Optimization using SciPy</p> <p>This module provides optimization capabilities for water rocket simulations, allowing you to find optimal parameters for maximum altitude, velocity, or flight time.</p>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer","title":"<code> WaterRocketOptimizer        </code>","text":"<p>Optimizer for water rocket parameters using SciPy optimization algorithms.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>class WaterRocketOptimizer:\n    \"\"\"\n    Optimizer for water rocket parameters using SciPy optimization algorithms.\n    \"\"\"\n\n    def __init__(\n        self,\n        L_cone: float = 0.08,\n        material_name: str = \"PET\",\n        simulation_settings: Optional[Dict] = None,\n    ):\n        \"\"\"\n        Initialize the optimizer with fixed parameters.\n\n        Args:\n            L_cone: Nose cone length (fixed parameter)\n            material_name: Material name (fixed parameter)\n            simulation_settings: Simulation configuration\n        \"\"\"\n        self.L_cone = L_cone\n        self.material_name = material_name\n\n        # Default simulation settings\n        self.simulation_settings = simulation_settings or {\n            \"max_time\": 20,\n            \"time_step\": 0.01,\n            \"solver\": \"RK45\",\n        }\n\n        # Create simulator instance\n        self.simulator = WaterRocketSimulator(verbose=False)\n\n        # Cache for avoiding repeated identical simulations\n        self._simulation_cache = {}\n\n        # Optimization statistics\n        self.n_evaluations = 0\n        self.best_result = None\n        self.optimization_history = []\n\n    def objective_function(\n        self, params: np.ndarray, target: str = \"max_altitude\"\n    ) -&gt; float:\n        \"\"\"\n        Objective function for optimization.\n\n        Args:\n            params: Array of parameters [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n            target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n\n        Returns:\n            Negative value of the target metric (for minimization)\n        \"\"\"\n        L_body, d_body, p_max_bar, nozzle_diameter, water_fraction = params\n\n        # Convert pressure from bar to Pa\n        p_max = p_max_bar * ATMOSPHERIC_PRESSURE\n\n        # Create cache key\n        cache_key = tuple(np.round(params, 8))\n\n        if cache_key in self._simulation_cache:\n            flight_data = self._simulation_cache[cache_key]\n        else:\n            try:\n                # Build rocket configuration\n                builder = RocketBuilder()\n                config = (\n                    builder.build_from_dimensions(\n                        L_body=L_body,\n                        L_cone=self.L_cone,\n                        d_body=d_body,\n                        p_max=p_max,\n                        nozzle_diameter=nozzle_diameter,\n                        material_name=self.material_name,\n                        water_fraction=water_fraction,\n                    )\n                    .set_metadata(\n                        name=\"Optimization Rocket\",\n                        description=\"Rocket being optimized\",\n                    )\n                    .build()\n                )\n\n                # Convert to simulation parameters\n                builder_from_config = RocketBuilder.from_dict(config.__dict__)\n                sim_params = builder_from_config.to_simulation_params()\n\n                # Run simulation\n                flight_data = self.simulator.simulate(\n                    sim_params, self.simulation_settings\n                )\n\n                # Cache the result\n                self._simulation_cache[cache_key] = flight_data\n\n            except Exception as e:\n                # Return a large penalty for invalid configurations\n                warnings.warn(\n                    f\"Simulation failed with parameters {params}: {e}\"\n                )\n                return 1e6\n\n        self.n_evaluations += 1\n\n        # Extract target metric\n        if target == \"max_altitude\":\n            result = flight_data.max_altitude\n        elif target == \"max_velocity\":\n            result = flight_data.max_velocity\n        elif target == \"flight_time\":\n            result = flight_data.flight_time\n        else:\n            raise ValueError(f\"Unknown target: {target}\")\n\n        # Store optimization history\n        self.optimization_history.append(\n            {\n                \"evaluation\": self.n_evaluations,\n                \"params\": params.copy(),\n                \"result\": result,\n                \"target\": target,\n            }\n        )\n\n        # Update best result\n        if self.best_result is None or result &gt; self.best_result[\"result\"]:\n            self.best_result = {\n                \"params\": params.copy(),\n                \"result\": result,\n                \"target\": target,\n                \"flight_data\": flight_data,\n            }\n            print(\n                f\"New best {target}: {result:.4f} at evaluation {self.n_evaluations}\"\n            )\n            print(\n                f\"  Params: L_body={params[0]:.3f}, d_body={params[1]:.3f}, \"\n                f\"p_max={params[2]:.1f}bar, nozzle_d={params[3]:.4f}, \"\n                f\"water_frac={params[4]:.3f}\"\n            )\n\n        # Return negative for minimization\n        return -result\n\n    def optimize(\n        self,\n        bounds: List[Tuple[float, float]],\n        target: str = \"max_altitude\",\n        method: str = \"differential_evolution\",\n        **optimizer_kwargs,\n    ) -&gt; Dict:\n        \"\"\"\n        Optimize rocket parameters.\n\n        Args:\n            bounds: List of (min, max) tuples for each parameter\n                   [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n            target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n            method: Optimization method ('differential_evolution' or 'minimize')\n            **optimizer_kwargs: Additional arguments passed to the optimizer\n\n        Returns:\n            Optimization result dictionary\n        \"\"\"\n        print(f\"Starting optimization for {target} using {method}\")\n        print(f\"Parameter bounds: {bounds}\")\n\n        # Reset optimization statistics\n        self.n_evaluations = 0\n        self.best_result = None\n        self.optimization_history = []\n        self._simulation_cache = {}\n\n        # Define objective function with fixed target\n        def obj_func(params):\n            return self.objective_function(params, target)\n\n        # Set default optimizer parameters\n        if method == \"differential_evolution\":\n            default_kwargs = {\n                \"maxiter\": 100,\n                \"popsize\": 15,\n                \"seed\": 42,\n                \"disp\": True,\n            }\n            default_kwargs.update(optimizer_kwargs)\n\n            result = differential_evolution(obj_func, bounds, **default_kwargs)\n\n        elif method == \"minimize\":\n            # For minimize, we need an initial guess\n            x0 = optimizer_kwargs.pop(\"x0\", None)\n            if x0 is None:\n                # Create initial guess from middle of bounds\n                x0 = [(b[0] + b[1]) / 2 for b in bounds]\n\n            default_kwargs = {\n                \"method\": \"L-BFGS-B\",\n                \"options\": {\"disp\": True, \"maxiter\": 100},\n            }\n            default_kwargs.update(optimizer_kwargs)\n\n            result = minimize(obj_func, x0, bounds=bounds, **default_kwargs)\n        else:\n            raise ValueError(f\"Unknown optimization method: {method}\")\n\n        # Prepare result dictionary\n        optimization_result = {\n            \"success\": result.success,\n            \"message\": result.message,\n            \"n_evaluations\": self.n_evaluations,\n            \"best_params\": {\n                \"L_body\": result.x[0],\n                \"d_body\": result.x[1],\n                \"p_max_bar\": result.x[2],\n                \"nozzle_diameter\": result.x[3],\n                \"water_fraction\": result.x[4],\n            },\n            \"best_value\": -result.fun,\n            \"target\": target,\n            \"scipy_result\": result,\n            \"best_flight_data\": (\n                self.best_result[\"flight_data\"] if self.best_result else None\n            ),\n        }\n\n        print(f\"\\nOptimization completed!\")\n        print(f\"Best {target}: {optimization_result['best_value']:.4f}\")\n        print(f\"Best parameters:\")\n        for param, value in optimization_result[\"best_params\"].items():\n            print(f\"  {param}: {value:.4f}\")\n\n        return optimization_result\n\n    def get_default_bounds(self) -&gt; List[Tuple[float, float]]:\n        \"\"\"\n        Get reasonable default bounds for optimization parameters.\n\n        Returns:\n            List of (min, max) bounds for [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n        \"\"\"\n        return [\n            (0.1, 0.5),  # L_body: 10-50 cm\n            (0.05, 0.12),  # d_body: 5-12 cm diameter\n            (2.0, 12.0),  # p_max_bar: 2-12 bar\n            (0.005, 0.025),  # nozzle_diameter: 5-25 mm\n            (0.1, 0.8),  # water_fraction: 10-80%\n        ]\n\n    def plot_optimization_history(self):\n        \"\"\"\n        Plot the objective value and parameters over evaluation steps.\n        \"\"\"\n        if not self.optimization_history:\n            print(\"No optimization history to plot.\")\n            return\n\n        evaluations = [entry[\"evaluation\"] for entry in self.optimization_history]\n        results = [entry[\"result\"] for entry in self.optimization_history]\n        param_names = [\"L_body\", \"d_body\", \"p_max_bar\", \"nozzle_diameter\", \"water_fraction\"]\n        params_over_time = list(zip(*[entry[\"params\"] for entry in self.optimization_history]))\n\n        # Plot objective value over time\n        plt.figure(figsize=(10, 6))\n        plt.plot(evaluations, results, label=\"Objective Value\")\n        plt.xlabel(\"Evaluation\")\n        plt.ylabel(f\"{self.optimization_history[0]['target'].replace('_', ' ').title()}\")\n        plt.title(\"Optimization Progress\")\n        plt.grid(True)\n        plt.legend()\n        plt.tight_layout()\n        plt.show()\n\n        # Plot parameters over time\n        plt.figure(figsize=(12, 8))\n        for i, param_values in enumerate(params_over_time):\n            plt.plot(evaluations, param_values, label=param_names[i])\n        plt.xlabel(\"Evaluation\")\n        plt.ylabel(\"Parameter Value\")\n        plt.title(\"Parameter Evolution During Optimization\")\n        plt.grid(True)\n        plt.legend()\n        plt.tight_layout()\n        plt.show()\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.__init__","title":"<code>__init__(self, L_cone=0.08, material_name='PET', simulation_settings=None)</code>  <code>special</code>","text":"<p>Initialize the optimizer with fixed parameters.</p> <p>Parameters:</p> Name Type Description Default <code>L_cone</code> <code>float</code> <p>Nose cone length (fixed parameter)</p> <code>0.08</code> <code>material_name</code> <code>str</code> <p>Material name (fixed parameter)</p> <code>'PET'</code> <code>simulation_settings</code> <code>Optional[Dict]</code> <p>Simulation configuration</p> <code>None</code> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def __init__(\n    self,\n    L_cone: float = 0.08,\n    material_name: str = \"PET\",\n    simulation_settings: Optional[Dict] = None,\n):\n    \"\"\"\n    Initialize the optimizer with fixed parameters.\n\n    Args:\n        L_cone: Nose cone length (fixed parameter)\n        material_name: Material name (fixed parameter)\n        simulation_settings: Simulation configuration\n    \"\"\"\n    self.L_cone = L_cone\n    self.material_name = material_name\n\n    # Default simulation settings\n    self.simulation_settings = simulation_settings or {\n        \"max_time\": 20,\n        \"time_step\": 0.01,\n        \"solver\": \"RK45\",\n    }\n\n    # Create simulator instance\n    self.simulator = WaterRocketSimulator(verbose=False)\n\n    # Cache for avoiding repeated identical simulations\n    self._simulation_cache = {}\n\n    # Optimization statistics\n    self.n_evaluations = 0\n    self.best_result = None\n    self.optimization_history = []\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.get_default_bounds","title":"<code>get_default_bounds(self)</code>","text":"<p>Get reasonable default bounds for optimization parameters.</p> <p>Returns:</p> Type Description <code>List[Tuple[float, float]]</code> <p>List of (min, max) bounds for [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def get_default_bounds(self) -&gt; List[Tuple[float, float]]:\n    \"\"\"\n    Get reasonable default bounds for optimization parameters.\n\n    Returns:\n        List of (min, max) bounds for [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n    \"\"\"\n    return [\n        (0.1, 0.5),  # L_body: 10-50 cm\n        (0.05, 0.12),  # d_body: 5-12 cm diameter\n        (2.0, 12.0),  # p_max_bar: 2-12 bar\n        (0.005, 0.025),  # nozzle_diameter: 5-25 mm\n        (0.1, 0.8),  # water_fraction: 10-80%\n    ]\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.objective_function","title":"<code>objective_function(self, params, target='max_altitude')</code>","text":"<p>Objective function for optimization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>ndarray</code> <p>Array of parameters [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]</p> required <code>target</code> <code>str</code> <p>Optimization target ('max_altitude', 'max_velocity', 'flight_time')</p> <code>'max_altitude'</code> <p>Returns:</p> Type Description <code>float</code> <p>Negative value of the target metric (for minimization)</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def objective_function(\n    self, params: np.ndarray, target: str = \"max_altitude\"\n) -&gt; float:\n    \"\"\"\n    Objective function for optimization.\n\n    Args:\n        params: Array of parameters [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n        target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n\n    Returns:\n        Negative value of the target metric (for minimization)\n    \"\"\"\n    L_body, d_body, p_max_bar, nozzle_diameter, water_fraction = params\n\n    # Convert pressure from bar to Pa\n    p_max = p_max_bar * ATMOSPHERIC_PRESSURE\n\n    # Create cache key\n    cache_key = tuple(np.round(params, 8))\n\n    if cache_key in self._simulation_cache:\n        flight_data = self._simulation_cache[cache_key]\n    else:\n        try:\n            # Build rocket configuration\n            builder = RocketBuilder()\n            config = (\n                builder.build_from_dimensions(\n                    L_body=L_body,\n                    L_cone=self.L_cone,\n                    d_body=d_body,\n                    p_max=p_max,\n                    nozzle_diameter=nozzle_diameter,\n                    material_name=self.material_name,\n                    water_fraction=water_fraction,\n                )\n                .set_metadata(\n                    name=\"Optimization Rocket\",\n                    description=\"Rocket being optimized\",\n                )\n                .build()\n            )\n\n            # Convert to simulation parameters\n            builder_from_config = RocketBuilder.from_dict(config.__dict__)\n            sim_params = builder_from_config.to_simulation_params()\n\n            # Run simulation\n            flight_data = self.simulator.simulate(\n                sim_params, self.simulation_settings\n            )\n\n            # Cache the result\n            self._simulation_cache[cache_key] = flight_data\n\n        except Exception as e:\n            # Return a large penalty for invalid configurations\n            warnings.warn(\n                f\"Simulation failed with parameters {params}: {e}\"\n            )\n            return 1e6\n\n    self.n_evaluations += 1\n\n    # Extract target metric\n    if target == \"max_altitude\":\n        result = flight_data.max_altitude\n    elif target == \"max_velocity\":\n        result = flight_data.max_velocity\n    elif target == \"flight_time\":\n        result = flight_data.flight_time\n    else:\n        raise ValueError(f\"Unknown target: {target}\")\n\n    # Store optimization history\n    self.optimization_history.append(\n        {\n            \"evaluation\": self.n_evaluations,\n            \"params\": params.copy(),\n            \"result\": result,\n            \"target\": target,\n        }\n    )\n\n    # Update best result\n    if self.best_result is None or result &gt; self.best_result[\"result\"]:\n        self.best_result = {\n            \"params\": params.copy(),\n            \"result\": result,\n            \"target\": target,\n            \"flight_data\": flight_data,\n        }\n        print(\n            f\"New best {target}: {result:.4f} at evaluation {self.n_evaluations}\"\n        )\n        print(\n            f\"  Params: L_body={params[0]:.3f}, d_body={params[1]:.3f}, \"\n            f\"p_max={params[2]:.1f}bar, nozzle_d={params[3]:.4f}, \"\n            f\"water_frac={params[4]:.3f}\"\n        )\n\n    # Return negative for minimization\n    return -result\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.optimize","title":"<code>optimize(self, bounds, target='max_altitude', method='differential_evolution', **optimizer_kwargs)</code>","text":"<p>Optimize rocket parameters.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>List[Tuple[float, float]]</code> <p>List of (min, max) tuples for each parameter    [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]</p> required <code>target</code> <code>str</code> <p>Optimization target ('max_altitude', 'max_velocity', 'flight_time')</p> <code>'max_altitude'</code> <code>method</code> <code>str</code> <p>Optimization method ('differential_evolution' or 'minimize')</p> <code>'differential_evolution'</code> <code>**optimizer_kwargs</code> <p>Additional arguments passed to the optimizer</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>Optimization result dictionary</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize(\n    self,\n    bounds: List[Tuple[float, float]],\n    target: str = \"max_altitude\",\n    method: str = \"differential_evolution\",\n    **optimizer_kwargs,\n) -&gt; Dict:\n    \"\"\"\n    Optimize rocket parameters.\n\n    Args:\n        bounds: List of (min, max) tuples for each parameter\n               [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n        target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n        method: Optimization method ('differential_evolution' or 'minimize')\n        **optimizer_kwargs: Additional arguments passed to the optimizer\n\n    Returns:\n        Optimization result dictionary\n    \"\"\"\n    print(f\"Starting optimization for {target} using {method}\")\n    print(f\"Parameter bounds: {bounds}\")\n\n    # Reset optimization statistics\n    self.n_evaluations = 0\n    self.best_result = None\n    self.optimization_history = []\n    self._simulation_cache = {}\n\n    # Define objective function with fixed target\n    def obj_func(params):\n        return self.objective_function(params, target)\n\n    # Set default optimizer parameters\n    if method == \"differential_evolution\":\n        default_kwargs = {\n            \"maxiter\": 100,\n            \"popsize\": 15,\n            \"seed\": 42,\n            \"disp\": True,\n        }\n        default_kwargs.update(optimizer_kwargs)\n\n        result = differential_evolution(obj_func, bounds, **default_kwargs)\n\n    elif method == \"minimize\":\n        # For minimize, we need an initial guess\n        x0 = optimizer_kwargs.pop(\"x0\", None)\n        if x0 is None:\n            # Create initial guess from middle of bounds\n            x0 = [(b[0] + b[1]) / 2 for b in bounds]\n\n        default_kwargs = {\n            \"method\": \"L-BFGS-B\",\n            \"options\": {\"disp\": True, \"maxiter\": 100},\n        }\n        default_kwargs.update(optimizer_kwargs)\n\n        result = minimize(obj_func, x0, bounds=bounds, **default_kwargs)\n    else:\n        raise ValueError(f\"Unknown optimization method: {method}\")\n\n    # Prepare result dictionary\n    optimization_result = {\n        \"success\": result.success,\n        \"message\": result.message,\n        \"n_evaluations\": self.n_evaluations,\n        \"best_params\": {\n            \"L_body\": result.x[0],\n            \"d_body\": result.x[1],\n            \"p_max_bar\": result.x[2],\n            \"nozzle_diameter\": result.x[3],\n            \"water_fraction\": result.x[4],\n        },\n        \"best_value\": -result.fun,\n        \"target\": target,\n        \"scipy_result\": result,\n        \"best_flight_data\": (\n            self.best_result[\"flight_data\"] if self.best_result else None\n        ),\n    }\n\n    print(f\"\\nOptimization completed!\")\n    print(f\"Best {target}: {optimization_result['best_value']:.4f}\")\n    print(f\"Best parameters:\")\n    for param, value in optimization_result[\"best_params\"].items():\n        print(f\"  {param}: {value:.4f}\")\n\n    return optimization_result\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.plot_optimization_history","title":"<code>plot_optimization_history(self)</code>","text":"<p>Plot the objective value and parameters over evaluation steps.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def plot_optimization_history(self):\n    \"\"\"\n    Plot the objective value and parameters over evaluation steps.\n    \"\"\"\n    if not self.optimization_history:\n        print(\"No optimization history to plot.\")\n        return\n\n    evaluations = [entry[\"evaluation\"] for entry in self.optimization_history]\n    results = [entry[\"result\"] for entry in self.optimization_history]\n    param_names = [\"L_body\", \"d_body\", \"p_max_bar\", \"nozzle_diameter\", \"water_fraction\"]\n    params_over_time = list(zip(*[entry[\"params\"] for entry in self.optimization_history]))\n\n    # Plot objective value over time\n    plt.figure(figsize=(10, 6))\n    plt.plot(evaluations, results, label=\"Objective Value\")\n    plt.xlabel(\"Evaluation\")\n    plt.ylabel(f\"{self.optimization_history[0]['target'].replace('_', ' ').title()}\")\n    plt.title(\"Optimization Progress\")\n    plt.grid(True)\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n\n    # Plot parameters over time\n    plt.figure(figsize=(12, 8))\n    for i, param_values in enumerate(params_over_time):\n        plt.plot(evaluations, param_values, label=param_names[i])\n    plt.xlabel(\"Evaluation\")\n    plt.ylabel(\"Parameter Value\")\n    plt.title(\"Parameter Evolution During Optimization\")\n    plt.grid(True)\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.optimize_for_altitude","title":"<code>optimize_for_altitude(bounds=None, method='differential_evolution', plot_history=False, **kwargs)</code>","text":"<p>Optimize rocket for maximum altitude.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize_for_altitude(\n    bounds: Optional[List[Tuple[float, float]]] = None,\n    method: str = \"differential_evolution\",\n    plot_history: bool = False,\n    **kwargs,\n) -&gt; Dict:\n    \"\"\"Optimize rocket for maximum altitude.\"\"\"\n    optimizer = WaterRocketOptimizer()\n    if bounds is None:\n        bounds = optimizer.get_default_bounds()\n    result = optimizer.optimize(\n        bounds, target=\"max_altitude\", method=method, **kwargs)\n    if plot_history:\n        optimizer.plot_optimization_history()\n    return result\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.optimize_for_flight_time","title":"<code>optimize_for_flight_time(bounds=None, method='differential_evolution', **kwargs)</code>","text":"<p>Optimize rocket for maximum flight time.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize_for_flight_time(\n    bounds: Optional[List[Tuple[float, float]]] = None,\n    method: str = \"differential_evolution\",\n    **kwargs,\n) -&gt; Dict:\n    \"\"\"Optimize rocket for maximum flight time.\"\"\"\n    optimizer = WaterRocketOptimizer()\n    if bounds is None:\n        bounds = optimizer.get_default_bounds()\n    return optimizer.optimize(\n        bounds, target=\"flight_time\", method=method, **kwargs\n    )\n</code></pre>"},{"location":"api/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.optimize_for_velocity","title":"<code>optimize_for_velocity(bounds=None, method='differential_evolution', **kwargs)</code>","text":"<p>Optimize rocket for maximum velocity.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize_for_velocity(\n    bounds: Optional[List[Tuple[float, float]]] = None,\n    method: str = \"differential_evolution\",\n    **kwargs,\n) -&gt; Dict:\n    \"\"\"Optimize rocket for maximum velocity.\"\"\"\n    optimizer = WaterRocketOptimizer()\n    if bounds is None:\n        bounds = optimizer.get_default_bounds()\n    return optimizer.optimize(\n        bounds, target=\"max_velocity\", method=method, **kwargs\n    )\n</code></pre>"},{"location":"api/rocket/builder/","title":"waterrocketpy.rocket.builder","text":"<p>Rocket builder for creating and managing rocket configurations.</p>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.MaterialProperties","title":"<code> MaterialProperties        </code>  <code>dataclass</code>","text":"<p>Container for material properties.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@dataclass\nclass MaterialProperties:\n    \"\"\"Container for material properties.\"\"\"\n\n    name: str\n    density: float  # kg/m\u00b3\n    yield_strength: float  # Pa\n    ultimate_strength: float  # Pa\n    elastic_modulus: float  # Pa\n    poisson_ratio: float\n    thermal_expansion: float  # 1/K\n    thermal_conductivity: float  # W/(m\u00b7K)\n    specific_heat: float  # J/(kg\u00b7K)\n    max_temperature: float  # K\n    cost_per_kg: float = 0.0  # Optional cost information\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder","title":"<code> RocketBuilder        </code>","text":"<p>Builder class for creating rocket configurations.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>class RocketBuilder:\n    \"\"\"Builder class for creating rocket configurations.\"\"\"\n\n    def __init__(self):\n        self.config = RocketConfiguration()\n        self.validator = ParameterValidator()\n        self.material_db = materials.MaterialDatabase()\n\n    def set_bottle(\n        self, volume: float, diameter: float, length: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set bottle parameters.\"\"\"\n        self.config.bottle_volume = volume\n        self.config.bottle_diameter = diameter\n        if length is not None:\n            self.config.bottle_length = length\n        return self\n\n    def set_nozzle(\n        self, diameter: float, discharge_coefficient: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set nozzle parameters.\"\"\"\n        self.config.nozzle_diameter = diameter\n        if discharge_coefficient is not None:\n            self.config.nozzle_discharge_coefficient = discharge_coefficient\n        return self\n\n    def set_mass(\n        self, empty_mass: float, water_fraction: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set mass parameters.\"\"\"\n        self.config.empty_mass = empty_mass\n        if water_fraction is not None:\n            self.config.water_fraction = water_fraction\n        return self\n\n    def set_aerodynamics(\n        self, drag_coefficient: float, reference_area: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set aerodynamic parameters.\"\"\"\n        self.config.drag_coefficient = drag_coefficient\n        if reference_area is not None:\n            self.config.reference_area = reference_area\n        return self\n\n    def set_initial_conditions(\n        self, pressure: float, temperature: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set initial conditions.\"\"\"\n        self.config.initial_pressure = pressure\n        if temperature is not None:\n            self.config.initial_temperature = temperature\n        return self\n\n    def add_liquid_gas(self, mass: float) -&gt; \"RocketBuilder\":\n        \"\"\"Add liquid gas propellant.\"\"\"\n        self.config.liquid_gas_mass = mass\n        return self\n\n    def set_metadata(\n        self, name: str, description: str = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set rocket metadata.\"\"\"\n        self.config.name = name\n        if description is not None:\n            self.config.description = description\n        return self\n\n    def build_from_dimensions(\n        self,\n        L_body: float,\n        L_cone: float,\n        d_body: float,\n        p_max: float,\n        nozzle_diameter: float,\n        material_name: str = \"PET\",\n        water_fraction: float = DEFAULT_WATER_FRACTION,\n        nozzle_discharge_coefficient: float = DEFAULT_DISCHARGE_COEFFICIENT,\n        liquid_gas_mass: float = 0.0,\n        safety_factor: float = 2.0,\n        cone_wall_thickness: float = 0.002,\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"\n        Build rocket configuration from dimensional parameters.\n\n        Args:\n            L_body: Body length (m)\n            L_cone: Nose cone length (m)\n            d_body: Body diameter (m)\n            p_max: Maximum pressure (Pa)\n            nozzle_diameter: Nozzle diameter (m)\n            material_name: Material name (default: 'PET')\n            water_fraction: Fraction of bottle volume filled with water\n            nozzle_discharge_coefficient: Nozzle discharge coefficient\n            liquid_gas_mass: Mass of liquid gas propellant (kg)\n            safety_factor: Safety factor for wall thickness calculation\n            cone_wall_thickness: Nose cone wall thickness (m)\n\n        Returns:\n            RocketBuilder instance\n        \"\"\"\n        # Get material properties\n        material = self.material_db.get_material(material_name)\n        if not material:\n            raise ValueError(f\"Unknown material: {material_name}\")\n\n        # Calculate wall thickness for body\n        wall_thickness_body = (\n            materials.StructuralAnalysis.calculate_wall_thickness(\n                internal_pressure=p_max,\n                diameter=d_body,\n                material=material,\n                safety_factor=safety_factor,\n            )\n        )\n\n        # Calculate bottle volume (cylindrical approximation)\n        bottle_volume = np.pi * (d_body / 2) ** 2 * L_body\n\n        # Calculate body mass\n        m_body = materials.calculate_bottle_mass(\n            diameter=d_body,\n            length=L_body,\n            wall_thickness=wall_thickness_body,\n            material_name=material_name,\n        )\n\n        # Calculate nose cone surface area\n        A_cone = geometry.RocketGeometry.cone_surface_area(\n            diameter=d_body, height=L_cone\n        )\n\n        # Calculate cone mass\n        cone_volume = A_cone * cone_wall_thickness\n        m_cone = materials.StructuralAnalysis.calculate_mass(\n            cone_volume, material\n        )\n\n        # Calculate total rocket dimensions\n        L_rocket = L_body + L_cone\n\n        # Calculate rocket surface area (wetted area)\n        surface_area_rocket = (\n            geometry.RocketGeometry.calculate_rocket_wetted_area(\n                diameter=d_body,\n                length=L_rocket,\n                nose_cone_height=L_cone,\n                fin_area=0.0,  # Set to 0 as requested\n            )\n        )\n\n        # Calculate Reynolds number and drag coefficient\n        # Using characteristic length = L_rocket\n        Re = 40000 * L_rocket  # Simplified Reynolds number\n\n        # Calculate friction coefficients\n        C_f_laminar = 1.437 * Re ** (-0.5058)\n        C_f_turbulent = 0.03725 * Re ** (-0.1557)\n        C_f = (C_f_laminar + C_f_turbulent) / 2\n\n        # Calculate areas\n        S_bt = np.pi * (d_body / 2) ** 2  # Cross-sectional area\n        S_w = surface_area_rocket  # Wetted surface area\n\n        # Calculate drag coefficient\n        C_drag = (\n            1.02\n            * C_f\n            * (1 + 1.5 / ((L_rocket / d_body) ** (3 / 2)))\n            * S_w\n            / S_bt\n        )\n\n        # Calculate empty mass\n        m_empty = m_cone + m_body\n\n        # Set all calculated parameters\n        self.config.bottle_volume = bottle_volume\n        self.config.bottle_diameter = d_body\n        self.config.bottle_length = L_body\n        self.config.nozzle_diameter = nozzle_diameter\n        self.config.nozzle_discharge_coefficient = nozzle_discharge_coefficient\n        self.config.empty_mass = m_empty\n        self.config.water_fraction = water_fraction\n        self.config.drag_coefficient = C_drag\n        self.config.reference_area = S_bt\n        self.config.initial_pressure = p_max\n        self.config.liquid_gas_mass = liquid_gas_mass\n\n        # Store additional calculated values as metadata\n        self.config.description = (\n            f\"Rocket built from dimensions: L_body={L_body:.3f}m, \"\n            f\"L_cone={L_cone:.3f}m, d_body={d_body:.3f}m, \"\n            f\"p_max={p_max/1000:.0f}kPa, material={material_name}, \"\n            f\"wall_thickness={wall_thickness_body:.4f}m, \"\n            f\"empty_mass={m_empty:.3f}kg, C_drag={C_drag:.3f}\"\n        )\n\n        return self\n\n    def build(self) -&gt; RocketConfiguration:\n        \"\"\"Build and validate the rocket configuration.\"\"\"\n        # Update calculated parameters\n        self.config.__post_init__()\n\n        # Convert to parameter dictionary for validation\n        params = self.to_simulation_params()\n\n        # Validate parameters\n        warnings = self.validator.validate_rocket_parameters(params)\n        if warnings:\n            print(f\"Rocket '{self.config.name}' validation warnings:\")\n            for warning in warnings:\n                print(f\"  - {warning}\")\n\n        return self.config\n\n    def to_simulation_params(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert rocket configuration to simulation parameters.\"\"\"\n        return {\n            \"P0\": self.config.initial_pressure,\n            \"A_nozzle\": self.config.nozzle_area,\n            \"V_bottle\": self.config.bottle_volume,\n            \"water_fraction\": self.config.water_fraction,\n            \"C_d\": self.config.nozzle_discharge_coefficient,\n            \"m_empty\": self.config.empty_mass,\n            \"C_drag\": self.config.drag_coefficient,\n            \"A_rocket\": self.config.reference_area,\n            \"liquid_gas_mass\": self.config.liquid_gas_mass,\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"RocketBuilder\":\n        \"\"\"Create builder from dictionary.\"\"\"\n        builder = cls()\n        builder.config = RocketConfiguration(**data)\n        return builder\n\n    @classmethod\n    def from_json(cls, file_path: str) -&gt; \"RocketBuilder\":\n        \"\"\"Create builder from JSON file.\"\"\"\n        path = Path(file_path)\n        if not path.exists():\n            raise FileNotFoundError(\n                f\"Rocket configuration file not found: {file_path}\"\n            )\n\n        with open(path, \"r\") as f:\n            data = json.load(f)\n\n        return cls.from_dict(data)\n\n    def to_json(self, file_path: str) -&gt; None:\n        \"\"\"Save rocket configuration to JSON file.\"\"\"\n        path = Path(file_path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n\n        with open(path, \"w\") as f:\n            json.dump(asdict(self.config), f, indent=2)\n\n    def reset(self) -&gt; \"RocketBuilder\":\n        \"\"\"Reset builder to default configuration.\"\"\"\n        self.config = RocketConfiguration()\n        return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.add_liquid_gas","title":"<code>add_liquid_gas(self, mass)</code>","text":"<p>Add liquid gas propellant.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def add_liquid_gas(self, mass: float) -&gt; \"RocketBuilder\":\n    \"\"\"Add liquid gas propellant.\"\"\"\n    self.config.liquid_gas_mass = mass\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.build","title":"<code>build(self)</code>","text":"<p>Build and validate the rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def build(self) -&gt; RocketConfiguration:\n    \"\"\"Build and validate the rocket configuration.\"\"\"\n    # Update calculated parameters\n    self.config.__post_init__()\n\n    # Convert to parameter dictionary for validation\n    params = self.to_simulation_params()\n\n    # Validate parameters\n    warnings = self.validator.validate_rocket_parameters(params)\n    if warnings:\n        print(f\"Rocket '{self.config.name}' validation warnings:\")\n        for warning in warnings:\n            print(f\"  - {warning}\")\n\n    return self.config\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.build_from_dimensions","title":"<code>build_from_dimensions(self, L_body, L_cone, d_body, p_max, nozzle_diameter, material_name='PET', water_fraction=0.33, nozzle_discharge_coefficient=0.97, liquid_gas_mass=0.0, safety_factor=2.0, cone_wall_thickness=0.002)</code>","text":"<p>Build rocket configuration from dimensional parameters.</p> <p>Parameters:</p> Name Type Description Default <code>L_body</code> <code>float</code> <p>Body length (m)</p> required <code>L_cone</code> <code>float</code> <p>Nose cone length (m)</p> required <code>d_body</code> <code>float</code> <p>Body diameter (m)</p> required <code>p_max</code> <code>float</code> <p>Maximum pressure (Pa)</p> required <code>nozzle_diameter</code> <code>float</code> <p>Nozzle diameter (m)</p> required <code>material_name</code> <code>str</code> <p>Material name (default: 'PET')</p> <code>'PET'</code> <code>water_fraction</code> <code>float</code> <p>Fraction of bottle volume filled with water</p> <code>0.33</code> <code>nozzle_discharge_coefficient</code> <code>float</code> <p>Nozzle discharge coefficient</p> <code>0.97</code> <code>liquid_gas_mass</code> <code>float</code> <p>Mass of liquid gas propellant (kg)</p> <code>0.0</code> <code>safety_factor</code> <code>float</code> <p>Safety factor for wall thickness calculation</p> <code>2.0</code> <code>cone_wall_thickness</code> <code>float</code> <p>Nose cone wall thickness (m)</p> <code>0.002</code> <p>Returns:</p> Type Description <code>RocketBuilder</code> <p>RocketBuilder instance</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def build_from_dimensions(\n    self,\n    L_body: float,\n    L_cone: float,\n    d_body: float,\n    p_max: float,\n    nozzle_diameter: float,\n    material_name: str = \"PET\",\n    water_fraction: float = DEFAULT_WATER_FRACTION,\n    nozzle_discharge_coefficient: float = DEFAULT_DISCHARGE_COEFFICIENT,\n    liquid_gas_mass: float = 0.0,\n    safety_factor: float = 2.0,\n    cone_wall_thickness: float = 0.002,\n) -&gt; \"RocketBuilder\":\n    \"\"\"\n    Build rocket configuration from dimensional parameters.\n\n    Args:\n        L_body: Body length (m)\n        L_cone: Nose cone length (m)\n        d_body: Body diameter (m)\n        p_max: Maximum pressure (Pa)\n        nozzle_diameter: Nozzle diameter (m)\n        material_name: Material name (default: 'PET')\n        water_fraction: Fraction of bottle volume filled with water\n        nozzle_discharge_coefficient: Nozzle discharge coefficient\n        liquid_gas_mass: Mass of liquid gas propellant (kg)\n        safety_factor: Safety factor for wall thickness calculation\n        cone_wall_thickness: Nose cone wall thickness (m)\n\n    Returns:\n        RocketBuilder instance\n    \"\"\"\n    # Get material properties\n    material = self.material_db.get_material(material_name)\n    if not material:\n        raise ValueError(f\"Unknown material: {material_name}\")\n\n    # Calculate wall thickness for body\n    wall_thickness_body = (\n        materials.StructuralAnalysis.calculate_wall_thickness(\n            internal_pressure=p_max,\n            diameter=d_body,\n            material=material,\n            safety_factor=safety_factor,\n        )\n    )\n\n    # Calculate bottle volume (cylindrical approximation)\n    bottle_volume = np.pi * (d_body / 2) ** 2 * L_body\n\n    # Calculate body mass\n    m_body = materials.calculate_bottle_mass(\n        diameter=d_body,\n        length=L_body,\n        wall_thickness=wall_thickness_body,\n        material_name=material_name,\n    )\n\n    # Calculate nose cone surface area\n    A_cone = geometry.RocketGeometry.cone_surface_area(\n        diameter=d_body, height=L_cone\n    )\n\n    # Calculate cone mass\n    cone_volume = A_cone * cone_wall_thickness\n    m_cone = materials.StructuralAnalysis.calculate_mass(\n        cone_volume, material\n    )\n\n    # Calculate total rocket dimensions\n    L_rocket = L_body + L_cone\n\n    # Calculate rocket surface area (wetted area)\n    surface_area_rocket = (\n        geometry.RocketGeometry.calculate_rocket_wetted_area(\n            diameter=d_body,\n            length=L_rocket,\n            nose_cone_height=L_cone,\n            fin_area=0.0,  # Set to 0 as requested\n        )\n    )\n\n    # Calculate Reynolds number and drag coefficient\n    # Using characteristic length = L_rocket\n    Re = 40000 * L_rocket  # Simplified Reynolds number\n\n    # Calculate friction coefficients\n    C_f_laminar = 1.437 * Re ** (-0.5058)\n    C_f_turbulent = 0.03725 * Re ** (-0.1557)\n    C_f = (C_f_laminar + C_f_turbulent) / 2\n\n    # Calculate areas\n    S_bt = np.pi * (d_body / 2) ** 2  # Cross-sectional area\n    S_w = surface_area_rocket  # Wetted surface area\n\n    # Calculate drag coefficient\n    C_drag = (\n        1.02\n        * C_f\n        * (1 + 1.5 / ((L_rocket / d_body) ** (3 / 2)))\n        * S_w\n        / S_bt\n    )\n\n    # Calculate empty mass\n    m_empty = m_cone + m_body\n\n    # Set all calculated parameters\n    self.config.bottle_volume = bottle_volume\n    self.config.bottle_diameter = d_body\n    self.config.bottle_length = L_body\n    self.config.nozzle_diameter = nozzle_diameter\n    self.config.nozzle_discharge_coefficient = nozzle_discharge_coefficient\n    self.config.empty_mass = m_empty\n    self.config.water_fraction = water_fraction\n    self.config.drag_coefficient = C_drag\n    self.config.reference_area = S_bt\n    self.config.initial_pressure = p_max\n    self.config.liquid_gas_mass = liquid_gas_mass\n\n    # Store additional calculated values as metadata\n    self.config.description = (\n        f\"Rocket built from dimensions: L_body={L_body:.3f}m, \"\n        f\"L_cone={L_cone:.3f}m, d_body={d_body:.3f}m, \"\n        f\"p_max={p_max/1000:.0f}kPa, material={material_name}, \"\n        f\"wall_thickness={wall_thickness_body:.4f}m, \"\n        f\"empty_mass={m_empty:.3f}kg, C_drag={C_drag:.3f}\"\n    )\n\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create builder from dictionary.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: Dict[str, Any]) -&gt; \"RocketBuilder\":\n    \"\"\"Create builder from dictionary.\"\"\"\n    builder = cls()\n    builder.config = RocketConfiguration(**data)\n    return builder\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.from_json","title":"<code>from_json(file_path)</code>  <code>classmethod</code>","text":"<p>Create builder from JSON file.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@classmethod\ndef from_json(cls, file_path: str) -&gt; \"RocketBuilder\":\n    \"\"\"Create builder from JSON file.\"\"\"\n    path = Path(file_path)\n    if not path.exists():\n        raise FileNotFoundError(\n            f\"Rocket configuration file not found: {file_path}\"\n        )\n\n    with open(path, \"r\") as f:\n        data = json.load(f)\n\n    return cls.from_dict(data)\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.reset","title":"<code>reset(self)</code>","text":"<p>Reset builder to default configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def reset(self) -&gt; \"RocketBuilder\":\n    \"\"\"Reset builder to default configuration.\"\"\"\n    self.config = RocketConfiguration()\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_aerodynamics","title":"<code>set_aerodynamics(self, drag_coefficient, reference_area=None)</code>","text":"<p>Set aerodynamic parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_aerodynamics(\n    self, drag_coefficient: float, reference_area: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set aerodynamic parameters.\"\"\"\n    self.config.drag_coefficient = drag_coefficient\n    if reference_area is not None:\n        self.config.reference_area = reference_area\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_bottle","title":"<code>set_bottle(self, volume, diameter, length=None)</code>","text":"<p>Set bottle parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_bottle(\n    self, volume: float, diameter: float, length: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set bottle parameters.\"\"\"\n    self.config.bottle_volume = volume\n    self.config.bottle_diameter = diameter\n    if length is not None:\n        self.config.bottle_length = length\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_initial_conditions","title":"<code>set_initial_conditions(self, pressure, temperature=None)</code>","text":"<p>Set initial conditions.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_initial_conditions(\n    self, pressure: float, temperature: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set initial conditions.\"\"\"\n    self.config.initial_pressure = pressure\n    if temperature is not None:\n        self.config.initial_temperature = temperature\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_mass","title":"<code>set_mass(self, empty_mass, water_fraction=None)</code>","text":"<p>Set mass parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_mass(\n    self, empty_mass: float, water_fraction: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set mass parameters.\"\"\"\n    self.config.empty_mass = empty_mass\n    if water_fraction is not None:\n        self.config.water_fraction = water_fraction\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_metadata","title":"<code>set_metadata(self, name, description=None)</code>","text":"<p>Set rocket metadata.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_metadata(\n    self, name: str, description: str = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set rocket metadata.\"\"\"\n    self.config.name = name\n    if description is not None:\n        self.config.description = description\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_nozzle","title":"<code>set_nozzle(self, diameter, discharge_coefficient=None)</code>","text":"<p>Set nozzle parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_nozzle(\n    self, diameter: float, discharge_coefficient: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set nozzle parameters.\"\"\"\n    self.config.nozzle_diameter = diameter\n    if discharge_coefficient is not None:\n        self.config.nozzle_discharge_coefficient = discharge_coefficient\n    return self\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.to_json","title":"<code>to_json(self, file_path)</code>","text":"<p>Save rocket configuration to JSON file.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def to_json(self, file_path: str) -&gt; None:\n    \"\"\"Save rocket configuration to JSON file.\"\"\"\n    path = Path(file_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(path, \"w\") as f:\n        json.dump(asdict(self.config), f, indent=2)\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.to_simulation_params","title":"<code>to_simulation_params(self)</code>","text":"<p>Convert rocket configuration to simulation parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def to_simulation_params(self) -&gt; Dict[str, Any]:\n    \"\"\"Convert rocket configuration to simulation parameters.\"\"\"\n    return {\n        \"P0\": self.config.initial_pressure,\n        \"A_nozzle\": self.config.nozzle_area,\n        \"V_bottle\": self.config.bottle_volume,\n        \"water_fraction\": self.config.water_fraction,\n        \"C_d\": self.config.nozzle_discharge_coefficient,\n        \"m_empty\": self.config.empty_mass,\n        \"C_drag\": self.config.drag_coefficient,\n        \"A_rocket\": self.config.reference_area,\n        \"liquid_gas_mass\": self.config.liquid_gas_mass,\n    }\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration","title":"<code> RocketConfiguration        </code>  <code>dataclass</code>","text":"<p>Data class for rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@dataclass\nclass RocketConfiguration:\n    \"\"\"Data class for rocket configuration.\"\"\"\n\n    # Bottle parameters\n    bottle_volume: float = DEFAULT_BOTTLE_VOLUME  # m\u00b3\n    bottle_diameter: float = DEFAULT_ROCKET_DIAMETER  # m\n    bottle_length: float = 0.3  # m\n\n    # Nozzle parameters\n    nozzle_diameter: float = DEFAULT_NOZZLE_DIAMETER  # m\n    nozzle_discharge_coefficient: float = DEFAULT_DISCHARGE_COEFFICIENT\n\n    # Mass parameters\n    empty_mass: float = DEFAULT_EMPTY_MASS  # kg\n    water_fraction: float = DEFAULT_WATER_FRACTION\n\n    # Aerodynamic parameters\n    drag_coefficient: float = DEFAULT_DRAG_COEFFICIENT\n    reference_area: float = None  # Will be calculated if None\n\n    # Initial conditions\n    initial_pressure: float = 10 * ATMOSPHERIC_PRESSURE  # Pa\n    initial_temperature: float = 300  # K\n\n    # Optional liquid gas parameters\n    liquid_gas_mass: float = 0.0  # kg\n\n    # Metadata\n    name: str = \"Default Rocket\"\n    description: str = \"Standard water rocket configuration\"\n\n    def __post_init__(self):\n        \"\"\"Calculate derived parameters after initialization.\"\"\"\n        if self.reference_area is None:\n            self.reference_area = np.pi * (self.bottle_diameter / 2) ** 2\n\n    @property\n    def nozzle_area(self) -&gt; float:\n        \"\"\"Calculate nozzle cross-sectional area.\"\"\"\n        return np.pi * (self.nozzle_diameter / 2) ** 2\n\n    @property\n    def water_volume(self) -&gt; float:\n        \"\"\"Calculate initial water volume.\"\"\"\n        return self.bottle_volume * self.water_fraction\n\n    @property\n    def water_mass(self) -&gt; float:\n        \"\"\"Calculate initial water mass.\"\"\"\n        from ..core.constants import WATER_DENSITY\n\n        return WATER_DENSITY * self.water_volume\n\n    @property\n    def total_mass(self) -&gt; float:\n        \"\"\"Calculate total initial mass.\"\"\"\n        return self.empty_mass + self.water_mass + self.liquid_gas_mass\n\n    def to_simulation_params(self) -&gt; Dict[str, Any]:\n        \"\"\"Exporting to simulation parameters for simulating the rocket\"\"\"\n        return {\n            \"P0\": self.initial_pressure,\n            \"A_nozzle\": self.nozzle_area,\n            \"V_bottle\": self.bottle_volume,\n            \"water_fraction\": self.water_fraction,\n            \"C_d\": self.nozzle_discharge_coefficient,\n            \"m_empty\": self.empty_mass,\n            \"C_drag\": self.drag_coefficient,\n            \"A_rocket\": self.reference_area,\n            \"liquid_gas_mass\": self.liquid_gas_mass,\n        }\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.nozzle_area","title":"<code>nozzle_area: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate nozzle cross-sectional area.</p>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.total_mass","title":"<code>total_mass: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate total initial mass.</p>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.water_mass","title":"<code>water_mass: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate initial water mass.</p>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.water_volume","title":"<code>water_volume: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate initial water volume.</p>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.__post_init__","title":"<code>__post_init__(self)</code>  <code>special</code>","text":"<p>Calculate derived parameters after initialization.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Calculate derived parameters after initialization.\"\"\"\n    if self.reference_area is None:\n        self.reference_area = np.pi * (self.bottle_diameter / 2) ** 2\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.to_simulation_params","title":"<code>to_simulation_params(self)</code>","text":"<p>Exporting to simulation parameters for simulating the rocket</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def to_simulation_params(self) -&gt; Dict[str, Any]:\n    \"\"\"Exporting to simulation parameters for simulating the rocket\"\"\"\n    return {\n        \"P0\": self.initial_pressure,\n        \"A_nozzle\": self.nozzle_area,\n        \"V_bottle\": self.bottle_volume,\n        \"water_fraction\": self.water_fraction,\n        \"C_d\": self.nozzle_discharge_coefficient,\n        \"m_empty\": self.empty_mass,\n        \"C_drag\": self.drag_coefficient,\n        \"A_rocket\": self.reference_area,\n        \"liquid_gas_mass\": self.liquid_gas_mass,\n    }\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.create_IPT1_rocket","title":"<code>create_IPT1_rocket()</code>","text":"<p>Create a standard water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_IPT1_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a standard water rocket configuration.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.001, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.021)\n        .set_mass(empty_mass=0.1, water_fraction=0.33)\n        .set_initial_conditions(pressure=13 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\n            \"Standard IPT 1L Rocket\",\n            \"Standard IPT Air configuration for 1L bottle\",\n        )\n        .build()\n    )\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.create_competition_rocket","title":"<code>create_competition_rocket()</code>","text":"<p>Create a competition-grade water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_competition_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a competition-grade water rocket configuration.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.0015, diameter=0.08)  # 1.5L bottle\n        .set_nozzle(diameter=0.012, discharge_coefficient=0.98)\n        .set_mass(empty_mass=0.15, water_fraction=0.4)\n        .set_aerodynamics(drag_coefficient=0.3)  # Improved aerodynamics\n        .set_initial_conditions(pressure=12 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\"Competition Rocket\", \"Optimized for maximum altitude\")\n        .build()\n    )\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.create_dimensional_rocket_example","title":"<code>create_dimensional_rocket_example()</code>","text":"<p>Example of creating a rocket from dimensional parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_dimensional_rocket_example():\n    \"\"\"Example of creating a rocket from dimensional parameters.\"\"\"\n    builder = RocketBuilder()\n\n    # Build rocket from dimensions\n    config = (\n        builder.build_from_dimensions(\n            L_body=0.25,  # 25 cm body length\n            L_cone=0.08,  # 8 cm nose cone\n            d_body=0.088,  # 88 mm diameter (standard 2L bottle)\n            p_max=8 * ATMOSPHERIC_PRESSURE,  # 8 bar pressure\n            nozzle_diameter=0.01,  # 10 mm nozzle\n            material_name=\"PET\",\n            water_fraction=0.3,\n        )\n        .set_metadata(\n            name=\"Dimensional Rocket\",\n            description=\"Built from dimensional parameters\",\n        )\n        .build()\n    )\n\n    return config\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.create_high_pressure_rocket","title":"<code>create_high_pressure_rocket()</code>","text":"<p>Create a high-pressure water rocket with liquid gas boost.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_high_pressure_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a high-pressure water rocket with liquid gas boost.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.001, diameter=0.1)  # 1L bottle\n        .set_nozzle(diameter=0.020)\n        .set_mass(empty_mass=0.3, water_fraction=0.25)\n        .add_liquid_gas(mass=0.05)  # 50g liquid CO2\n        .set_initial_conditions(pressure=15 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\"High Pressure Rocket\", \"Rocket with liquid gas boost\")\n        .build()\n    )\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.create_standard_IPT_rocket","title":"<code>create_standard_IPT_rocket()</code>","text":"<p>Create a standard water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_standard_IPT_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a standard water rocket configuration.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.001, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.021)\n        .set_mass(empty_mass=0.1, water_fraction=0.33)\n        .set_initial_conditions(pressure=13 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\n            \"Standard IPT 1L Rocket\",\n            \"Standard IPT Air configuration for 1L bottle\",\n        )\n        .build()\n    )\n</code></pre>"},{"location":"api/rocket/builder/#waterrocketpy.rocket.builder.create_standard_rocket","title":"<code>create_standard_rocket()</code>","text":"<p>Create a standard water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_standard_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a standard water rocket configuration.\"\"\"\n    return (RocketBuilder()\n       .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.015)\n        .set_mass(empty_mass=0.25, water_fraction=0.33)\n        .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)\n       .set_metadata(\"Standard 2L Rocket\", \"Standard configuration for 2L bottle\")\n        .build()\n    )\n</code></pre>"},{"location":"api/rocket/geometry/","title":"waterrocketpy.rocket.geometry","text":"<p>Geometric calculations for water rocket components.</p>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.GeometricProperties","title":"<code> GeometricProperties        </code>  <code>dataclass</code>","text":"<p>Container for geometric properties of rocket components.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@dataclass\nclass GeometricProperties:\n    \"\"\"Container for geometric properties of rocket components.\"\"\"\n\n    volume: float\n    surface_area: float\n    center_of_mass: Tuple[float, float, float]\n    center_of_pressure: Tuple[float, float, float]\n    moment_of_inertia: Tuple[float, float, float]  # Ixx, Iyy, Izz\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry","title":"<code> RocketGeometry        </code>","text":"<p>Geometric calculations for water rocket components.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>class RocketGeometry:\n    \"\"\"Geometric calculations for water rocket components.\"\"\"\n\n    @staticmethod\n    def cylinder_volume(diameter: float, length: float) -&gt; float:\n        \"\"\"Calculate volume of a cylinder.\"\"\"\n        radius = diameter / 2\n        return np.pi * radius**2 * length\n\n    @staticmethod\n    def cylinder_surface_area(\n        diameter: float, length: float, include_ends: bool = True\n    ) -&gt; float:\n        \"\"\"Calculate surface area of a cylinder.\"\"\"\n        radius = diameter / 2\n        lateral_area = 2 * np.pi * radius * length\n        if include_ends:\n            end_area = 2 * np.pi * radius**2\n            return lateral_area + end_area\n        return lateral_area\n\n    @staticmethod\n    def sphere_volume(diameter: float) -&gt; float:\n        \"\"\"Calculate volume of a sphere.\"\"\"\n        radius = diameter / 2\n        return (4 / 3) * np.pi * radius**3\n\n    @staticmethod\n    def sphere_surface_area(diameter: float) -&gt; float:\n        \"\"\"Calculate surface area of a sphere.\"\"\"\n        radius = diameter / 2\n        return 4 * np.pi * radius**2\n\n    @staticmethod\n    def cone_volume(diameter: float, height: float) -&gt; float:\n        \"\"\"Calculate volume of a cone.\"\"\"\n        radius = diameter / 2\n        return (1 / 3) * np.pi * radius**2 * height\n\n    @staticmethod\n    def cone_surface_area(diameter: float, height: float) -&gt; float:\n        \"\"\"Calculate surface area of a cone.\"\"\"\n        radius = diameter / 2\n        slant_height = np.sqrt(radius**2 + height**2)\n        return np.pi * radius * slant_height + np.pi * radius**2\n\n    @staticmethod\n    def ellipsoid_volume(a: float, b: float, c: float) -&gt; float:\n        \"\"\"Calculate volume of an ellipsoid.\"\"\"\n        return (4 / 3) * np.pi * a * b * c\n\n    @staticmethod\n    def bottle_volume(\n        diameter: float,\n        length: float,\n        nose_cone_height: float = 0.0,\n        bottom_cone_height: float = 0.0,\n    ) -&gt; float:\n        \"\"\"\n        Calculate total volume of a rocket bottle.\n\n        Args:\n            diameter: Bottle diameter\n            length: Cylindrical section length\n            nose_cone_height: Height of nose cone\n            bottom_cone_height: Height of bottom cone\n\n        Returns:\n            Total volume\n        \"\"\"\n        # Cylindrical section\n        cylinder_vol = RocketGeometry.cylinder_volume(diameter, length)\n\n        # Nose cone (if present)\n        nose_vol = 0\n        if nose_cone_height &gt; 0:\n            nose_vol = RocketGeometry.cone_volume(diameter, nose_cone_height)\n\n        # Bottom cone (if present)\n        bottom_vol = 0\n        if bottom_cone_height &gt; 0:\n            bottom_vol = RocketGeometry.cone_volume(\n                diameter, bottom_cone_height\n            )\n\n        return cylinder_vol + nose_vol + bottom_vol\n\n    @staticmethod\n    def calculate_center_of_mass(\n        components: List[Dict[str, Any]],\n    ) -&gt; Tuple[float, float, float]:\n        \"\"\"\n        Calculate center of mass for multiple components.\n\n        Args:\n            components: List of component dictionaries with 'mass', 'position' keys\n\n        Returns:\n            Center of mass coordinates (x, y, z)\n        \"\"\"\n        total_mass = 0\n        weighted_position = np.array([0.0, 0.0, 0.0])\n\n        for component in components:\n            mass = component[\"mass\"]\n            position = np.array(component[\"position\"])\n\n            total_mass += mass\n            weighted_position += mass * position\n\n        if total_mass == 0:\n            return (0.0, 0.0, 0.0)\n\n        center_of_mass = weighted_position / total_mass\n        return tuple(center_of_mass)\n\n    @staticmethod\n    def calculate_center_of_pressure(\n        fins: List[Dict[str, Any]], body_cp: Tuple[float, float, float]\n    ) -&gt; Tuple[float, float, float]:\n        \"\"\"\n        Calculate center of pressure for rocket with fins.\n\n        Args:\n            fins: List of fin dictionaries with area and position\n            body_cp: Center of pressure of the body\n\n        Returns:\n            Overall center of pressure\n        \"\"\"\n        # Body contribution\n        body_area = 1.0  # Normalized\n        body_moment = np.array(body_cp) * body_area\n\n        total_area = body_area\n        total_moment = body_moment\n\n        # Fin contributions\n        for fin in fins:\n            fin_area = fin[\"area\"]\n            fin_position = np.array(fin[\"position\"])\n\n            total_area += fin_area\n            total_moment += fin_area * fin_position\n\n        if total_area == 0:\n            return body_cp\n\n        cp = total_moment / total_area\n        return tuple(cp)\n\n    @staticmethod\n    def calculate_moment_of_inertia_cylinder(\n        mass: float, radius: float, length: float\n    ) -&gt; Tuple[float, float, float]:\n        \"\"\"\n        Calculate moment of inertia for a cylinder.\n\n        Args:\n            mass: Mass of cylinder\n            radius: Radius of cylinder\n            length: Length of cylinder\n\n        Returns:\n            Moments of inertia (Ixx, Iyy, Izz)\n        \"\"\"\n        # For a cylinder with axis along z:\n        # Ixx = Iyy = (1/12) * m * (3*r^2 + h^2)\n        # Izz = (1/2) * m * r^2\n\n        Ixx = Iyy = (1 / 12) * mass * (3 * radius**2 + length**2)\n        Izz = 0.5 * mass * radius**2\n\n        return (Ixx, Iyy, Izz)\n\n    @staticmethod\n    def calculate_stability_margin(\n        center_of_mass: Tuple[float, float, float],\n        center_of_pressure: Tuple[float, float, float],\n        reference_length: float,\n    ) -&gt; float:\n        \"\"\"\n        Calculate static stability margin.\n\n        Args:\n            center_of_mass: Center of mass position\n            center_of_pressure: Center of pressure position\n            reference_length: Reference length (typically rocket diameter)\n\n        Returns:\n            Stability margin (positive = stable)\n        \"\"\"\n        # Calculate distance between CP and CG along rocket axis (typically\n        # x-axis)\n        cp_x = center_of_pressure[0]\n        cg_x = center_of_mass[0]\n\n        # Stability margin in calibers (rocket diameters)\n        stability_margin = (cp_x - cg_x) / reference_length\n\n        return stability_margin\n\n    @staticmethod\n    def calculate_fin_properties(\n        span: float,\n        root_chord: float,\n        tip_chord: float,\n        sweep_angle: float = 0.0,\n    ) -&gt; Dict[str, float]:\n        \"\"\"\n        Calculate properties of a trapezoidal fin.\n\n        Args:\n            span: Fin span (height)\n            root_chord: Root chord length\n            tip_chord: Tip chord length\n            sweep_angle: Sweep angle in radians\n\n        Returns:\n            Dictionary with fin properties\n        \"\"\"\n        # Area\n        area = 0.5 * (root_chord + tip_chord) * span\n\n        # Aspect ratio\n        aspect_ratio = span**2 / area\n\n        # Taper ratio\n        taper_ratio = tip_chord / root_chord if root_chord &gt; 0 else 0\n\n        # Mean aerodynamic chord\n        mac = (\n            (2 / 3)\n            * root_chord\n            * (1 + taper_ratio + taper_ratio**2)\n            / (1 + taper_ratio)\n        )\n\n        # Centroid position (from root leading edge)\n        x_centroid = (\n            (root_chord + 2 * tip_chord)\n            / (3 * (root_chord + tip_chord))\n            * root_chord\n        )\n        y_centroid = (\n            span / 3 * (root_chord + 2 * tip_chord) / (root_chord + tip_chord)\n        )\n\n        return {\n            \"area\": area,\n            \"aspect_ratio\": aspect_ratio,\n            \"taper_ratio\": taper_ratio,\n            \"mac\": mac,\n            \"centroid_x\": x_centroid,\n            \"centroid_y\": y_centroid,\n        }\n\n    @staticmethod\n    def calculate_rocket_wetted_area(\n        diameter: float,\n        length: float,\n        nose_cone_height: float = 0.0,\n        fin_area: float = 0.0,\n    ) -&gt; float:\n        \"\"\"\n        Calculate total wetted area of rocket.\n\n        Args:\n            diameter: Rocket diameter\n            length: Body length\n            nose_cone_height: Nose cone height\n            fin_area: Total fin area\n\n        Returns:\n            Total wetted area\n        \"\"\"\n        # Body area\n        body_area = RocketGeometry.cylinder_surface_area(\n            diameter, length, include_ends=False\n        )\n\n        # Nose cone area\n        nose_area = 0\n        if nose_cone_height &gt; 0:\n            nose_area = RocketGeometry.cone_surface_area(\n                diameter, nose_cone_height\n            )\n\n        # Base area\n        base_area = np.pi * (diameter / 2) ** 2\n\n        # Total wetted area (both sides of fins)\n        total_area = body_area + nose_area + base_area + 2 * fin_area\n\n        return total_area\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.bottle_volume","title":"<code>bottle_volume(diameter, length, nose_cone_height=0.0, bottom_cone_height=0.0)</code>  <code>staticmethod</code>","text":"<p>Calculate total volume of a rocket bottle.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Bottle diameter</p> required <code>length</code> <code>float</code> <p>Cylindrical section length</p> required <code>nose_cone_height</code> <code>float</code> <p>Height of nose cone</p> <code>0.0</code> <code>bottom_cone_height</code> <code>float</code> <p>Height of bottom cone</p> <code>0.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Total volume</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef bottle_volume(\n    diameter: float,\n    length: float,\n    nose_cone_height: float = 0.0,\n    bottom_cone_height: float = 0.0,\n) -&gt; float:\n    \"\"\"\n    Calculate total volume of a rocket bottle.\n\n    Args:\n        diameter: Bottle diameter\n        length: Cylindrical section length\n        nose_cone_height: Height of nose cone\n        bottom_cone_height: Height of bottom cone\n\n    Returns:\n        Total volume\n    \"\"\"\n    # Cylindrical section\n    cylinder_vol = RocketGeometry.cylinder_volume(diameter, length)\n\n    # Nose cone (if present)\n    nose_vol = 0\n    if nose_cone_height &gt; 0:\n        nose_vol = RocketGeometry.cone_volume(diameter, nose_cone_height)\n\n    # Bottom cone (if present)\n    bottom_vol = 0\n    if bottom_cone_height &gt; 0:\n        bottom_vol = RocketGeometry.cone_volume(\n            diameter, bottom_cone_height\n        )\n\n    return cylinder_vol + nose_vol + bottom_vol\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_center_of_mass","title":"<code>calculate_center_of_mass(components)</code>  <code>staticmethod</code>","text":"<p>Calculate center of mass for multiple components.</p> <p>Parameters:</p> Name Type Description Default <code>components</code> <code>List[Dict[str, Any]]</code> <p>List of component dictionaries with 'mass', 'position' keys</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Center of mass coordinates (x, y, z)</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_center_of_mass(\n    components: List[Dict[str, Any]],\n) -&gt; Tuple[float, float, float]:\n    \"\"\"\n    Calculate center of mass for multiple components.\n\n    Args:\n        components: List of component dictionaries with 'mass', 'position' keys\n\n    Returns:\n        Center of mass coordinates (x, y, z)\n    \"\"\"\n    total_mass = 0\n    weighted_position = np.array([0.0, 0.0, 0.0])\n\n    for component in components:\n        mass = component[\"mass\"]\n        position = np.array(component[\"position\"])\n\n        total_mass += mass\n        weighted_position += mass * position\n\n    if total_mass == 0:\n        return (0.0, 0.0, 0.0)\n\n    center_of_mass = weighted_position / total_mass\n    return tuple(center_of_mass)\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_center_of_pressure","title":"<code>calculate_center_of_pressure(fins, body_cp)</code>  <code>staticmethod</code>","text":"<p>Calculate center of pressure for rocket with fins.</p> <p>Parameters:</p> Name Type Description Default <code>fins</code> <code>List[Dict[str, Any]]</code> <p>List of fin dictionaries with area and position</p> required <code>body_cp</code> <code>Tuple[float, float, float]</code> <p>Center of pressure of the body</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Overall center of pressure</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_center_of_pressure(\n    fins: List[Dict[str, Any]], body_cp: Tuple[float, float, float]\n) -&gt; Tuple[float, float, float]:\n    \"\"\"\n    Calculate center of pressure for rocket with fins.\n\n    Args:\n        fins: List of fin dictionaries with area and position\n        body_cp: Center of pressure of the body\n\n    Returns:\n        Overall center of pressure\n    \"\"\"\n    # Body contribution\n    body_area = 1.0  # Normalized\n    body_moment = np.array(body_cp) * body_area\n\n    total_area = body_area\n    total_moment = body_moment\n\n    # Fin contributions\n    for fin in fins:\n        fin_area = fin[\"area\"]\n        fin_position = np.array(fin[\"position\"])\n\n        total_area += fin_area\n        total_moment += fin_area * fin_position\n\n    if total_area == 0:\n        return body_cp\n\n    cp = total_moment / total_area\n    return tuple(cp)\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_fin_properties","title":"<code>calculate_fin_properties(span, root_chord, tip_chord, sweep_angle=0.0)</code>  <code>staticmethod</code>","text":"<p>Calculate properties of a trapezoidal fin.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>float</code> <p>Fin span (height)</p> required <code>root_chord</code> <code>float</code> <p>Root chord length</p> required <code>tip_chord</code> <code>float</code> <p>Tip chord length</p> required <code>sweep_angle</code> <code>float</code> <p>Sweep angle in radians</p> <code>0.0</code> <p>Returns:</p> Type Description <code>Dict[str, float]</code> <p>Dictionary with fin properties</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_fin_properties(\n    span: float,\n    root_chord: float,\n    tip_chord: float,\n    sweep_angle: float = 0.0,\n) -&gt; Dict[str, float]:\n    \"\"\"\n    Calculate properties of a trapezoidal fin.\n\n    Args:\n        span: Fin span (height)\n        root_chord: Root chord length\n        tip_chord: Tip chord length\n        sweep_angle: Sweep angle in radians\n\n    Returns:\n        Dictionary with fin properties\n    \"\"\"\n    # Area\n    area = 0.5 * (root_chord + tip_chord) * span\n\n    # Aspect ratio\n    aspect_ratio = span**2 / area\n\n    # Taper ratio\n    taper_ratio = tip_chord / root_chord if root_chord &gt; 0 else 0\n\n    # Mean aerodynamic chord\n    mac = (\n        (2 / 3)\n        * root_chord\n        * (1 + taper_ratio + taper_ratio**2)\n        / (1 + taper_ratio)\n    )\n\n    # Centroid position (from root leading edge)\n    x_centroid = (\n        (root_chord + 2 * tip_chord)\n        / (3 * (root_chord + tip_chord))\n        * root_chord\n    )\n    y_centroid = (\n        span / 3 * (root_chord + 2 * tip_chord) / (root_chord + tip_chord)\n    )\n\n    return {\n        \"area\": area,\n        \"aspect_ratio\": aspect_ratio,\n        \"taper_ratio\": taper_ratio,\n        \"mac\": mac,\n        \"centroid_x\": x_centroid,\n        \"centroid_y\": y_centroid,\n    }\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_moment_of_inertia_cylinder","title":"<code>calculate_moment_of_inertia_cylinder(mass, radius, length)</code>  <code>staticmethod</code>","text":"<p>Calculate moment of inertia for a cylinder.</p> <p>Parameters:</p> Name Type Description Default <code>mass</code> <code>float</code> <p>Mass of cylinder</p> required <code>radius</code> <code>float</code> <p>Radius of cylinder</p> required <code>length</code> <code>float</code> <p>Length of cylinder</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Moments of inertia (Ixx, Iyy, Izz)</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_moment_of_inertia_cylinder(\n    mass: float, radius: float, length: float\n) -&gt; Tuple[float, float, float]:\n    \"\"\"\n    Calculate moment of inertia for a cylinder.\n\n    Args:\n        mass: Mass of cylinder\n        radius: Radius of cylinder\n        length: Length of cylinder\n\n    Returns:\n        Moments of inertia (Ixx, Iyy, Izz)\n    \"\"\"\n    # For a cylinder with axis along z:\n    # Ixx = Iyy = (1/12) * m * (3*r^2 + h^2)\n    # Izz = (1/2) * m * r^2\n\n    Ixx = Iyy = (1 / 12) * mass * (3 * radius**2 + length**2)\n    Izz = 0.5 * mass * radius**2\n\n    return (Ixx, Iyy, Izz)\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_rocket_wetted_area","title":"<code>calculate_rocket_wetted_area(diameter, length, nose_cone_height=0.0, fin_area=0.0)</code>  <code>staticmethod</code>","text":"<p>Calculate total wetted area of rocket.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Rocket diameter</p> required <code>length</code> <code>float</code> <p>Body length</p> required <code>nose_cone_height</code> <code>float</code> <p>Nose cone height</p> <code>0.0</code> <code>fin_area</code> <code>float</code> <p>Total fin area</p> <code>0.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Total wetted area</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_rocket_wetted_area(\n    diameter: float,\n    length: float,\n    nose_cone_height: float = 0.0,\n    fin_area: float = 0.0,\n) -&gt; float:\n    \"\"\"\n    Calculate total wetted area of rocket.\n\n    Args:\n        diameter: Rocket diameter\n        length: Body length\n        nose_cone_height: Nose cone height\n        fin_area: Total fin area\n\n    Returns:\n        Total wetted area\n    \"\"\"\n    # Body area\n    body_area = RocketGeometry.cylinder_surface_area(\n        diameter, length, include_ends=False\n    )\n\n    # Nose cone area\n    nose_area = 0\n    if nose_cone_height &gt; 0:\n        nose_area = RocketGeometry.cone_surface_area(\n            diameter, nose_cone_height\n        )\n\n    # Base area\n    base_area = np.pi * (diameter / 2) ** 2\n\n    # Total wetted area (both sides of fins)\n    total_area = body_area + nose_area + base_area + 2 * fin_area\n\n    return total_area\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_stability_margin","title":"<code>calculate_stability_margin(center_of_mass, center_of_pressure, reference_length)</code>  <code>staticmethod</code>","text":"<p>Calculate static stability margin.</p> <p>Parameters:</p> Name Type Description Default <code>center_of_mass</code> <code>Tuple[float, float, float]</code> <p>Center of mass position</p> required <code>center_of_pressure</code> <code>Tuple[float, float, float]</code> <p>Center of pressure position</p> required <code>reference_length</code> <code>float</code> <p>Reference length (typically rocket diameter)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Stability margin (positive = stable)</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_stability_margin(\n    center_of_mass: Tuple[float, float, float],\n    center_of_pressure: Tuple[float, float, float],\n    reference_length: float,\n) -&gt; float:\n    \"\"\"\n    Calculate static stability margin.\n\n    Args:\n        center_of_mass: Center of mass position\n        center_of_pressure: Center of pressure position\n        reference_length: Reference length (typically rocket diameter)\n\n    Returns:\n        Stability margin (positive = stable)\n    \"\"\"\n    # Calculate distance between CP and CG along rocket axis (typically\n    # x-axis)\n    cp_x = center_of_pressure[0]\n    cg_x = center_of_mass[0]\n\n    # Stability margin in calibers (rocket diameters)\n    stability_margin = (cp_x - cg_x) / reference_length\n\n    return stability_margin\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cone_surface_area","title":"<code>cone_surface_area(diameter, height)</code>  <code>staticmethod</code>","text":"<p>Calculate surface area of a cone.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cone_surface_area(diameter: float, height: float) -&gt; float:\n    \"\"\"Calculate surface area of a cone.\"\"\"\n    radius = diameter / 2\n    slant_height = np.sqrt(radius**2 + height**2)\n    return np.pi * radius * slant_height + np.pi * radius**2\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cone_volume","title":"<code>cone_volume(diameter, height)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of a cone.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cone_volume(diameter: float, height: float) -&gt; float:\n    \"\"\"Calculate volume of a cone.\"\"\"\n    radius = diameter / 2\n    return (1 / 3) * np.pi * radius**2 * height\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cylinder_surface_area","title":"<code>cylinder_surface_area(diameter, length, include_ends=True)</code>  <code>staticmethod</code>","text":"<p>Calculate surface area of a cylinder.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cylinder_surface_area(\n    diameter: float, length: float, include_ends: bool = True\n) -&gt; float:\n    \"\"\"Calculate surface area of a cylinder.\"\"\"\n    radius = diameter / 2\n    lateral_area = 2 * np.pi * radius * length\n    if include_ends:\n        end_area = 2 * np.pi * radius**2\n        return lateral_area + end_area\n    return lateral_area\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cylinder_volume","title":"<code>cylinder_volume(diameter, length)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of a cylinder.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cylinder_volume(diameter: float, length: float) -&gt; float:\n    \"\"\"Calculate volume of a cylinder.\"\"\"\n    radius = diameter / 2\n    return np.pi * radius**2 * length\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.ellipsoid_volume","title":"<code>ellipsoid_volume(a, b, c)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of an ellipsoid.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef ellipsoid_volume(a: float, b: float, c: float) -&gt; float:\n    \"\"\"Calculate volume of an ellipsoid.\"\"\"\n    return (4 / 3) * np.pi * a * b * c\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.sphere_surface_area","title":"<code>sphere_surface_area(diameter)</code>  <code>staticmethod</code>","text":"<p>Calculate surface area of a sphere.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef sphere_surface_area(diameter: float) -&gt; float:\n    \"\"\"Calculate surface area of a sphere.\"\"\"\n    radius = diameter / 2\n    return 4 * np.pi * radius**2\n</code></pre>"},{"location":"api/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.sphere_volume","title":"<code>sphere_volume(diameter)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of a sphere.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef sphere_volume(diameter: float) -&gt; float:\n    \"\"\"Calculate volume of a sphere.\"\"\"\n    radius = diameter / 2\n    return (4 / 3) * np.pi * radius**3\n</code></pre>"},{"location":"api/rocket/materials/","title":"waterrocketpy.rocket.materials","text":"<p>Material properties and calculations for water rocket components.</p>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase","title":"<code> MaterialDatabase        </code>","text":"<p>Database of material properties for rocket components.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>class MaterialDatabase:\n    \"\"\"Database of material properties for rocket components.\"\"\"\n\n    def __init__(self):\n        self._materials = self._load_default_materials()\n\n    def _load_default_materials(self) -&gt; Dict[str, MaterialProperties]:\n        \"\"\"Load default material properties.\"\"\"\n        materials = {}\n\n        # PET (Polyethylene Terephthalate) - Common bottle material\n        materials[\"PET\"] = MaterialProperties(\n            name=\"PET\",\n            density=1380,  # kg/m\u00b3\n            yield_strength=55e6,  # Pa\n            ultimate_strength=75e6,  # Pa\n            elastic_modulus=2.8e9,  # Pa\n            poisson_ratio=0.37,\n            thermal_expansion=70e-6,  # 1/K\n            thermal_conductivity=0.24,  # W/(m\u00b7K)\n            specific_heat=1200,  # J/(kg\u00b7K)\n            max_temperature=343,  # K (70\u00b0C)\n            cost_per_kg=1.5,\n        )\n\n        # HDPE (High-Density Polyethylene)\n        materials[\"HDPE\"] = MaterialProperties(\n            name=\"HDPE\",\n            density=960,  # kg/m\u00b3\n            yield_strength=30e6,  # Pa\n            ultimate_strength=40e6,  # Pa\n            elastic_modulus=1.1e9,  # Pa\n            poisson_ratio=0.42,\n            thermal_expansion=120e-6,  # 1/K\n            thermal_conductivity=0.48,  # W/(m\u00b7K)\n            specific_heat=1900,  # J/(kg\u00b7K)\n            max_temperature=393,  # K (120\u00b0C)\n            cost_per_kg=1.2,\n        )\n\n        # Aluminum (for nozzles, fins)\n        materials[\"Aluminum\"] = MaterialProperties(\n            name=\"Aluminum\",\n            density=2700,  # kg/m\u00b3\n            yield_strength=276e6,  # Pa\n            ultimate_strength=310e6,  # Pa\n            elastic_modulus=69e9,  # Pa\n            poisson_ratio=0.33,\n            thermal_expansion=23e-6,  # 1/K\n            thermal_conductivity=237,  # W/(m\u00b7K)\n            specific_heat=900,  # J/(kg\u00b7K)\n            max_temperature=933,  # K (660\u00b0C)\n            cost_per_kg=2.5,\n        )\n\n        # Carbon Fiber (for advanced rockets)\n        materials[\"Carbon_Fiber\"] = MaterialProperties(\n            name=\"Carbon Fiber\",\n            density=1600,  # kg/m\u00b3\n            yield_strength=3500e6,  # Pa\n            ultimate_strength=4000e6,  # Pa\n            elastic_modulus=230e9,  # Pa\n            poisson_ratio=0.22,\n            thermal_expansion=-0.5e-6,  # 1/K\n            thermal_conductivity=100,  # W/(m\u00b7K)\n            specific_heat=700,  # J/(kg\u00b7K)\n            max_temperature=673,  # K (400\u00b0C)\n            cost_per_kg=50.0,\n        )\n\n        # Fiberglass\n        materials[\"Fiberglass\"] = MaterialProperties(\n            name=\"Fiberglass\",\n            density=1800,  # kg/m\u00b3\n            yield_strength=400e6,  # Pa\n            ultimate_strength=500e6,  # Pa\n            elastic_modulus=35e9,  # Pa\n            poisson_ratio=0.25,\n            thermal_expansion=8e-6,  # 1/K\n            thermal_conductivity=0.35,  # W/(m\u00b7K)\n            specific_heat=800,  # J/(kg\u00b7K)\n            max_temperature=573,  # K (300\u00b0C)\n            cost_per_kg=8.0,\n        )\n\n        # Stainless Steel (for high-pressure applications)\n        materials[\"Stainless_Steel\"] = MaterialProperties(\n            name=\"Stainless Steel\",\n            density=8000,  # kg/m\u00b3\n            yield_strength=520e6,  # Pa\n            ultimate_strength=720e6,  # Pa\n            elastic_modulus=200e9,  # Pa\n            poisson_ratio=0.29,\n            thermal_expansion=17e-6,  # 1/K\n            thermal_conductivity=16,  # W/(m\u00b7K)\n            specific_heat=500,  # J/(kg\u00b7K)\n            max_temperature=1673,  # K (1400\u00b0C)\n            cost_per_kg=5.0,\n        )\n\n        return materials\n\n    def get_material(self, name: str) -&gt; Optional[MaterialProperties]:\n        \"\"\"Get material properties by name.\"\"\"\n        return self._materials.get(name)\n\n    def add_material(self, material: MaterialProperties) -&gt; None:\n        \"\"\"Add a new material to the database.\"\"\"\n        self._materials[material.name] = material\n\n    def list_materials(self) -&gt; list:\n        \"\"\"List all available materials.\"\"\"\n        return list(self._materials.keys())\n\n    def load_from_json(self, file_path: str) -&gt; None:\n        \"\"\"Load materials from JSON file.\"\"\"\n        path = Path(file_path)\n        if not path.exists():\n            raise FileNotFoundError(\n                f\"Material database file not found: {file_path}\"\n            )\n\n        with open(path, \"r\") as f:\n            data = json.load(f)\n\n        for name, props in data.items():\n            material = MaterialProperties(name=name, **props)\n            self.add_material(material)\n\n    def save_to_json(self, file_path: str) -&gt; None:\n        \"\"\"Save materials to JSON file.\"\"\"\n        path = Path(file_path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n\n        data = {}\n        for name, material in self._materials.items():\n            data[name] = {\n                \"density\": material.density,\n                \"yield_strength\": material.yield_strength,\n                \"ultimate_strength\": material.ultimate_strength,\n                \"elastic_modulus\": material.elastic_modulus,\n                \"poisson_ratio\": material.poisson_ratio,\n                \"thermal_expansion\": material.thermal_expansion,\n                \"thermal_conductivity\": material.thermal_conductivity,\n                \"specific_heat\": material.specific_heat,\n                \"max_temperature\": material.max_temperature,\n                \"cost_per_kg\": material.cost_per_kg,\n            }\n\n        with open(path, \"w\") as f:\n            json.dump(data, f, indent=2)\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.add_material","title":"<code>add_material(self, material)</code>","text":"<p>Add a new material to the database.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def add_material(self, material: MaterialProperties) -&gt; None:\n    \"\"\"Add a new material to the database.\"\"\"\n    self._materials[material.name] = material\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.get_material","title":"<code>get_material(self, name)</code>","text":"<p>Get material properties by name.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def get_material(self, name: str) -&gt; Optional[MaterialProperties]:\n    \"\"\"Get material properties by name.\"\"\"\n    return self._materials.get(name)\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.list_materials","title":"<code>list_materials(self)</code>","text":"<p>List all available materials.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def list_materials(self) -&gt; list:\n    \"\"\"List all available materials.\"\"\"\n    return list(self._materials.keys())\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.load_from_json","title":"<code>load_from_json(self, file_path)</code>","text":"<p>Load materials from JSON file.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def load_from_json(self, file_path: str) -&gt; None:\n    \"\"\"Load materials from JSON file.\"\"\"\n    path = Path(file_path)\n    if not path.exists():\n        raise FileNotFoundError(\n            f\"Material database file not found: {file_path}\"\n        )\n\n    with open(path, \"r\") as f:\n        data = json.load(f)\n\n    for name, props in data.items():\n        material = MaterialProperties(name=name, **props)\n        self.add_material(material)\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.save_to_json","title":"<code>save_to_json(self, file_path)</code>","text":"<p>Save materials to JSON file.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def save_to_json(self, file_path: str) -&gt; None:\n    \"\"\"Save materials to JSON file.\"\"\"\n    path = Path(file_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    data = {}\n    for name, material in self._materials.items():\n        data[name] = {\n            \"density\": material.density,\n            \"yield_strength\": material.yield_strength,\n            \"ultimate_strength\": material.ultimate_strength,\n            \"elastic_modulus\": material.elastic_modulus,\n            \"poisson_ratio\": material.poisson_ratio,\n            \"thermal_expansion\": material.thermal_expansion,\n            \"thermal_conductivity\": material.thermal_conductivity,\n            \"specific_heat\": material.specific_heat,\n            \"max_temperature\": material.max_temperature,\n            \"cost_per_kg\": material.cost_per_kg,\n        }\n\n    with open(path, \"w\") as f:\n        json.dump(data, f, indent=2)\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.MaterialProperties","title":"<code> MaterialProperties        </code>  <code>dataclass</code>","text":"<p>Container for material properties.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@dataclass\nclass MaterialProperties:\n    \"\"\"Container for material properties.\"\"\"\n\n    name: str\n    density: float  # kg/m\u00b3\n    yield_strength: float  # Pa\n    ultimate_strength: float  # Pa\n    elastic_modulus: float  # Pa\n    poisson_ratio: float\n    thermal_expansion: float  # 1/K\n    thermal_conductivity: float  # W/(m\u00b7K)\n    specific_heat: float  # J/(kg\u00b7K)\n    max_temperature: float  # K\n    cost_per_kg: float = 0.0  # Optional cost information\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis","title":"<code> StructuralAnalysis        </code>","text":"<p>Structural analysis calculations for rocket components.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>class StructuralAnalysis:\n    \"\"\"Structural analysis calculations for rocket components.\"\"\"\n\n    @staticmethod\n    def calculate_wall_thickness(\n        internal_pressure: float,\n        diameter: float,\n        material: MaterialProperties,\n        safety_factor: float = 2.0,\n    ) -&gt; float:\n        \"\"\"\n        Calculate minimum wall thickness for pressure vessel.\n\n        Args:\n            internal_pressure: Internal pressure (Pa)\n            diameter: Vessel diameter (m)\n            material: Material properties\n            safety_factor: Safety factor\n\n        Returns:\n            Minimum wall thickness (m)\n        \"\"\"\n        # Using thin-wall pressure vessel formula: \u03c3 = p*d/(2*t)\n        # Rearranging: t = p*d/(2*\u03c3_allow)\n\n        allowable_stress = material.yield_strength / safety_factor\n        radius = diameter / 2\n\n        # Hoop stress formula for thin-walled cylinder\n        thickness = internal_pressure * radius / allowable_stress\n\n        return thickness\n\n    @staticmethod\n    def calculate_burst_pressure(\n        diameter: float, wall_thickness: float, material: MaterialProperties\n    ) -&gt; float:\n        \"\"\"\n        Calculate burst pressure for a cylindrical vessel.\n\n        Args:\n            diameter: Vessel diameter (m)\n            wall_thickness: Wall thickness (m)\n            material: Material properties\n\n        Returns:\n            Burst pressure (Pa)\n        \"\"\"\n        radius = diameter / 2\n\n        # Using ultimate strength for burst calculation\n        burst_pressure = (\n            2 * material.ultimate_strength * wall_thickness / radius\n        )\n\n        return burst_pressure\n\n    @staticmethod\n    def calculate_mass(volume: float, material: MaterialProperties) -&gt; float:\n        \"\"\"\n        Calculate mass of component.\n\n        Args:\n            volume: Component volume (m\u00b3)\n            material: Material properties\n\n        Returns:\n            Mass (kg)\n        \"\"\"\n        return volume * material.density\n\n    @staticmethod\n    def check_temperature_limits(\n        operating_temperature: float, material: MaterialProperties\n    ) -&gt; bool:\n        \"\"\"\n        Check if operating temperature is within material limits.\n\n        Args:\n            operating_temperature: Operating temperature (K)\n            material: Material properties\n\n        Returns:\n            True if temperature is acceptable\n        \"\"\"\n        return operating_temperature &lt;= material.max_temperature\n\n    @staticmethod\n    def calculate_thermal_stress(\n        temperature_change: float, length: float, material: MaterialProperties\n    ) -&gt; float:\n        \"\"\"\n        Calculate thermal stress due to temperature change.\n\n        Args:\n            temperature_change: Temperature change (K)\n            length: Component length (m)\n            material: Material properties\n\n        Returns:\n            Thermal stress (Pa)\n        \"\"\"\n        # Thermal strain = \u03b1 * \u0394T\n        # Thermal stress = E * \u03b1 * \u0394T (if constrained)\n\n        thermal_strain = material.thermal_expansion * temperature_change\n        thermal_stress = material.elastic_modulus * thermal_strain\n\n        return thermal_stress\n\n    @staticmethod\n    def calculate_cost(volume: float, material: MaterialProperties) -&gt; float:\n        \"\"\"\n        Calculate material cost.\n\n        Args:\n            volume: Component volume (m\u00b3)\n            material: Material properties\n\n        Returns:\n            Cost (currency units)\n        \"\"\"\n        mass = StructuralAnalysis.calculate_mass(volume, material)\n        return mass * material.cost_per_kg\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_burst_pressure","title":"<code>calculate_burst_pressure(diameter, wall_thickness, material)</code>  <code>staticmethod</code>","text":"<p>Calculate burst pressure for a cylindrical vessel.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Vessel diameter (m)</p> required <code>wall_thickness</code> <code>float</code> <p>Wall thickness (m)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Burst pressure (Pa)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_burst_pressure(\n    diameter: float, wall_thickness: float, material: MaterialProperties\n) -&gt; float:\n    \"\"\"\n    Calculate burst pressure for a cylindrical vessel.\n\n    Args:\n        diameter: Vessel diameter (m)\n        wall_thickness: Wall thickness (m)\n        material: Material properties\n\n    Returns:\n        Burst pressure (Pa)\n    \"\"\"\n    radius = diameter / 2\n\n    # Using ultimate strength for burst calculation\n    burst_pressure = (\n        2 * material.ultimate_strength * wall_thickness / radius\n    )\n\n    return burst_pressure\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_cost","title":"<code>calculate_cost(volume, material)</code>  <code>staticmethod</code>","text":"<p>Calculate material cost.</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>float</code> <p>Component volume (m\u00b3)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Cost (currency units)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_cost(volume: float, material: MaterialProperties) -&gt; float:\n    \"\"\"\n    Calculate material cost.\n\n    Args:\n        volume: Component volume (m\u00b3)\n        material: Material properties\n\n    Returns:\n        Cost (currency units)\n    \"\"\"\n    mass = StructuralAnalysis.calculate_mass(volume, material)\n    return mass * material.cost_per_kg\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_mass","title":"<code>calculate_mass(volume, material)</code>  <code>staticmethod</code>","text":"<p>Calculate mass of component.</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>float</code> <p>Component volume (m\u00b3)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Mass (kg)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_mass(volume: float, material: MaterialProperties) -&gt; float:\n    \"\"\"\n    Calculate mass of component.\n\n    Args:\n        volume: Component volume (m\u00b3)\n        material: Material properties\n\n    Returns:\n        Mass (kg)\n    \"\"\"\n    return volume * material.density\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_thermal_stress","title":"<code>calculate_thermal_stress(temperature_change, length, material)</code>  <code>staticmethod</code>","text":"<p>Calculate thermal stress due to temperature change.</p> <p>Parameters:</p> Name Type Description Default <code>temperature_change</code> <code>float</code> <p>Temperature change (K)</p> required <code>length</code> <code>float</code> <p>Component length (m)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Thermal stress (Pa)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_thermal_stress(\n    temperature_change: float, length: float, material: MaterialProperties\n) -&gt; float:\n    \"\"\"\n    Calculate thermal stress due to temperature change.\n\n    Args:\n        temperature_change: Temperature change (K)\n        length: Component length (m)\n        material: Material properties\n\n    Returns:\n        Thermal stress (Pa)\n    \"\"\"\n    # Thermal strain = \u03b1 * \u0394T\n    # Thermal stress = E * \u03b1 * \u0394T (if constrained)\n\n    thermal_strain = material.thermal_expansion * temperature_change\n    thermal_stress = material.elastic_modulus * thermal_strain\n\n    return thermal_stress\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_wall_thickness","title":"<code>calculate_wall_thickness(internal_pressure, diameter, material, safety_factor=2.0)</code>  <code>staticmethod</code>","text":"<p>Calculate minimum wall thickness for pressure vessel.</p> <p>Parameters:</p> Name Type Description Default <code>internal_pressure</code> <code>float</code> <p>Internal pressure (Pa)</p> required <code>diameter</code> <code>float</code> <p>Vessel diameter (m)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <code>safety_factor</code> <code>float</code> <p>Safety factor</p> <code>2.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Minimum wall thickness (m)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_wall_thickness(\n    internal_pressure: float,\n    diameter: float,\n    material: MaterialProperties,\n    safety_factor: float = 2.0,\n) -&gt; float:\n    \"\"\"\n    Calculate minimum wall thickness for pressure vessel.\n\n    Args:\n        internal_pressure: Internal pressure (Pa)\n        diameter: Vessel diameter (m)\n        material: Material properties\n        safety_factor: Safety factor\n\n    Returns:\n        Minimum wall thickness (m)\n    \"\"\"\n    # Using thin-wall pressure vessel formula: \u03c3 = p*d/(2*t)\n    # Rearranging: t = p*d/(2*\u03c3_allow)\n\n    allowable_stress = material.yield_strength / safety_factor\n    radius = diameter / 2\n\n    # Hoop stress formula for thin-walled cylinder\n    thickness = internal_pressure * radius / allowable_stress\n\n    return thickness\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.check_temperature_limits","title":"<code>check_temperature_limits(operating_temperature, material)</code>  <code>staticmethod</code>","text":"<p>Check if operating temperature is within material limits.</p> <p>Parameters:</p> Name Type Description Default <code>operating_temperature</code> <code>float</code> <p>Operating temperature (K)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if temperature is acceptable</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef check_temperature_limits(\n    operating_temperature: float, material: MaterialProperties\n) -&gt; bool:\n    \"\"\"\n    Check if operating temperature is within material limits.\n\n    Args:\n        operating_temperature: Operating temperature (K)\n        material: Material properties\n\n    Returns:\n        True if temperature is acceptable\n    \"\"\"\n    return operating_temperature &lt;= material.max_temperature\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.calculate_bottle_mass","title":"<code>calculate_bottle_mass(diameter, length, wall_thickness, material_name='PET')</code>","text":"<p>Calculate mass of a bottle.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Bottle diameter (m)</p> required <code>length</code> <code>float</code> <p>Bottle length (m)</p> required <code>wall_thickness</code> <code>float</code> <p>Wall thickness (m)</p> required <code>material_name</code> <code>str</code> <p>Material name</p> <code>'PET'</code> <p>Returns:</p> Type Description <code>float</code> <p>Bottle mass (kg)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def calculate_bottle_mass(\n    diameter: float,\n    length: float,\n    wall_thickness: float,\n    material_name: str = \"PET\",\n) -&gt; float:\n    \"\"\"\n    Calculate mass of a bottle.\n\n    Args:\n        diameter: Bottle diameter (m)\n        length: Bottle length (m)\n        wall_thickness: Wall thickness (m)\n        material_name: Material name\n\n    Returns:\n        Bottle mass (kg)\n    \"\"\"\n    material = get_material_properties(material_name)\n    if not material:\n        raise ValueError(f\"Unknown material: {material_name}\")\n\n    # Calculate volume of material (approximation for thin walls)\n    outer_radius = diameter / 2\n    inner_radius = outer_radius - wall_thickness\n\n    # Volume of cylindrical shell\n    volume = np.pi * length * (outer_radius**2 - inner_radius**2)\n\n    # Add volume for bottle ends (approximate as flat discs)\n    end_volume = (\n        2 * np.pi * wall_thickness * (outer_radius**2 - inner_radius**2)\n    )\n\n    total_volume = volume + end_volume\n\n    return StructuralAnalysis.calculate_mass(total_volume, material)\n</code></pre>"},{"location":"api/rocket/materials/#waterrocketpy.rocket.materials.get_material_properties","title":"<code>get_material_properties(name)</code>","text":"<p>Convenience function to get material properties.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def get_material_properties(name: str) -&gt; Optional[MaterialProperties]:\n    \"\"\"Convenience function to get material properties.\"\"\"\n    return material_db.get_material(name)\n</code></pre>"},{"location":"api/utils/loader/","title":"waterrocketpy.utils.loader","text":""},{"location":"api/utils/loader/#waterrocketpy.utils.loader.load_flight_data","title":"<code>load_flight_data(path)</code>","text":"<p>Load FlightData from a .json or .npz file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Path to the .json or .npz file (without extension allowed).</p> required <p>Returns:</p> Type Description <code>FlightData</code> <p>FlightData instance reconstructed from saved data.</p> Source code in <code>waterrocketpy/utils/loader.py</code> <pre><code>def load_flight_data(path: Union[str, Path]) -&gt; FlightData:\n    \"\"\"\n    Load FlightData from a .json or .npz file.\n\n    Args:\n        path: Path to the .json or .npz file (without extension allowed).\n\n    Returns:\n        FlightData instance reconstructed from saved data.\n    \"\"\"\n    path = Path(path)\n    if path.suffix == \"\":\n        if (path.with_suffix(\".json\")).exists():\n            path = path.with_suffix(\".json\")\n        elif (path.with_suffix(\".npz\")).exists():\n            path = path.with_suffix(\".npz\")\n        else:\n            raise FileNotFoundError(\n                \"Neither .json nor .npz file found for base path.\"\n            )\n\n    if path.suffix == \".json\":\n        with open(path, \"r\") as f:\n            data = json.load(f)\n        fd_fields = FlightData.__dataclass_fields__.keys()\n        init_args = {\n            key: (\n                np.array(value)\n                if isinstance(\n                    FlightData.__dataclass_fields__[key].type, type(np.ndarray)\n                )\n                else value\n            )\n            for key, value in data.items()\n            if key in fd_fields\n        }\n        return FlightData(**init_args)\n\n    elif path.suffix == \".npz\":\n        loaded = np.load(path, allow_pickle=False)\n        init_args = {\n            key: loaded[key]\n            for key in FlightData.__dataclass_fields__.keys()\n            if key in loaded\n        }\n        return FlightData(**init_args)\n\n    else:\n        raise ValueError(\"Unsupported file extension. Use .json or .npz.\")\n</code></pre>"},{"location":"api/utils/loader/#waterrocketpy.utils.loader.load_simulation_params","title":"<code>load_simulation_params(path)</code>","text":"<p>Load only the simulation parameters from a .json file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Path to the .json file (can omit extension).</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary of simulation parameters.</p> Source code in <code>waterrocketpy/utils/loader.py</code> <pre><code>def load_simulation_params(path: Union[str, Path]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Load only the simulation parameters from a .json file.\n\n    Args:\n        path: Path to the .json file (can omit extension).\n\n    Returns:\n        Dictionary of simulation parameters.\n    \"\"\"\n    path = Path(path)\n    if path.suffix == \"\":\n        path = path.with_suffix(\".json\")\n\n    if not path.exists():\n        raise FileNotFoundError(f\"No JSON file found at {path}\")\n\n    with open(path, \"r\") as f:\n        data = json.load(f)\n\n    return data.get(\"simulation_params\", {})\n</code></pre>"},{"location":"api/utils/saver/","title":"waterrocketpy.utils.saver","text":""},{"location":"api/utils/saver/#waterrocketpy.utils.saver.load_flight_data","title":"<code>load_flight_data(path)</code>","text":"<p>Load FlightData from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Path to the JSON file.</p> required <p>Returns:</p> Type Description <code>FlightData</code> <p>Reconstructed FlightData object.</p> Source code in <code>waterrocketpy/utils/saver.py</code> <pre><code>def load_flight_data(path: Union[str, Path]) -&gt; FlightData:\n    \"\"\"\n    Load FlightData from a JSON file.\n\n    Args:\n        path: Path to the JSON file.\n\n    Returns:\n        Reconstructed FlightData object.\n    \"\"\"\n    path = Path(path).with_suffix(\".json\")\n    with open(path, \"r\") as f:\n        json_data = json.load(f)\n\n    # Extract only FlightData fields (ignore metadata)\n    fd_fields = FlightData.__dataclass_fields__.keys()\n    init_args = {\n        key: (\n            np.array(val)\n            if isinstance(\n                FlightData.__dataclass_fields__[key].type, type(np.ndarray)\n            )\n            else val\n        )\n        for key, val in json_data.items()\n        if key in fd_fields\n    }\n\n    return FlightData(**init_args)\n</code></pre>"},{"location":"api/utils/saver/#waterrocketpy.utils.saver.save_flight_data","title":"<code>save_flight_data(data, path, include_metadata=True)</code>","text":"<p>Save FlightData to JSON and NPZ formats.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>FlightData</code> <p>The FlightData object to save.</p> required <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Base path (without extension) for saving files.</p> required <code>include_metadata</code> <code>bool</code> <p>If True, includes simulation parameters in the JSON file.</p> <code>True</code> Source code in <code>waterrocketpy/utils/saver.py</code> <pre><code>def save_flight_data(\n    data: FlightData, path: Union[str, Path], include_metadata: bool = True\n) -&gt; None:\n    \"\"\"\n    Save FlightData to JSON and NPZ formats.\n\n    Args:\n        data: The FlightData object to save.\n        path: Base path (without extension) for saving files.\n        include_metadata: If True, includes simulation parameters in the JSON file.\n    \"\"\"\n    path = Path(path)\n\n    # Convert arrays to lists for JSON serialization\n    json_data = {\n        key: val.tolist() if isinstance(val, np.ndarray) else val\n        for key, val in asdict(data).items()\n    }\n\n    # Add simulation parameters if available and requested\n    if include_metadata and hasattr(data, \"to_simulation_params\"):\n        try:\n            json_data[\"simulation_params\"] = data.to_simulation_params()\n        except Exception as e:\n            print(f\"Warning: Could not extract simulation parameters: {e}\")\n\n    # Save as JSON\n    json_file = path.with_suffix(\".json\")\n    with open(json_file, \"w\") as f:\n        json.dump(json_data, f, indent=2)\n\n    # Save as compressed NPZ\n    npz_file = path.with_suffix(\".npz\")\n    np.savez_compressed(\n        npz_file,\n        **{\n            key: val\n            for key, val in asdict(data).items()\n            if isinstance(val, np.ndarray)\n        },\n    )\n\n    print(f\"Saved FlightData to {json_file} and {npz_file}\")\n</code></pre>"},{"location":"api/visualization/flight_animation/","title":"waterrocketpy.visualization.flight_animation","text":""},{"location":"api/visualization/parameter_explorer/","title":"waterrocketpy.visualization.parameter_explorer","text":"<p>Water Rocket Parameter Exploration Tool</p> <p>This script provides comprehensive parameter exploration capabilities for water rocket simulations. Features: - Parameter sweeping with configurable ranges - Multi-parameter analysis with 2D plotting - Sensitivity analysis (derivatives) - Extensible design for adding new parameters and targets - Robust error handling and progress tracking</p>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ExplorationResult","title":"<code> ExplorationResult        </code>  <code>dataclass</code>","text":"<p>Results from parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>@dataclass\nclass ExplorationResult:\n    \"\"\"Results from parameter exploration.\"\"\"\n\n    parameter_names: List[str]\n    parameter_values: Dict[str, np.ndarray]\n    target_values: np.ndarray\n    target_name: str\n    target_unit: str\n    base_target_value: float\n    sensitivity_analysis: Dict[str, float]\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterConfig","title":"<code> ParameterConfig        </code>  <code>dataclass</code>","text":"<p>Configuration for a parameter to explore.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>@dataclass\nclass ParameterConfig:\n    \"\"\"Configuration for a parameter to explore.\"\"\"\n\n    name: str\n    base_value: float\n    min_factor: float = 0.5  # minimum as factor of base value\n    max_factor: float = 2.0  # maximum as factor of base value\n    num_points: int = 10  # number of points to sample\n    unit: str = \"\"  # unit for display\n\n    @property\n    def min_value(self) -&gt; float:\n        return self.base_value * self.min_factor\n\n    @property\n    def max_value(self) -&gt; float:\n        return self.base_value * self.max_factor\n\n    @property\n    def values(self) -&gt; np.ndarray:\n        return np.linspace(self.min_value, self.max_value, self.num_points)\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer","title":"<code> ParameterExplorer        </code>","text":"<p>Main class for water rocket parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>class ParameterExplorer:\n    \"\"\"Main class for water rocket parameter exploration.\"\"\"\n\n    def __init__(self,verbose: bool = False):\n        self.verbose = verbose  # Enable verbose output for debugging\n        self.simulator = WaterRocketSimulator(verbose=self.verbose)\n\n\n        # Define available target extractors\n        self.target_extractors = {\n            \"apogee\": (\"max_altitude\", \"m\", \"Maximum Altitude\"),\n            \"max_velocity\": (\"max_velocity\", \"m/s\", \"Maximum Velocity\"),\n            \"flight_time\": (\"flight_time\", \"s\", \"Flight Time\"),\n            \"water_depletion_time\": (\n                \"water_depletion_time\",\n                \"s\",\n                \"Water Depletion Time\",\n            ),\n            \"air_depletion_time\": (\n                \"air_depletion_time\",\n                \"s\",\n                \"Air Depletion Time\",\n            ),\n        }\n\n        # Define parameter mappings - maps explorer parameter names to simulation parameter keys\n        # Format: 'explorer_name': ('sim_param_key', 'display_name', 'unit',\n        # default_range)\n        self.parameter_mappings = {\n            # Pressure and initial conditions\n            \"initial_pressure\": (\n                \"P0\",\n                \"Initial Pressure\",\n                \"Pa\",\n                {\"min_factor\": 0.3, \"max_factor\": 3.0},\n            ),\n            \"pressure\": (\n                \"P0\",\n                \"Initial Pressure\",\n                \"Pa\",\n                {\"min_factor\": 0.3, \"max_factor\": 3.0},\n            ),  # alias\n            # Water and mass parameters\n            \"water_fraction\": (\n                \"water_fraction\",\n                \"Water Fraction\",\n                \"-\",\n                {\"min_factor\": 0.3, \"max_factor\": 2.5},\n            ),\n            # Nozzle parameters\n            \"nozzle_area\": (\n                \"A_nozzle\",\n                \"Nozzle Area\",\n                \"m\u00b2\",\n                {\"min_factor\": 0.4, \"max_factor\": 3.0},\n            ),\n            \"nozzle_diameter\": (\n                \"A_nozzle\",\n                \"Nozzle Diameter\",\n                \"m\",\n                {\n                    \"min_factor\": 0.5,\n                    \"max_factor\": 2.5,\n                    \"convert_func\": self._diameter_to_area,\n                },\n            ),\n            \"nozzle_discharge_coefficient\": (\n                \"C_d\",\n                \"Nozzle Discharge Coefficient\",\n                \"-\",\n                {\"min_factor\": 0.5, \"max_factor\": 1.5},\n            ),\n            # Bottle parameters\n            \"bottle_volume\": (\n                \"V_bottle\",\n                \"Bottle Volume\",\n                \"m\u00b3\",\n                {\"min_factor\": 0.5, \"max_factor\": 2.0},\n            ),\n            # Mass parameters\n            \"empty_mass\": (\n                \"m_empty\",\n                \"Empty Mass\",\n                \"kg\",\n                {\"min_factor\": 0.5, \"max_factor\": 2.0},\n            ),\n            # Aerodynamic parameters\n            \"drag_coefficient\": (\n                \"C_drag\",\n                \"Drag Coefficient\",\n                \"-\",\n                {\"min_factor\": 0.3, \"max_factor\": 3.0},\n            ),\n            \"reference_area\": (\n                \"A_rocket\",\n                \"Reference Area\",\n                \"m\u00b2\",\n                {\"min_factor\": 0.5, \"max_factor\": 2.0},\n            ),\n            \"rocket_diameter\": (\n                \"A_rocket\",\n                \"Rocket Diameter\",\n                \"m\",\n                {\n                    \"min_factor\": 0.7,\n                    \"max_factor\": 1.5,\n                    \"convert_func\": self._diameter_to_area,\n                },\n            ),\n            # Liquid gas\n            \"liquid_gas_mass\": (\n                \"liquid_gas_mass\",\n                \"Liquid Gas Mass\",\n                \"kg\",\n                {\"min_factor\": 0.0, \"max_factor\": 10.0},\n            ),\n        }\n\n    def _diameter_to_area(self, diameter: float) -&gt; float:\n        \"\"\"Convert diameter to circular area.\"\"\"\n        return np.pi * (diameter / 2) ** 2\n\n    def _update_parameter(\n        self, params: Dict[str, Any], explorer_param_name: str, value: float\n    ):\n        \"\"\"Generic parameter updater using the parameter mappings.\"\"\"\n        if explorer_param_name not in self.parameter_mappings:\n            raise ValueError(f\"Unknown parameter: {explorer_param_name}\")\n\n        mapping = self.parameter_mappings[explorer_param_name]\n        sim_param_key = mapping[0]\n\n        # Apply conversion function if specified\n        if len(mapping) &gt; 4 and \"convert_func\" in mapping[4]:\n            convert_func = mapping[4][\"convert_func\"]\n            converted_value = convert_func(value)\n        else:\n            converted_value = value\n\n        # Apply parameter-specific constraints\n        if explorer_param_name == \"water_fraction\":\n            converted_value = np.clip(converted_value, 0.01, 0.99)\n        elif \"area\" in explorer_param_name.lower():\n            converted_value = max(\n                converted_value, 1e-6\n            )  # Prevent zero/negative areas\n        elif \"mass\" in explorer_param_name.lower():\n            converted_value = max(\n                converted_value, 0.0\n            )  # Prevent negative mass\n        elif \"pressure\" in explorer_param_name.lower():\n            converted_value = max(\n                converted_value, ATMOSPHERIC_PRESSURE\n            )  # Minimum atmospheric pressure\n\n        # Debug output\n        old_value = params.get(sim_param_key, \"NOT FOUND\")\n        if(self.verbose):\n            print(f\"Debug - Updating {explorer_param_name} -&gt; {sim_param_key}\")\n            print(f\"Debug - Old value: {old_value}\")\n            print(f\"Debug - New value: {converted_value}\") \n\n\n        params[sim_param_key] = converted_value\n\n    def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n        \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n        # Convert rocket to simulation parameters to get the base values\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        base_params = {}\n\n        print(\"Debug - Available simulation parameters:\")\n        for key, value in sim_params.items():\n            print(f\"  {key}: {value}\")\n\n        # Extract parameters based on our mappings\n        for (\n            explorer_param_name,\n            mapping_info,\n        ) in self.parameter_mappings.items():\n            sim_param_key = mapping_info[0]\n\n            if sim_param_key in sim_params:\n                value = sim_params[sim_param_key]\n\n                # Convert area back to diameter if needed\n                if (\n                    \"diameter\" in explorer_param_name\n                    and \"area\" in sim_param_key.lower()\n                ):\n                    # Convert area to diameter: A = \u03c0(d/2)\u00b2, so d = 2\u221a(A/\u03c0)\n                    value = 2 * np.sqrt(value / np.pi)\n\n                base_params[explorer_param_name] = value\n\n        print(\"\\nDebug - Extracted base parameters:\")\n        for key, value in base_params.items():\n            print(f\"  {key}: {value}\")\n\n        return base_params\n\n    def create_parameter_configs(\n        self,\n        base_params: Dict[str, float],\n        parameter_names: List[str],\n        custom_ranges: Dict[str, Dict] = None,\n    ) -&gt; Dict[str, ParameterConfig]:\n        \"\"\"Create parameter configurations for exploration.\"\"\"\n        configs = {}\n\n        for param_name in parameter_names:\n            if param_name not in base_params:\n                raise ValueError(\n                    f\"Parameter '{param_name}' not found in base parameters. Available: {list(base_params.keys())}\"\n                )\n\n            if param_name not in self.parameter_mappings:\n                raise ValueError(\n                    f\"Parameter '{param_name}' not defined in parameter mappings. Available: {list(self.parameter_mappings.keys())}\"\n                )\n\n            # Get mapping info\n            mapping = self.parameter_mappings[param_name]\n            sim_param_key, display_name, unit = mapping[:3]\n            default_range = mapping[4] if len(mapping) &gt; 4 else {}\n\n            # Apply custom ranges if provided\n            if custom_ranges and param_name in custom_ranges:\n                range_config = {**default_range, **custom_ranges[param_name]}\n            else:\n                range_config = default_range\n\n            configs[param_name] = ParameterConfig(\n                name=param_name,\n                base_value=base_params[param_name],\n                unit=unit,\n                **{\n                    k: v\n                    for k, v in range_config.items()\n                    if k != \"convert_func\"\n                },\n            )\n\n        return configs\n\n    def simulate_single_point(\n        self,\n        base_rocket,\n        param_values: Dict[str, float],\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; Optional[Any]:\n        \"\"\"Simulate a single parameter point.\"\"\"\n        try:\n            # Create a copy of the base rocket parameters\n            builder = RocketBuilder.from_dict(base_rocket.__dict__)\n            sim_params = builder.to_simulation_params()\n            if(self.verbose):\n                print(f\"Debug - Simulating with param_values: {param_values}\")\n                print(\n                    f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n                )\n\n            # Update parameters using the generic updater\n            for param_name, value in param_values.items():\n                self._update_parameter(sim_params, param_name, value)\n            if(self.verbose):\n                print(\n                    f\"Debug - Updated sim_params keys: {list(sim_params.keys())}\"\n                )\n\n            # Default simulation settings\n            if sim_settings is None:\n                sim_settings = {\n                    \"max_time\": 15.0,\n                    \"time_step\": 0.01,\n                    \"solver\": \"RK45\",\n                }\n\n            # Run simulation\n            flight_data = self.simulator.simulate(sim_params, sim_settings)\n            return flight_data\n\n        except Exception as e:\n            warnings.warn(\n                f\"Simulation failed for parameters {param_values}: {e}\"\n            )\n            print(f\"Debug - Exception details: {type(e).__name__}: {e}\")\n            import traceback\n\n            traceback.print_exc()\n            return None\n\n    def explore_single_parameter(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; ExplorationResult:\n        \"\"\"Explore a single parameter.\"\"\"\n        print(f\"Exploring parameter: {param_config.name}\")\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        # Explore parameter range\n        target_values = []\n        valid_param_values = []\n\n        for param_value in param_config.values:\n            flight_data = self.simulate_single_point(\n                base_rocket, {param_config.name: param_value}, sim_settings\n            )\n\n            if flight_data is not None:\n                target_values.append(getattr(flight_data, target_attr))\n                valid_param_values.append(param_value)\n            else:\n                target_values.append(np.nan)\n                valid_param_values.append(param_value)\n\n        # Calculate sensitivity (numerical derivative at base value)\n        sensitivity = self._calculate_sensitivity(\n            base_rocket, param_config, target, base_target_value, sim_settings\n        )\n\n        return ExplorationResult(\n            parameter_names=[param_config.name],\n            parameter_values={param_config.name: np.array(valid_param_values)},\n            target_values=np.array(target_values),\n            target_name=target_display,\n            target_unit=target_unit,\n            base_target_value=base_target_value,\n            sensitivity_analysis={param_config.name: sensitivity},\n        )\n\n    def explore_multiple_parameters(\n        self,\n        base_rocket,\n        param_configs: Dict[str, ParameterConfig],\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n        use_parallel: bool = True,\n    ) -&gt; List[ExplorationResult]:\n        \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n        print(\n            f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n        )\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        results = []\n        param_names = list(param_configs.keys())\n\n        # Generate all pairwise combinations\n        for param1_name, param2_name in combinations(param_names, 2):\n            print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n            param1_config = param_configs[param1_name]\n            param2_config = param_configs[param2_name]\n\n            # Create parameter grids\n            p1_values = param1_config.values\n            p2_values = param2_config.values\n            P1, P2 = np.meshgrid(p1_values, p2_values)\n\n            target_grid = np.full_like(P1, np.nan)\n\n            # Simulate all combinations\n            total_sims = P1.size\n            completed_sims = 0\n\n            for i in range(P1.shape[0]):\n                for j in range(P1.shape[1]):\n                    param_values = {\n                        param1_name: P1[i, j],\n                        param2_name: P2[i, j],\n                    }\n\n                    flight_data = self.simulate_single_point(\n                        base_rocket, param_values, sim_settings\n                    )\n\n                    if flight_data is not None:\n                        target_grid[i, j] = getattr(flight_data, target_attr)\n\n                    completed_sims += 1\n                    if completed_sims % 10 == 0:\n                        print(\n                            f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                        )\n\n            # Calculate sensitivities for both parameters\n            sensitivity1 = self._calculate_sensitivity(\n                base_rocket,\n                param1_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n            sensitivity2 = self._calculate_sensitivity(\n                base_rocket,\n                param2_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n\n            results.append(\n                ExplorationResult(\n                    parameter_names=[param1_name, param2_name],\n                    parameter_values={\n                        param1_name: p1_values,\n                        param2_name: p2_values,\n                    },\n                    target_values=target_grid,\n                    target_name=target_display,\n                    target_unit=target_unit,\n                    base_target_value=base_target_value,\n                    sensitivity_analysis={\n                        param1_name: sensitivity1,\n                        param2_name: sensitivity2,\n                    },\n                )\n            )\n\n        return results\n\n    def _calculate_sensitivity(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str,\n        base_target_value: float,\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; float:\n        \"\"\"Calculate sensitivity (numerical derivative) of target with respect to parameter.\"\"\"\n        target_attr, _, _ = self.target_extractors[target]\n\n        # Small perturbation (1% of base value)\n        delta = param_config.base_value * 0.01\n\n        # Simulate with positive perturbation\n        plus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value + delta},\n            sim_settings,\n        )\n\n        # Simulate with negative perturbation\n        minus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value - delta},\n            sim_settings,\n        )\n\n        if plus_flight_data is not None and minus_flight_data is not None:\n            plus_value = getattr(plus_flight_data, target_attr)\n            minus_value = getattr(minus_flight_data, target_attr)\n\n            # Central difference\n            sensitivity = (plus_value - minus_value) / (2 * delta)\n        else:\n            # Fallback to one-sided difference\n            if plus_flight_data is not None:\n                plus_value = getattr(plus_flight_data, target_attr)\n                sensitivity = (plus_value - base_target_value) / delta\n            elif minus_flight_data is not None:\n                minus_value = getattr(minus_flight_data, target_attr)\n                sensitivity = (base_target_value - minus_value) / delta\n            else:\n                sensitivity = 0.0\n\n        return sensitivity\n\n    def plot_results(\n        self, results: List[ExplorationResult], save_plots: bool = False\n    ):\n        \"\"\"Create plots for exploration results.\"\"\"\n\n        for i, result in enumerate(results):\n            if len(result.parameter_names) == 1:\n                self._plot_single_parameter(result, save_plots, i)\n            elif len(result.parameter_names) == 2:\n                self._plot_two_parameters(result, save_plots, i)\n\n    def _plot_single_parameter(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for single parameter exploration.\"\"\"\n        param_name = result.parameter_names[0]\n        param_values = result.parameter_values[param_name]\n\n        plt.figure(figsize=(10, 6))\n\n        # Remove NaN values for plotting\n        mask = ~np.isnan(result.target_values)\n        x_vals = param_values[mask]\n        y_vals = result.target_values[mask]\n\n        plt.plot(x_vals, y_vals, \"o-\", linewidth=2, markersize=6)\n        plt.axhline(\n            y=result.base_target_value,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Base Value\",\n        )\n\n        plt.xlabel(f'{param_name.replace(\"_\", \" \").title()}')\n        plt.ylabel(f\"{result.target_name} ({result.target_unit})\")\n        plt.title(\n            f'{result.target_name} vs {param_name.replace(\"_\", \" \").title()}'\n        )\n        plt.grid(True, alpha=0.3)\n        plt.legend()\n\n        # Add sensitivity annotation\n        sensitivity = result.sensitivity_analysis[param_name]\n        plt.text(\n            0.05,\n            0.95,\n            f\"Sensitivity: {sensitivity:.2e} {result.target_unit}/unit\",\n            transform=plt.gca().transAxes,\n            verticalalignment=\"top\",\n            bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.8),\n        )\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def _plot_two_parameters(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for two parameter exploration.\"\"\"\n        param1_name, param2_name = result.parameter_names\n        param1_values = result.parameter_values[param1_name]\n        param2_values = result.parameter_values[param2_name]\n\n        # Create 2D contour plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n\n        # Contour plot\n        P1, P2 = np.meshgrid(param1_values, param2_values)\n        contour = ax1.contour(\n            P1,\n            P2,\n            result.target_values,\n            levels=15,\n            colors=\"black\",\n            alpha=0.5,\n            linewidths=0.5,\n        )\n        contourf = ax1.contourf(\n            P1, P2, result.target_values, levels=20, cmap=\"viridis\", alpha=0.8\n        )\n        ax1.clabel(contour, inline=True, fontsize=8)\n\n        cbar1 = plt.colorbar(contourf, ax=ax1)\n        cbar1.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        ax1.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax1.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax1.set_title(f\"{result.target_name} Contour Map\")\n        ax1.grid(True, alpha=0.3)\n\n        # 3D surface plot\n        from mpl_toolkits.mplot3d import Axes3D\n\n        ax2 = fig.add_subplot(122, projection=\"3d\")\n\n        surface = ax2.plot_surface(\n            P1, P2, result.target_values, cmap=\"viridis\", alpha=0.8\n        )\n        ax2.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax2.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax2.set_zlabel(f\"{result.target_name} ({result.target_unit})\")\n        ax2.set_title(f\"{result.target_name} Surface\")\n\n        cbar2 = plt.colorbar(surface, ax=ax2, shrink=0.5)\n        cbar2.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param1_name}_{param2_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def get_available_parameters(self) -&gt; Dict[str, str]:\n        \"\"\"Get list of available parameters and their descriptions.\"\"\"\n        available = {}\n        for param_name, mapping in self.parameter_mappings.items():\n            sim_param_key, display_name, unit = mapping[:3]\n            available[param_name] = (\n                f\"{display_name} ({unit}) -&gt; {sim_param_key}\"\n            )\n        return available\n\n    def add_parameter_mapping(\n        self,\n        explorer_name: str,\n        sim_param_key: str,\n        display_name: str,\n        unit: str,\n        range_config: Dict = None,\n        convert_func: Callable = None,\n    ):\n        \"\"\"Add a new parameter mapping for exploration.\n\n        Args:\n            explorer_name: Name used in the explorer (e.g., 'nozzle_diameter')\n            sim_param_key: Key in simulation parameters (e.g., 'A_nozzle')\n            display_name: Human-readable name for plots\n            unit: Unit for display\n            range_config: Dictionary with 'min_factor', 'max_factor', etc.\n            convert_func: Optional function to convert explorer value to sim value\n        \"\"\"\n        mapping = [sim_param_key, display_name, unit]\n        if range_config or convert_func:\n            config = range_config or {}\n            if convert_func:\n                config[\"convert_func\"] = convert_func\n            mapping.append(config)\n\n        self.parameter_mappings[explorer_name] = tuple(mapping)\n\n\n\n\n    def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n        \"\"\"Print sensitivity analysis results.\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"SENSITIVITY ANALYSIS\")\n        print(\"=\" * 60)\n\n        all_sensitivities = {}\n\n        for result in results:\n            for param_name, sensitivity in result.sensitivity_analysis.items():\n                if param_name not in all_sensitivities:\n                    all_sensitivities[param_name] = []\n                all_sensitivities[param_name].append(abs(sensitivity))\n\n        # Average sensitivities and sort by magnitude\n        avg_sensitivities = {\n            name: np.mean(values) for name, values in all_sensitivities.items()\n        }\n        sorted_params = sorted(\n            avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n        )\n\n        print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            unit = results[0].target_unit\n            print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n        # Relative importance\n        max_sensitivity = (\n            max(avg_sensitivities.values()) if avg_sensitivities else 1\n        )\n\n        print(\n            f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n        )\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            relative = avg_sensitivity / max_sensitivity * 100\n            print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.add_parameter_mapping","title":"<code>add_parameter_mapping(self, explorer_name, sim_param_key, display_name, unit, range_config=None, convert_func=None)</code>","text":"<p>Add a new parameter mapping for exploration.</p> <p>Parameters:</p> Name Type Description Default <code>explorer_name</code> <code>str</code> <p>Name used in the explorer (e.g., 'nozzle_diameter')</p> required <code>sim_param_key</code> <code>str</code> <p>Key in simulation parameters (e.g., 'A_nozzle')</p> required <code>display_name</code> <code>str</code> <p>Human-readable name for plots</p> required <code>unit</code> <code>str</code> <p>Unit for display</p> required <code>range_config</code> <code>Dict</code> <p>Dictionary with 'min_factor', 'max_factor', etc.</p> <code>None</code> <code>convert_func</code> <code>Callable</code> <p>Optional function to convert explorer value to sim value</p> <code>None</code> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def add_parameter_mapping(\n    self,\n    explorer_name: str,\n    sim_param_key: str,\n    display_name: str,\n    unit: str,\n    range_config: Dict = None,\n    convert_func: Callable = None,\n):\n    \"\"\"Add a new parameter mapping for exploration.\n\n    Args:\n        explorer_name: Name used in the explorer (e.g., 'nozzle_diameter')\n        sim_param_key: Key in simulation parameters (e.g., 'A_nozzle')\n        display_name: Human-readable name for plots\n        unit: Unit for display\n        range_config: Dictionary with 'min_factor', 'max_factor', etc.\n        convert_func: Optional function to convert explorer value to sim value\n    \"\"\"\n    mapping = [sim_param_key, display_name, unit]\n    if range_config or convert_func:\n        config = range_config or {}\n        if convert_func:\n            config[\"convert_func\"] = convert_func\n        mapping.append(config)\n\n    self.parameter_mappings[explorer_name] = tuple(mapping)\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.create_parameter_configs","title":"<code>create_parameter_configs(self, base_params, parameter_names, custom_ranges=None)</code>","text":"<p>Create parameter configurations for exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def create_parameter_configs(\n    self,\n    base_params: Dict[str, float],\n    parameter_names: List[str],\n    custom_ranges: Dict[str, Dict] = None,\n) -&gt; Dict[str, ParameterConfig]:\n    \"\"\"Create parameter configurations for exploration.\"\"\"\n    configs = {}\n\n    for param_name in parameter_names:\n        if param_name not in base_params:\n            raise ValueError(\n                f\"Parameter '{param_name}' not found in base parameters. Available: {list(base_params.keys())}\"\n            )\n\n        if param_name not in self.parameter_mappings:\n            raise ValueError(\n                f\"Parameter '{param_name}' not defined in parameter mappings. Available: {list(self.parameter_mappings.keys())}\"\n            )\n\n        # Get mapping info\n        mapping = self.parameter_mappings[param_name]\n        sim_param_key, display_name, unit = mapping[:3]\n        default_range = mapping[4] if len(mapping) &gt; 4 else {}\n\n        # Apply custom ranges if provided\n        if custom_ranges and param_name in custom_ranges:\n            range_config = {**default_range, **custom_ranges[param_name]}\n        else:\n            range_config = default_range\n\n        configs[param_name] = ParameterConfig(\n            name=param_name,\n            base_value=base_params[param_name],\n            unit=unit,\n            **{\n                k: v\n                for k, v in range_config.items()\n                if k != \"convert_func\"\n            },\n        )\n\n    return configs\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.explore_multiple_parameters","title":"<code>explore_multiple_parameters(self, base_rocket, param_configs, target='apogee', sim_settings=None, use_parallel=True)</code>","text":"<p>Explore multiple parameters with pairwise combinations.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def explore_multiple_parameters(\n    self,\n    base_rocket,\n    param_configs: Dict[str, ParameterConfig],\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n    use_parallel: bool = True,\n) -&gt; List[ExplorationResult]:\n    \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n    print(\n        f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n    )\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    results = []\n    param_names = list(param_configs.keys())\n\n    # Generate all pairwise combinations\n    for param1_name, param2_name in combinations(param_names, 2):\n        print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n        param1_config = param_configs[param1_name]\n        param2_config = param_configs[param2_name]\n\n        # Create parameter grids\n        p1_values = param1_config.values\n        p2_values = param2_config.values\n        P1, P2 = np.meshgrid(p1_values, p2_values)\n\n        target_grid = np.full_like(P1, np.nan)\n\n        # Simulate all combinations\n        total_sims = P1.size\n        completed_sims = 0\n\n        for i in range(P1.shape[0]):\n            for j in range(P1.shape[1]):\n                param_values = {\n                    param1_name: P1[i, j],\n                    param2_name: P2[i, j],\n                }\n\n                flight_data = self.simulate_single_point(\n                    base_rocket, param_values, sim_settings\n                )\n\n                if flight_data is not None:\n                    target_grid[i, j] = getattr(flight_data, target_attr)\n\n                completed_sims += 1\n                if completed_sims % 10 == 0:\n                    print(\n                        f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                    )\n\n        # Calculate sensitivities for both parameters\n        sensitivity1 = self._calculate_sensitivity(\n            base_rocket,\n            param1_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n        sensitivity2 = self._calculate_sensitivity(\n            base_rocket,\n            param2_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n\n        results.append(\n            ExplorationResult(\n                parameter_names=[param1_name, param2_name],\n                parameter_values={\n                    param1_name: p1_values,\n                    param2_name: p2_values,\n                },\n                target_values=target_grid,\n                target_name=target_display,\n                target_unit=target_unit,\n                base_target_value=base_target_value,\n                sensitivity_analysis={\n                    param1_name: sensitivity1,\n                    param2_name: sensitivity2,\n                },\n            )\n        )\n\n    return results\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.explore_single_parameter","title":"<code>explore_single_parameter(self, base_rocket, param_config, target='apogee', sim_settings=None)</code>","text":"<p>Explore a single parameter.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def explore_single_parameter(\n    self,\n    base_rocket,\n    param_config: ParameterConfig,\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n) -&gt; ExplorationResult:\n    \"\"\"Explore a single parameter.\"\"\"\n    print(f\"Exploring parameter: {param_config.name}\")\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    # Explore parameter range\n    target_values = []\n    valid_param_values = []\n\n    for param_value in param_config.values:\n        flight_data = self.simulate_single_point(\n            base_rocket, {param_config.name: param_value}, sim_settings\n        )\n\n        if flight_data is not None:\n            target_values.append(getattr(flight_data, target_attr))\n            valid_param_values.append(param_value)\n        else:\n            target_values.append(np.nan)\n            valid_param_values.append(param_value)\n\n    # Calculate sensitivity (numerical derivative at base value)\n    sensitivity = self._calculate_sensitivity(\n        base_rocket, param_config, target, base_target_value, sim_settings\n    )\n\n    return ExplorationResult(\n        parameter_names=[param_config.name],\n        parameter_values={param_config.name: np.array(valid_param_values)},\n        target_values=np.array(target_values),\n        target_name=target_display,\n        target_unit=target_unit,\n        base_target_value=base_target_value,\n        sensitivity_analysis={param_config.name: sensitivity},\n    )\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.extract_base_parameters","title":"<code>extract_base_parameters(self, rocket)</code>","text":"<p>Extract base parameter values from a rocket configuration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n    \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n    # Convert rocket to simulation parameters to get the base values\n    builder = RocketBuilder.from_dict(rocket.__dict__)\n    sim_params = builder.to_simulation_params()\n\n    base_params = {}\n\n    print(\"Debug - Available simulation parameters:\")\n    for key, value in sim_params.items():\n        print(f\"  {key}: {value}\")\n\n    # Extract parameters based on our mappings\n    for (\n        explorer_param_name,\n        mapping_info,\n    ) in self.parameter_mappings.items():\n        sim_param_key = mapping_info[0]\n\n        if sim_param_key in sim_params:\n            value = sim_params[sim_param_key]\n\n            # Convert area back to diameter if needed\n            if (\n                \"diameter\" in explorer_param_name\n                and \"area\" in sim_param_key.lower()\n            ):\n                # Convert area to diameter: A = \u03c0(d/2)\u00b2, so d = 2\u221a(A/\u03c0)\n                value = 2 * np.sqrt(value / np.pi)\n\n            base_params[explorer_param_name] = value\n\n    print(\"\\nDebug - Extracted base parameters:\")\n    for key, value in base_params.items():\n        print(f\"  {key}: {value}\")\n\n    return base_params\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.get_available_parameters","title":"<code>get_available_parameters(self)</code>","text":"<p>Get list of available parameters and their descriptions.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def get_available_parameters(self) -&gt; Dict[str, str]:\n    \"\"\"Get list of available parameters and their descriptions.\"\"\"\n    available = {}\n    for param_name, mapping in self.parameter_mappings.items():\n        sim_param_key, display_name, unit = mapping[:3]\n        available[param_name] = (\n            f\"{display_name} ({unit}) -&gt; {sim_param_key}\"\n        )\n    return available\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.plot_results","title":"<code>plot_results(self, results, save_plots=False)</code>","text":"<p>Create plots for exploration results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def plot_results(\n    self, results: List[ExplorationResult], save_plots: bool = False\n):\n    \"\"\"Create plots for exploration results.\"\"\"\n\n    for i, result in enumerate(results):\n        if len(result.parameter_names) == 1:\n            self._plot_single_parameter(result, save_plots, i)\n        elif len(result.parameter_names) == 2:\n            self._plot_two_parameters(result, save_plots, i)\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.print_sensitivity_analysis","title":"<code>print_sensitivity_analysis(self, results)</code>","text":"<p>Print sensitivity analysis results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n    \"\"\"Print sensitivity analysis results.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"SENSITIVITY ANALYSIS\")\n    print(\"=\" * 60)\n\n    all_sensitivities = {}\n\n    for result in results:\n        for param_name, sensitivity in result.sensitivity_analysis.items():\n            if param_name not in all_sensitivities:\n                all_sensitivities[param_name] = []\n            all_sensitivities[param_name].append(abs(sensitivity))\n\n    # Average sensitivities and sort by magnitude\n    avg_sensitivities = {\n        name: np.mean(values) for name, values in all_sensitivities.items()\n    }\n    sorted_params = sorted(\n        avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n    )\n\n    print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        unit = results[0].target_unit\n        print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n    # Relative importance\n    max_sensitivity = (\n        max(avg_sensitivities.values()) if avg_sensitivities else 1\n    )\n\n    print(\n        f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n    )\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        relative = avg_sensitivity / max_sensitivity * 100\n        print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.simulate_single_point","title":"<code>simulate_single_point(self, base_rocket, param_values, sim_settings=None)</code>","text":"<p>Simulate a single parameter point.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def simulate_single_point(\n    self,\n    base_rocket,\n    param_values: Dict[str, float],\n    sim_settings: Dict[str, Any] = None,\n) -&gt; Optional[Any]:\n    \"\"\"Simulate a single parameter point.\"\"\"\n    try:\n        # Create a copy of the base rocket parameters\n        builder = RocketBuilder.from_dict(base_rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n        if(self.verbose):\n            print(f\"Debug - Simulating with param_values: {param_values}\")\n            print(\n                f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n            )\n\n        # Update parameters using the generic updater\n        for param_name, value in param_values.items():\n            self._update_parameter(sim_params, param_name, value)\n        if(self.verbose):\n            print(\n                f\"Debug - Updated sim_params keys: {list(sim_params.keys())}\"\n            )\n\n        # Default simulation settings\n        if sim_settings is None:\n            sim_settings = {\n                \"max_time\": 15.0,\n                \"time_step\": 0.01,\n                \"solver\": \"RK45\",\n            }\n\n        # Run simulation\n        flight_data = self.simulator.simulate(sim_params, sim_settings)\n        return flight_data\n\n    except Exception as e:\n        warnings.warn(\n            f\"Simulation failed for parameters {param_values}: {e}\"\n        )\n        print(f\"Debug - Exception details: {type(e).__name__}: {e}\")\n        import traceback\n\n        traceback.print_exc()\n        return None\n</code></pre>"},{"location":"api/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.main","title":"<code>main()</code>","text":"<p>Example usage of the parameter explorer.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def main():\n    \"\"\"Example usage of the parameter explorer.\"\"\"\n\n    print(\"=== Water Rocket Parameter Explorer ===\\n\")\n\n    # Create base rocket configuration\n    print(\"1. Creating base rocket configuration...\")\n    base_rocket = create_standard_rocket()\n    print(f\"   Base rocket: {base_rocket.name}\")\n\n    # Initialize explorer\n    explorer = ParameterExplorer()\n\n    # Extract base parameters\n    base_params = explorer.extract_base_parameters(base_rocket)\n    print(\"\\n2. Base parameters:\")\n    for name, value in base_params.items():\n        print(f\"   {name}: {value}\")\n\n    # Define parameters to explore - now using correct parameter names\n    parameters_to_explore = [\n        \"initial_pressure\",\n        \"water_fraction\",\n        \"nozzle_diameter\",\n    ]\n    target_metric = \"apogee\"\n\n    print(f\"\\n3. Available parameters:\")\n    available_params = explorer.get_available_parameters()\n    for name, description in available_params.items():\n        print(f\"   {name}: {description}\")\n\n    print(f\"\\n4. Exploring parameters: {parameters_to_explore}\")\n    print(f\"   Target metric: {target_metric}\")\n\n    # Create parameter configurations\n    param_configs = explorer.create_parameter_configs(\n        base_params,\n        parameters_to_explore,\n        custom_ranges={\n            \"initial_pressure\": {\n                \"min_factor\": 0.4,\n                \"max_factor\": 2.5,\n                \"num_points\": 8,\n            },\n            \"water_fraction\": {\n                \"min_factor\": 0.5,\n                \"max_factor\": 1.8,\n                \"num_points\": 8,\n            },\n            \"nozzle_diameter\": {\n                \"min_factor\": 0.6,\n                \"max_factor\": 2.0,\n                \"num_points\": 8,\n            },\n        },\n    )\n\n    # Run exploration\n    print(\"\\n5. Running parameter exploration...\")\n    results = explorer.explore_multiple_parameters(\n        base_rocket,\n        param_configs,\n        target=target_metric,\n        sim_settings={\"max_time\": 20.0, \"time_step\": 0.01},\n    )\n\n    # Display results\n    print(f\"\\n6. Generated {len(results)} result sets\")\n\n    # Create plots\n    print(\"\\n7. Creating plots...\")\n    explorer.plot_results(results)\n\n    # Print sensitivity analysis\n    explorer.print_sensitivity_analysis(results)\n\n    print(\"\\nExploration complete!\")\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/","title":"waterrocketpy.visualization.parameter_explorer_debugging","text":"<p>Water Rocket Parameter Exploration Tool</p> <p>This script provides comprehensive parameter exploration capabilities for water rocket simulations. Features: - Parameter sweeping with configurable ranges - Multi-parameter analysis with 2D plotting - Sensitivity analysis (derivatives) - Extensible design for adding new parameters and targets - Robust error handling and progress tracking</p>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ExplorationResult","title":"<code> ExplorationResult        </code>  <code>dataclass</code>","text":"<p>Results from parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>@dataclass\nclass ExplorationResult:\n    \"\"\"Results from parameter exploration.\"\"\"\n\n    parameter_names: List[str]\n    parameter_values: Dict[str, np.ndarray]\n    target_values: np.ndarray\n    target_name: str\n    target_unit: str\n    base_target_value: float\n    sensitivity_analysis: Dict[str, float]\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterConfig","title":"<code> ParameterConfig        </code>  <code>dataclass</code>","text":"<p>Configuration for a parameter to explore.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>@dataclass\nclass ParameterConfig:\n    \"\"\"Configuration for a parameter to explore.\"\"\"\n\n    name: str\n    base_value: float\n    min_factor: float = 0.5  # minimum as factor of base value\n    max_factor: float = 2.0  # maximum as factor of base value\n    num_points: int = 10  # number of points to sample\n    unit: str = \"\"  # unit for display\n\n    @property\n    def min_value(self) -&gt; float:\n        return self.base_value * self.min_factor\n\n    @property\n    def max_value(self) -&gt; float:\n        return self.base_value * self.max_factor\n\n    @property\n    def values(self) -&gt; np.ndarray:\n        return np.linspace(self.min_value, self.max_value, self.num_points)\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer","title":"<code> ParameterExplorer        </code>","text":"<p>Main class for water rocket parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>class ParameterExplorer:\n    \"\"\"Main class for water rocket parameter exploration.\"\"\"\n\n    def __init__(self):\n        self.simulator = WaterRocketSimulator()\n\n        # Define available target extractors\n        self.target_extractors = {\n            \"apogee\": (\"max_altitude\", \"m\", \"Maximum Altitude\"),\n            \"max_velocity\": (\"max_velocity\", \"m/s\", \"Maximum Velocity\"),\n            \"flight_time\": (\"flight_time\", \"s\", \"Flight Time\"),\n            \"water_depletion_time\": (\n                \"water_depletion_time\",\n                \"s\",\n                \"Water Depletion Time\",\n            ),\n            \"air_depletion_time\": (\n                \"air_depletion_time\",\n                \"s\",\n                \"Air Depletion Time\",\n            ),\n        }\n\n        # Define parameter updaters - functions that modify rocket_params\n        self.parameter_updaters = {\n            \"pressure\": self._update_pressure,\n            \"water_fraction\": self._update_water_fraction,\n            \"nozzle_diameter\": self._update_nozzle_diameter,\n            \"bottle_volume\": self._update_bottle_volume,\n            \"bottle_diameter\": self._update_bottle_diameter,\n            \"empty_mass\": self._update_empty_mass,\n            \"drag_coefficient\": self._update_drag_coefficient,\n        }\n\n        # Map parameter names to simulation parameter names\n        self.param_to_sim_mapping = {\n            \"pressure\": \"initial_pressure\",\n            \"water_fraction\": \"water_fraction\",\n            \"nozzle_diameter\": \"nozzle_diameter\",\n            \"bottle_volume\": \"bottle_volume\",\n            \"bottle_diameter\": \"bottle_diameter\",\n            \"empty_mass\": \"empty_mass\",\n            \"drag_coefficient\": \"drag_coefficient\",\n        }\n\n    def _get_sim_param_name(self, param_name: str) -&gt; str:\n        \"\"\"Get the simulation parameter name for a given parameter.\"\"\"\n        return self.param_to_sim_mapping.get(param_name, param_name)\n\n    def _update_pressure(self, params: Dict, value: float):\n        \"\"\"Update initial pressure.\"\"\"\n        params[\"initial_pressure\"] = value\n\n    def _update_water_fraction(self, params: Dict, value: float):\n        \"\"\"Update water fraction.\"\"\"\n        params[\"water_fraction\"] = np.clip(\n            value, 0.01, 0.99\n        )  # Keep reasonable bounds\n\n    def _update_nozzle_diameter(self, params: Dict, value: float):\n        \"\"\"Update nozzle diameter.\"\"\"\n        params[\"nozzle_diameter\"] = value\n\n    def _update_bottle_volume(self, params: Dict, value: float):\n        \"\"\"Update bottle volume.\"\"\"\n        params[\"bottle_volume\"] = value\n\n    def _update_bottle_diameter(self, params: Dict, value: float):\n        \"\"\"Update bottle diameter.\"\"\"\n        params[\"bottle_diameter\"] = value\n\n    def _update_empty_mass(self, params: Dict, value: float):\n        \"\"\"Update empty mass.\"\"\"\n        params[\"empty_mass\"] = value\n\n    def _update_drag_coefficient(self, params: Dict, value: float):\n        \"\"\"Update drag coefficient.\"\"\"\n        params[\"drag_coefficient\"] = value\n\n    def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n        \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n        # Convert rocket to simulation parameters to get the base values\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        print(\"Debug - Available simulation parameters:\")\n        for key, value in sim_params.items():\n            print(f\"  {key}: {value}\")\n\n        base_params = {}\n\n        # Map simulation parameters to our parameter names\n        param_mapping = {\n            \"pressure\": \"initial_pressure\",\n            \"water_fraction\": \"water_fraction\",\n            \"nozzle_diameter\": \"nozzle_diameter\",\n            \"bottle_volume\": \"bottle_volume\",\n            \"bottle_diameter\": \"bottle_diameter\",\n            \"empty_mass\": \"empty_mass\",\n            \"drag_coefficient\": \"drag_coefficient\",\n        }\n\n        for param_name, sim_param_name in param_mapping.items():\n            if sim_param_name in sim_params:\n                base_params[param_name] = sim_params[sim_param_name]\n                print(f\"  Found {param_name} = {sim_params[sim_param_name]}\")\n            else:\n                # Provide reasonable defaults for missing parameters\n                defaults = {\n                    \"pressure\": 8 * ATMOSPHERIC_PRESSURE,\n                    \"water_fraction\": 0.33,\n                    \"nozzle_diameter\": 0.015,\n                    \"bottle_volume\": 0.002,\n                    \"bottle_diameter\": 0.1,\n                    \"empty_mass\": 0.25,\n                    \"drag_coefficient\": 0.5,\n                }\n                base_params[param_name] = defaults.get(param_name, 1.0)\n                print(\n                    f\"  Using default for {param_name} = {base_params[param_name]}\"\n                )\n\n        return base_params\n\n    def create_parameter_configs(\n        self,\n        base_params: Dict[str, float],\n        parameter_names: List[str],\n        custom_ranges: Dict[str, Dict] = None,\n    ) -&gt; Dict[str, ParameterConfig]:\n        \"\"\"Create parameter configurations for exploration.\"\"\"\n        configs = {}\n\n        # Default units and ranges\n        param_defaults = {\n            \"pressure\": {\"unit\": \"Pa\", \"min_factor\": 0.3, \"max_factor\": 3.0},\n            \"water_fraction\": {\n                \"unit\": \"-\",\n                \"min_factor\": 0.3,\n                \"max_factor\": 3.0,\n            },\n            \"nozzle_diameter\": {\n                \"unit\": \"m\",\n                \"min_factor\": 0.5,\n                \"max_factor\": 2.5,\n            },\n            \"bottle_volume\": {\n                \"unit\": \"m\u00b3\",\n                \"min_factor\": 0.5,\n                \"max_factor\": 2.0,\n            },\n            \"bottle_diameter\": {\n                \"unit\": \"m\",\n                \"min_factor\": 0.7,\n                \"max_factor\": 1.5,\n            },\n            \"empty_mass\": {\"unit\": \"kg\", \"min_factor\": 0.5, \"max_factor\": 2.0},\n            \"drag_coefficient\": {\n                \"unit\": \"-\",\n                \"min_factor\": 0.3,\n                \"max_factor\": 3.0,\n            },\n        }\n\n        for param_name in parameter_names:\n            if param_name not in base_params:\n                raise ValueError(\n                    f\"Parameter '{param_name}' not found in base parameters\"\n                )\n\n            # Get default settings\n            defaults = param_defaults.get(\n                param_name, {\"unit\": \"\", \"min_factor\": 0.5, \"max_factor\": 2.0}\n            )\n\n            # Apply custom ranges if provided\n            if custom_ranges and param_name in custom_ranges:\n                defaults.update(custom_ranges[param_name])\n\n            configs[param_name] = ParameterConfig(\n                name=param_name, base_value=base_params[param_name], **defaults\n            )\n\n        return configs\n\n    def simulate_single_point(\n        self,\n        base_rocket,\n        param_values: Dict[str, float],\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; Optional[Any]:\n        \"\"\"Simulate a single parameter point.\"\"\"\n        try:\n            # Create a copy of the base rocket parameters\n            builder = RocketBuilder.from_dict(base_rocket.__dict__)\n            sim_params = builder.to_simulation_params()\n\n            print(f\"Debug - Simulating with param_values: {param_values}\")\n            print(\n                f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n            )\n\n            # Update parameters\n            for param_name, value in param_values.items():\n                if param_name in self.parameter_updaters:\n                    print(f\"Debug - Updating {param_name} to {value}\")\n                    old_value = sim_params.get(\n                        self._get_sim_param_name(param_name), \"NOT FOUND\"\n                    )\n                    print(f\"Debug - Old value: {old_value}\")\n\n                    self.parameter_updaters[param_name](sim_params, value)\n\n                    new_value = sim_params.get(\n                        self._get_sim_param_name(param_name), \"NOT FOUND\"\n                    )\n                    print(f\"Debug - New value: {new_value}\")\n                else:\n                    print(\n                        f\"Warning: No updater found for parameter {param_name}\"\n                    )\n\n            # Default simulation settings\n            if sim_settings is None:\n                sim_settings = {\n                    \"max_time\": 15.0,\n                    \"time_step\": 0.01,\n                    \"solver\": \"RK45\",\n                }\n\n            # Run simulation\n            flight_data = self.simulator.simulate(sim_params, sim_settings)\n            return flight_data\n\n        except Exception as e:\n            print(f\"Error in simulate_single_point: {e}\")\n            import traceback\n\n            traceback.print_exc()\n            warnings.warn(\n                f\"Simulation failed for parameters {param_values}: {e}\"\n            )\n            return None\n\n    def explore_single_parameter(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; ExplorationResult:\n        \"\"\"Explore a single parameter.\"\"\"\n        print(f\"Exploring parameter: {param_config.name}\")\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        # Explore parameter range\n        target_values = []\n        valid_param_values = []\n\n        for param_value in param_config.values:\n            flight_data = self.simulate_single_point(\n                base_rocket, {param_config.name: param_value}, sim_settings\n            )\n\n            if flight_data is not None:\n                target_values.append(getattr(flight_data, target_attr))\n                valid_param_values.append(param_value)\n            else:\n                target_values.append(np.nan)\n                valid_param_values.append(param_value)\n\n        # Calculate sensitivity (numerical derivative at base value)\n        sensitivity = self._calculate_sensitivity(\n            base_rocket, param_config, target, base_target_value, sim_settings\n        )\n\n        return ExplorationResult(\n            parameter_names=[param_config.name],\n            parameter_values={param_config.name: np.array(valid_param_values)},\n            target_values=np.array(target_values),\n            target_name=target_display,\n            target_unit=target_unit,\n            base_target_value=base_target_value,\n            sensitivity_analysis={param_config.name: sensitivity},\n        )\n\n    def explore_multiple_parameters(\n        self,\n        base_rocket,\n        param_configs: Dict[str, ParameterConfig],\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n        use_parallel: bool = True,\n    ) -&gt; List[ExplorationResult]:\n        \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n        print(\n            f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n        )\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        results = []\n        param_names = list(param_configs.keys())\n\n        # Generate all pairwise combinations\n        for param1_name, param2_name in combinations(param_names, 2):\n            print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n            param1_config = param_configs[param1_name]\n            param2_config = param_configs[param2_name]\n\n            # Create parameter grids\n            p1_values = param1_config.values\n            p2_values = param2_config.values\n            P1, P2 = np.meshgrid(p1_values, p2_values)\n\n            target_grid = np.full_like(P1, np.nan)\n\n            # Simulate all combinations\n            total_sims = P1.size\n            completed_sims = 0\n\n            for i in range(P1.shape[0]):\n                for j in range(P1.shape[1]):\n                    param_values = {\n                        param1_name: P1[i, j],\n                        param2_name: P2[i, j],\n                    }\n\n                    flight_data = self.simulate_single_point(\n                        base_rocket, param_values, sim_settings\n                    )\n\n                    if flight_data is not None:\n                        target_grid[i, j] = getattr(flight_data, target_attr)\n\n                    completed_sims += 1\n                    if completed_sims % 10 == 0:\n                        print(\n                            f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                        )\n\n            # Calculate sensitivities for both parameters\n            sensitivity1 = self._calculate_sensitivity(\n                base_rocket,\n                param1_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n            sensitivity2 = self._calculate_sensitivity(\n                base_rocket,\n                param2_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n\n            results.append(\n                ExplorationResult(\n                    parameter_names=[param1_name, param2_name],\n                    parameter_values={\n                        param1_name: p1_values,\n                        param2_name: p2_values,\n                    },\n                    target_values=target_grid,\n                    target_name=target_display,\n                    target_unit=target_unit,\n                    base_target_value=base_target_value,\n                    sensitivity_analysis={\n                        param1_name: sensitivity1,\n                        param2_name: sensitivity2,\n                    },\n                )\n            )\n\n        return results\n\n    def _calculate_sensitivity(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str,\n        base_target_value: float,\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; float:\n        \"\"\"Calculate sensitivity (numerical derivative) of target with respect to parameter.\"\"\"\n        target_attr, _, _ = self.target_extractors[target]\n\n        # Small perturbation (1% of base value)\n        delta = param_config.base_value * 0.01\n\n        # Simulate with positive perturbation\n        plus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value + delta},\n            sim_settings,\n        )\n\n        # Simulate with negative perturbation\n        minus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value - delta},\n            sim_settings,\n        )\n\n        if plus_flight_data is not None and minus_flight_data is not None:\n            plus_value = getattr(plus_flight_data, target_attr)\n            minus_value = getattr(minus_flight_data, target_attr)\n\n            # Central difference\n            sensitivity = (plus_value - minus_value) / (2 * delta)\n        else:\n            # Fallback to one-sided difference\n            if plus_flight_data is not None:\n                plus_value = getattr(plus_flight_data, target_attr)\n                sensitivity = (plus_value - base_target_value) / delta\n            elif minus_flight_data is not None:\n                minus_value = getattr(minus_flight_data, target_attr)\n                sensitivity = (base_target_value - minus_value) / delta\n            else:\n                sensitivity = 0.0\n\n        return sensitivity\n\n    def plot_results(\n        self, results: List[ExplorationResult], save_plots: bool = False\n    ):\n        \"\"\"Create plots for exploration results.\"\"\"\n\n        for i, result in enumerate(results):\n            if len(result.parameter_names) == 1:\n                self._plot_single_parameter(result, save_plots, i)\n            elif len(result.parameter_names) == 2:\n                self._plot_two_parameters(result, save_plots, i)\n\n    def _plot_single_parameter(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for single parameter exploration.\"\"\"\n        param_name = result.parameter_names[0]\n        param_values = result.parameter_values[param_name]\n\n        plt.figure(figsize=(10, 6))\n\n        # Remove NaN values for plotting\n        mask = ~np.isnan(result.target_values)\n        x_vals = param_values[mask]\n        y_vals = result.target_values[mask]\n\n        plt.plot(x_vals, y_vals, \"o-\", linewidth=2, markersize=6)\n        plt.axhline(\n            y=result.base_target_value,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Base Value\",\n        )\n\n        plt.xlabel(f'{param_name.replace(\"_\", \" \").title()}')\n        plt.ylabel(f\"{result.target_name} ({result.target_unit})\")\n        plt.title(\n            f'{result.target_name} vs {param_name.replace(\"_\", \" \").title()}'\n        )\n        plt.grid(True, alpha=0.3)\n        plt.legend()\n\n        # Add sensitivity annotation\n        sensitivity = result.sensitivity_analysis[param_name]\n        plt.text(\n            0.05,\n            0.95,\n            f\"Sensitivity: {sensitivity:.2e} {result.target_unit}/unit\",\n            transform=plt.gca().transAxes,\n            verticalalignment=\"top\",\n            bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.8),\n        )\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def _plot_two_parameters(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for two parameter exploration.\"\"\"\n        param1_name, param2_name = result.parameter_names\n        param1_values = result.parameter_values[param1_name]\n        param2_values = result.parameter_values[param2_name]\n\n        # Create 2D contour plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n\n        # Contour plot\n        P1, P2 = np.meshgrid(param1_values, param2_values)\n        contour = ax1.contour(\n            P1,\n            P2,\n            result.target_values,\n            levels=15,\n            colors=\"black\",\n            alpha=0.5,\n            linewidths=0.5,\n        )\n        contourf = ax1.contourf(\n            P1, P2, result.target_values, levels=20, cmap=\"viridis\", alpha=0.8\n        )\n        ax1.clabel(contour, inline=True, fontsize=8)\n\n        cbar1 = plt.colorbar(contourf, ax=ax1)\n        cbar1.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        ax1.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax1.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax1.set_title(f\"{result.target_name} Contour Map\")\n        ax1.grid(True, alpha=0.3)\n\n        # 3D surface plot\n        from mpl_toolkits.mplot3d import Axes3D\n\n        ax2 = fig.add_subplot(122, projection=\"3d\")\n\n        surface = ax2.plot_surface(\n            P1, P2, result.target_values, cmap=\"viridis\", alpha=0.8\n        )\n        ax2.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax2.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax2.set_zlabel(f\"{result.target_name} ({result.target_unit})\")\n        ax2.set_title(f\"{result.target_name} Surface\")\n\n        cbar2 = plt.colorbar(surface, ax=ax2, shrink=0.5)\n        cbar2.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param1_name}_{param2_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n        \"\"\"Print sensitivity analysis results.\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"SENSITIVITY ANALYSIS\")\n        print(\"=\" * 60)\n\n        all_sensitivities = {}\n\n        for result in results:\n            for param_name, sensitivity in result.sensitivity_analysis.items():\n                if param_name not in all_sensitivities:\n                    all_sensitivities[param_name] = []\n                all_sensitivities[param_name].append(abs(sensitivity))\n\n        # Average sensitivities and sort by magnitude\n        avg_sensitivities = {\n            name: np.mean(values) for name, values in all_sensitivities.items()\n        }\n        sorted_params = sorted(\n            avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n        )\n\n        print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            unit = results[0].target_unit\n            print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n        # Relative importance\n        max_sensitivity = (\n            max(avg_sensitivities.values()) if avg_sensitivities else 1\n        )\n\n        print(\n            f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n        )\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            relative = avg_sensitivity / max_sensitivity * 100\n            print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.create_parameter_configs","title":"<code>create_parameter_configs(self, base_params, parameter_names, custom_ranges=None)</code>","text":"<p>Create parameter configurations for exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def create_parameter_configs(\n    self,\n    base_params: Dict[str, float],\n    parameter_names: List[str],\n    custom_ranges: Dict[str, Dict] = None,\n) -&gt; Dict[str, ParameterConfig]:\n    \"\"\"Create parameter configurations for exploration.\"\"\"\n    configs = {}\n\n    # Default units and ranges\n    param_defaults = {\n        \"pressure\": {\"unit\": \"Pa\", \"min_factor\": 0.3, \"max_factor\": 3.0},\n        \"water_fraction\": {\n            \"unit\": \"-\",\n            \"min_factor\": 0.3,\n            \"max_factor\": 3.0,\n        },\n        \"nozzle_diameter\": {\n            \"unit\": \"m\",\n            \"min_factor\": 0.5,\n            \"max_factor\": 2.5,\n        },\n        \"bottle_volume\": {\n            \"unit\": \"m\u00b3\",\n            \"min_factor\": 0.5,\n            \"max_factor\": 2.0,\n        },\n        \"bottle_diameter\": {\n            \"unit\": \"m\",\n            \"min_factor\": 0.7,\n            \"max_factor\": 1.5,\n        },\n        \"empty_mass\": {\"unit\": \"kg\", \"min_factor\": 0.5, \"max_factor\": 2.0},\n        \"drag_coefficient\": {\n            \"unit\": \"-\",\n            \"min_factor\": 0.3,\n            \"max_factor\": 3.0,\n        },\n    }\n\n    for param_name in parameter_names:\n        if param_name not in base_params:\n            raise ValueError(\n                f\"Parameter '{param_name}' not found in base parameters\"\n            )\n\n        # Get default settings\n        defaults = param_defaults.get(\n            param_name, {\"unit\": \"\", \"min_factor\": 0.5, \"max_factor\": 2.0}\n        )\n\n        # Apply custom ranges if provided\n        if custom_ranges and param_name in custom_ranges:\n            defaults.update(custom_ranges[param_name])\n\n        configs[param_name] = ParameterConfig(\n            name=param_name, base_value=base_params[param_name], **defaults\n        )\n\n    return configs\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.explore_multiple_parameters","title":"<code>explore_multiple_parameters(self, base_rocket, param_configs, target='apogee', sim_settings=None, use_parallel=True)</code>","text":"<p>Explore multiple parameters with pairwise combinations.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def explore_multiple_parameters(\n    self,\n    base_rocket,\n    param_configs: Dict[str, ParameterConfig],\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n    use_parallel: bool = True,\n) -&gt; List[ExplorationResult]:\n    \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n    print(\n        f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n    )\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    results = []\n    param_names = list(param_configs.keys())\n\n    # Generate all pairwise combinations\n    for param1_name, param2_name in combinations(param_names, 2):\n        print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n        param1_config = param_configs[param1_name]\n        param2_config = param_configs[param2_name]\n\n        # Create parameter grids\n        p1_values = param1_config.values\n        p2_values = param2_config.values\n        P1, P2 = np.meshgrid(p1_values, p2_values)\n\n        target_grid = np.full_like(P1, np.nan)\n\n        # Simulate all combinations\n        total_sims = P1.size\n        completed_sims = 0\n\n        for i in range(P1.shape[0]):\n            for j in range(P1.shape[1]):\n                param_values = {\n                    param1_name: P1[i, j],\n                    param2_name: P2[i, j],\n                }\n\n                flight_data = self.simulate_single_point(\n                    base_rocket, param_values, sim_settings\n                )\n\n                if flight_data is not None:\n                    target_grid[i, j] = getattr(flight_data, target_attr)\n\n                completed_sims += 1\n                if completed_sims % 10 == 0:\n                    print(\n                        f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                    )\n\n        # Calculate sensitivities for both parameters\n        sensitivity1 = self._calculate_sensitivity(\n            base_rocket,\n            param1_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n        sensitivity2 = self._calculate_sensitivity(\n            base_rocket,\n            param2_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n\n        results.append(\n            ExplorationResult(\n                parameter_names=[param1_name, param2_name],\n                parameter_values={\n                    param1_name: p1_values,\n                    param2_name: p2_values,\n                },\n                target_values=target_grid,\n                target_name=target_display,\n                target_unit=target_unit,\n                base_target_value=base_target_value,\n                sensitivity_analysis={\n                    param1_name: sensitivity1,\n                    param2_name: sensitivity2,\n                },\n            )\n        )\n\n    return results\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.explore_single_parameter","title":"<code>explore_single_parameter(self, base_rocket, param_config, target='apogee', sim_settings=None)</code>","text":"<p>Explore a single parameter.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def explore_single_parameter(\n    self,\n    base_rocket,\n    param_config: ParameterConfig,\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n) -&gt; ExplorationResult:\n    \"\"\"Explore a single parameter.\"\"\"\n    print(f\"Exploring parameter: {param_config.name}\")\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    # Explore parameter range\n    target_values = []\n    valid_param_values = []\n\n    for param_value in param_config.values:\n        flight_data = self.simulate_single_point(\n            base_rocket, {param_config.name: param_value}, sim_settings\n        )\n\n        if flight_data is not None:\n            target_values.append(getattr(flight_data, target_attr))\n            valid_param_values.append(param_value)\n        else:\n            target_values.append(np.nan)\n            valid_param_values.append(param_value)\n\n    # Calculate sensitivity (numerical derivative at base value)\n    sensitivity = self._calculate_sensitivity(\n        base_rocket, param_config, target, base_target_value, sim_settings\n    )\n\n    return ExplorationResult(\n        parameter_names=[param_config.name],\n        parameter_values={param_config.name: np.array(valid_param_values)},\n        target_values=np.array(target_values),\n        target_name=target_display,\n        target_unit=target_unit,\n        base_target_value=base_target_value,\n        sensitivity_analysis={param_config.name: sensitivity},\n    )\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.extract_base_parameters","title":"<code>extract_base_parameters(self, rocket)</code>","text":"<p>Extract base parameter values from a rocket configuration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n    \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n    # Convert rocket to simulation parameters to get the base values\n    builder = RocketBuilder.from_dict(rocket.__dict__)\n    sim_params = builder.to_simulation_params()\n\n    print(\"Debug - Available simulation parameters:\")\n    for key, value in sim_params.items():\n        print(f\"  {key}: {value}\")\n\n    base_params = {}\n\n    # Map simulation parameters to our parameter names\n    param_mapping = {\n        \"pressure\": \"initial_pressure\",\n        \"water_fraction\": \"water_fraction\",\n        \"nozzle_diameter\": \"nozzle_diameter\",\n        \"bottle_volume\": \"bottle_volume\",\n        \"bottle_diameter\": \"bottle_diameter\",\n        \"empty_mass\": \"empty_mass\",\n        \"drag_coefficient\": \"drag_coefficient\",\n    }\n\n    for param_name, sim_param_name in param_mapping.items():\n        if sim_param_name in sim_params:\n            base_params[param_name] = sim_params[sim_param_name]\n            print(f\"  Found {param_name} = {sim_params[sim_param_name]}\")\n        else:\n            # Provide reasonable defaults for missing parameters\n            defaults = {\n                \"pressure\": 8 * ATMOSPHERIC_PRESSURE,\n                \"water_fraction\": 0.33,\n                \"nozzle_diameter\": 0.015,\n                \"bottle_volume\": 0.002,\n                \"bottle_diameter\": 0.1,\n                \"empty_mass\": 0.25,\n                \"drag_coefficient\": 0.5,\n            }\n            base_params[param_name] = defaults.get(param_name, 1.0)\n            print(\n                f\"  Using default for {param_name} = {base_params[param_name]}\"\n            )\n\n    return base_params\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.plot_results","title":"<code>plot_results(self, results, save_plots=False)</code>","text":"<p>Create plots for exploration results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def plot_results(\n    self, results: List[ExplorationResult], save_plots: bool = False\n):\n    \"\"\"Create plots for exploration results.\"\"\"\n\n    for i, result in enumerate(results):\n        if len(result.parameter_names) == 1:\n            self._plot_single_parameter(result, save_plots, i)\n        elif len(result.parameter_names) == 2:\n            self._plot_two_parameters(result, save_plots, i)\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.print_sensitivity_analysis","title":"<code>print_sensitivity_analysis(self, results)</code>","text":"<p>Print sensitivity analysis results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n    \"\"\"Print sensitivity analysis results.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"SENSITIVITY ANALYSIS\")\n    print(\"=\" * 60)\n\n    all_sensitivities = {}\n\n    for result in results:\n        for param_name, sensitivity in result.sensitivity_analysis.items():\n            if param_name not in all_sensitivities:\n                all_sensitivities[param_name] = []\n            all_sensitivities[param_name].append(abs(sensitivity))\n\n    # Average sensitivities and sort by magnitude\n    avg_sensitivities = {\n        name: np.mean(values) for name, values in all_sensitivities.items()\n    }\n    sorted_params = sorted(\n        avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n    )\n\n    print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        unit = results[0].target_unit\n        print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n    # Relative importance\n    max_sensitivity = (\n        max(avg_sensitivities.values()) if avg_sensitivities else 1\n    )\n\n    print(\n        f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n    )\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        relative = avg_sensitivity / max_sensitivity * 100\n        print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.simulate_single_point","title":"<code>simulate_single_point(self, base_rocket, param_values, sim_settings=None)</code>","text":"<p>Simulate a single parameter point.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def simulate_single_point(\n    self,\n    base_rocket,\n    param_values: Dict[str, float],\n    sim_settings: Dict[str, Any] = None,\n) -&gt; Optional[Any]:\n    \"\"\"Simulate a single parameter point.\"\"\"\n    try:\n        # Create a copy of the base rocket parameters\n        builder = RocketBuilder.from_dict(base_rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        print(f\"Debug - Simulating with param_values: {param_values}\")\n        print(\n            f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n        )\n\n        # Update parameters\n        for param_name, value in param_values.items():\n            if param_name in self.parameter_updaters:\n                print(f\"Debug - Updating {param_name} to {value}\")\n                old_value = sim_params.get(\n                    self._get_sim_param_name(param_name), \"NOT FOUND\"\n                )\n                print(f\"Debug - Old value: {old_value}\")\n\n                self.parameter_updaters[param_name](sim_params, value)\n\n                new_value = sim_params.get(\n                    self._get_sim_param_name(param_name), \"NOT FOUND\"\n                )\n                print(f\"Debug - New value: {new_value}\")\n            else:\n                print(\n                    f\"Warning: No updater found for parameter {param_name}\"\n                )\n\n        # Default simulation settings\n        if sim_settings is None:\n            sim_settings = {\n                \"max_time\": 15.0,\n                \"time_step\": 0.01,\n                \"solver\": \"RK45\",\n            }\n\n        # Run simulation\n        flight_data = self.simulator.simulate(sim_params, sim_settings)\n        return flight_data\n\n    except Exception as e:\n        print(f\"Error in simulate_single_point: {e}\")\n        import traceback\n\n        traceback.print_exc()\n        warnings.warn(\n            f\"Simulation failed for parameters {param_values}: {e}\"\n        )\n        return None\n</code></pre>"},{"location":"api/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.main","title":"<code>main()</code>","text":"<p>Example usage of the parameter explorer.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def main():\n    \"\"\"Example usage of the parameter explorer.\"\"\"\n\n    print(\"=== Water Rocket Parameter Explorer ===\\n\")\n\n    # Create base rocket configuration\n    print(\"1. Creating base rocket configuration...\")\n    base_rocket = create_standard_rocket()\n    print(f\"   Base rocket: {base_rocket.name}\")\n\n    # Initialize explorer\n    explorer = ParameterExplorer()\n\n    # Extract base parameters\n    base_params = explorer.extract_base_parameters(base_rocket)\n    print(\"\\n2. Base parameters:\")\n    for name, value in base_params.items():\n        print(f\"   {name}: {value}\")\n\n    # Test parameter updates with debug info\n    print(\"\\n2.5. Testing parameter updates...\")\n    test_params = {\"pressure\": base_params[\"pressure\"] * 2.0}\n    test_flight = explorer.simulate_single_point(base_rocket, test_params)\n    if test_flight:\n        print(\n            f\"   Test simulation successful - apogee: {test_flight.max_altitude:.2f} m\"\n        )\n    else:\n        print(\"   Test simulation failed!\")\n\n    # Define parameters to explore\n    parameters_to_explore = [\"pressure\", \"water_fraction\", \"nozzle_diameter\"]\n    target_metric = \"apogee\"\n\n    print(f\"\\n3. Exploring parameters: {parameters_to_explore}\")\n    print(f\"   Target metric: {target_metric}\")\n\n    # Create parameter configurations\n    param_configs = explorer.create_parameter_configs(\n        base_params,\n        parameters_to_explore,\n        custom_ranges={\n            \"pressure\": {\n                \"min_factor\": 0.4,\n                \"max_factor\": 2.5,\n                \"num_points\": 5,\n            },\n            \"water_fraction\": {\n                \"min_factor\": 0.5,\n                \"max_factor\": 2.0,\n                \"num_points\": 5,\n            },\n            \"nozzle_diameter\": {\n                \"min_factor\": 0.6,\n                \"max_factor\": 2.0,\n                \"num_points\": 5,\n            },\n        },\n    )\n\n    # First, let's test individual parameters\n    print(\"\\n4. Testing individual parameter effects...\")\n    for param_name, param_config in param_configs.items():\n        print(f\"\\n   Testing {param_name}:\")\n        print(f\"   Base value: {param_config.base_value}\")\n        print(\n            f\"   Range: {param_config.min_value:.6f} to {param_config.max_value:.6f}\"\n        )\n\n        # Test minimum value\n        min_flight = explorer.simulate_single_point(\n            base_rocket, {param_name: param_config.min_value}\n        )\n        if min_flight:\n            print(\n                f\"   Min {param_name} ({param_config.min_value:.6f}): apogee = {min_flight.max_altitude:.2f} m\"\n            )\n\n        # Test maximum value\n        max_flight = explorer.simulate_single_point(\n            base_rocket, {param_name: param_config.max_value}\n        )\n        if max_flight:\n            print(\n                f\"   Max {param_name} ({param_config.max_value:.6f}): apogee = {max_flight.max_altitude:.2f} m\"\n            )\n\n    # Run exploration\n    print(\"\\n5. Running parameter exploration...\")\n    results = explorer.explore_multiple_parameters(\n        base_rocket,\n        param_configs,\n        target=target_metric,\n        sim_settings={\"max_time\": 20.0, \"time_step\": 0.01},\n    )\n\n    # Display results\n    print(f\"\\n6. Generated {len(results)} result sets\")\n\n    # Create plots\n    print(\"\\n7. Creating plots...\")\n    explorer.plot_results(results)\n\n    # Print sensitivity analysis\n    explorer.print_sensitivity_analysis(results)\n\n    print(\"\\nExploration complete!\")\n</code></pre>"},{"location":"api/visualization/plot_flight_data/","title":"waterrocketpy.visualization.plot_flight_data","text":"<p>Comprehensive flight data visualization script for water rocket simulation. Creates multiple organized plots showing all aspects of the rocket's flight performance.</p>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.add_phase_backgrounds","title":"<code>add_phase_backgrounds(ax, phases, alpha=0.1)</code>","text":"<p>Add colored backgrounds to distinguish flight phases.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def add_phase_backgrounds(ax, phases, alpha=0.1):\n    \"\"\"Add colored backgrounds to distinguish flight phases.\"\"\"\n    colors = ['lightblue', 'lightgreen', 'lightyellow', 'lightcoral']\n    labels = ['Water Phase', 'Air Phase', 'Coasting Up', 'Descent']\n\n    # Get axis limits\n    ylim = ax.get_ylim()\n    height = ylim[1] - ylim[0]\n\n    times = [0, phases['water_end'], phases['air_end'], \n             phases['apogee_time'], phases['flight_end']]\n\n    for i in range(len(times)-1):\n        if times[i+1] &gt; times[i]:  # Only add if phase exists\n            width = times[i+1] - times[i]\n            if width &gt; 0:\n                rect = patches.Rectangle(\n                    (times[i], ylim[0]), width, height,\n                    linewidth=0, edgecolor='none',\n                    facecolor=colors[min(i, len(colors)-1)],\n                    alpha=alpha, zorder=0\n                )\n                ax.add_patch(rect)\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.create_summary_table","title":"<code>create_summary_table(flight_data, phases)</code>","text":"<p>Create a summary table of key flight parameters.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def create_summary_table(flight_data, phases):\n    \"\"\"Create a summary table of key flight parameters.\"\"\"\n    summary_data = {\n        'Flight Performance': {\n            'Maximum Altitude': f\"{flight_data.max_altitude:.2f} m\",\n            'Maximum Velocity': f\"{flight_data.max_velocity:.2f} m/s\",\n            'Total Flight Time': f\"{flight_data.flight_time:.2f} s\",\n            'Time to Apogee': f\"{phases['apogee_time']:.2f} s\"\n        },\n        'Phase Durations': {\n            'Water Phase': f\"{phases['water_end']:.2f} s\",\n            'Air Phase': f\"{phases['air_end'] - phases['water_end']:.2f} s\" if phases['air_end'] &gt; phases['water_end'] else \"0.00 s\",\n            'Coasting Phase': f\"{phases['flight_end'] - phases['air_end']:.2f} s\" if phases['flight_end'] &gt; phases['air_end'] else f\"{phases['flight_end'] - phases['water_end']:.2f} s\"\n        },\n        'Initial Conditions': {\n            'Initial Water Mass': f\"{flight_data.water_mass[0]*1000:.1f} g\",\n            'Initial Air Mass': f\"{flight_data.air_mass[0]*1000:.1f} g\",\n            'Initial Pressure': f\"{flight_data.pressure[0]/1e5:.2f} bar\",\n            'Initial Temperature': f\"{flight_data.air_temperature[0]:.1f} K\"\n        }\n    }\n\n    return summary_data\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.identify_flight_phases","title":"<code>identify_flight_phases(flight_data)</code>","text":"<p>Identify the different phases of flight for visualization.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Phase boundaries and information</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def identify_flight_phases(flight_data):\n    \"\"\"\n    Identify the different phases of flight for visualization.\n\n    Returns:\n        dict: Phase boundaries and information\n    \"\"\"\n    phases = {\n        'water_end': flight_data.water_depletion_time,\n        'air_end': flight_data.air_depletion_time,\n        'flight_end': flight_data.flight_time\n    }\n\n    # Find apogee (maximum altitude)\n    apogee_idx = np.argmax(flight_data.altitude)\n    phases['apogee_time'] = flight_data.time[apogee_idx]\n    phases['apogee_altitude'] = flight_data.max_altitude\n\n    return phases\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.main","title":"<code>main()</code>","text":"<p>Main function to run simulation and create all plots.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def main():\n    \"\"\"Main function to run simulation and create all plots.\"\"\"\n    print(\"Water Rocket Flight Data Visualization\")\n    print(\"=\" * 50)\n\n    # Setup plotting style\n    setup_plot_style()\n\n    try:\n        # Create and run simulation\n        print(\"1. Creating standard rocket...\")\n        rocket = create_standard_rocket()\n        print(f\"   \u2713 Rocket created: {rocket.name}\")\n\n        print(\"2. Setting up simulation...\")\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        simulator = WaterRocketSimulator()\n        sim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\n        print(\"3. Running simulation...\")\n        flight_data = simulator.simulate(sim_params, sim_settings)\n        print(f\"   \u2713 Simulation completed! {len(flight_data.time)} data points generated\")\n\n        # Identify flight phases\n        print(\"4. Analyzing flight phases...\")\n        phases = identify_flight_phases(flight_data)\n\n        # Print summary\n        print_flight_summary(flight_data, phases)\n\n        # Create all plots\n        print(\"5. Generating plots...\")\n\n        figs = []\n\n        print(\"   - Trajectory and velocity plots...\")\n        figs.append(plot_trajectory_and_velocity(flight_data, phases))\n\n        print(\"   - Forces and acceleration plots...\")\n        figs.append(plot_forces_and_acceleration(flight_data, phases))\n\n        print(\"   - Propellant and pressure plots...\")\n        figs.append(plot_propellant_and_pressure(flight_data, phases))\n\n        print(\"   - Exhaust properties plots...\")\n        figs.append(plot_exhaust_properties(flight_data, phases))\n\n        print(\"   - Air exit conditions plots...\")\n        figs.append(plot_air_exit_conditions(flight_data, phases))\n\n        # Show all plots\n        print(\"6. Displaying plots...\")\n        plt.show()\n\n        print(\"\u2713 All plots generated successfully!\")\n\n    except Exception as e:\n        print(f\"\u2717 Error: {e}\")\n        import traceback\n        traceback.print_exc()\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_air_exit_conditions","title":"<code>plot_air_exit_conditions(flight_data, phases)</code>","text":"<p>Plot air and water exit conditions and internal bottle air properties.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_air_exit_conditions(flight_data, phases):\n    \"\"\"Plot air and water exit conditions and internal bottle air properties.\"\"\"\n    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 9))\n\n    # Time masks\n    air_phase_mask = (flight_data.time &gt;= phases['water_end']) &amp; (flight_data.time &lt;= phases['air_end'])\n    water_phase_mask = (flight_data.time &gt;= 0) &amp; (flight_data.time &lt;= phases['water_end'])\n    combine_mask = air_phase_mask | water_phase_mask\n\n    if not np.any(air_phase_mask):\n        ax1.text(0.5, 0.5, 'No air phase detected', ha='center', va='center', transform=ax1.transAxes)\n        ax2.text(0.5, 0.5, 'No air phase detected', ha='center', va='center', transform=ax2.transAxes)\n        ax3.text(0.5, 0.5, 'No air phase detected', ha='center', va='center', transform=ax3.transAxes)\n    else:\n        thrust_time = flight_data.time[combine_mask]\n\n        # === 1. PRESSURE ===\n        air_exit_pressure = np.nan_to_num(flight_data.air_exit_pressure[combine_mask], ATMOSPHERIC_PRESSURE) / 1e5\n        internal_pressure = flight_data.pressure[combine_mask] / 1e5\n\n        ax1.plot(thrust_time, air_exit_pressure, color='purple', linewidth=2, label='Air exit pressure')\n        ax1.plot(thrust_time, internal_pressure, color='blue', linestyle='--', linewidth=2, label='Internal pressure')\n        ax1.axhline(ATMOSPHERIC_PRESSURE / 1e5, color='gray', linestyle=':', alpha=0.7, label='Atmospheric pressure')\n        ax1.set_ylabel('Pressure (bar)')\n        ax1.set_title('Air Exit and Internal Conditions')\n        ax1.grid(True, alpha=0.3)\n        ax1.legend()\n\n        # === 2. TEMPERATURE ===\n        air_exit_temp = np.nan_to_num(flight_data.air_exit_temperature[combine_mask], INITIAL_TEMPERATURE)\n        internal_temp = flight_data.air_temperature[combine_mask]\n\n        ax2.plot(thrust_time, air_exit_temp, color='orange', linewidth=2, label='Air exit temperature')\n        ax2.plot(thrust_time, internal_temp, color='red', linestyle='--', linewidth=2, label='Internal temperature')\n        ax2.axhline(INITIAL_TEMPERATURE, color='gray', linestyle=':', alpha=0.7, label='Initial temperature')\n        ax2.set_ylabel('Temperature (K)')\n        ax2.grid(True, alpha=0.3)\n        ax2.legend()\n\n        # === 3. EXHAUST VELOCITY ===\n        water_velocity = np.nan_to_num(flight_data.water_exhaust_speed[combine_mask], 0.0)\n        air_velocity = np.nan_to_num(flight_data.air_exhaust_speed[combine_mask], 0.0)\n\n        ax3.plot(thrust_time, water_velocity, color='blue', linewidth=2, label='Water exhaust velocity')\n        ax3.plot(thrust_time, air_velocity, color='green', linewidth=2, label='Air exhaust velocity')\n        ax3.set_xlabel('Time (s)')\n        ax3.set_ylabel('Exhaust Velocity (m/s)')\n        ax3.grid(True, alpha=0.3)\n        ax3.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_exhaust_properties","title":"<code>plot_exhaust_properties(flight_data, phases)</code>","text":"<p>Plot exhaust velocities and mass flow rates.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_exhaust_properties(flight_data, phases):\n    \"\"\"Plot exhaust velocities and mass flow rates.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Exhaust velocities\n    # Handle None values by replacing with 0\n    water_exhaust = np.nan_to_num(flight_data.water_exhaust_speed, 0)\n    air_exhaust = np.nan_to_num(flight_data.air_exhaust_speed, 0)\n\n    ax1.plot(flight_data.time, water_exhaust, 'b-', linewidth=2, label='Water exhaust speed')\n    ax1.plot(flight_data.time, air_exhaust, 'g-', linewidth=2, label='Air exhaust speed')\n\n    add_phase_backgrounds(ax1, phases)\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax1.set_ylabel('Exhaust Speed (m/s)')\n    ax1.set_title('Exhaust Velocities')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n\n    # Mass flow rates\n    water_flow = np.nan_to_num(flight_data.water_mass_flow_rate, 0) * 1000  # Convert to g/s\n    air_flow = np.nan_to_num(flight_data.air_mass_flow_rate, 0) * 1000\n\n    ax2.plot(flight_data.time, -water_flow, 'b-', linewidth=2, label='Water flow rate')  # Negative because it's outflow\n    ax2.plot(flight_data.time, -air_flow, 'g-', linewidth=2, label='Air flow rate')\n\n    add_phase_backgrounds(ax2, phases)\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Mass Flow Rate (g/s)')\n    ax2.set_title('Propellant Mass Flow Rates')\n    ax2.grid(True, alpha=0.3)\n    ax2.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_forces_and_acceleration","title":"<code>plot_forces_and_acceleration(flight_data, phases)</code>","text":"<p>Plot forces and acceleration.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_forces_and_acceleration(flight_data, phases):\n    \"\"\"Plot forces and acceleration.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Forces plot\n    ax1.plot(flight_data.time, flight_data.thrust, 'g-', linewidth=2, label='Thrust')\n    ax1.plot(flight_data.time, flight_data.drag, 'r-', linewidth=2, label='Drag')\n\n    # Calculate weight (assuming constant during powered flight)\n    # Weight changes as propellant is expelled\n    total_mass = flight_data.water_mass + flight_data.air_mass + 0.15  # Assuming 0.15kg empty mass\n    weight = total_mass * 9.81\n    ax1.plot(flight_data.time, weight, 'k--', linewidth=1.5, label='Weight', alpha=0.7)\n\n    add_phase_backgrounds(ax1, phases)\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax1.set_ylabel('Force (N)')\n    ax1.set_title('Forces Acting on Rocket')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n    ax1.set_yscale('log')\n\n    # Acceleration plot\n    ax2.plot(flight_data.time, flight_data.acceleration, 'purple', linewidth=2, label='Acceleration')\n    add_phase_backgrounds(ax2, phases)\n\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n    ax2.axhline(0, color='black', linestyle='-', alpha=0.3)\n    ax2.axhline(-9.81, color='gray', linestyle=':', alpha=0.7, label='Gravity')\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Acceleration (m/s\u00b2)')\n    ax2.set_title('Rocket Acceleration')\n    ax2.grid(True, alpha=0.3)\n    ax2.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_propellant_and_pressure","title":"<code>plot_propellant_and_pressure(flight_data, phases)</code>","text":"<p>Plot propellant masses and pressure.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_propellant_and_pressure(flight_data, phases):\n    \"\"\"Plot propellant masses and pressure.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Propellant masses\n    ax1.plot(flight_data.time, flight_data.water_mass * 1000, 'b-', linewidth=2, label='Water mass')\n    ax1.plot(flight_data.time, flight_data.air_mass * 1000, 'g-', linewidth=2, label='Air mass')\n    ax1.plot(flight_data.time, flight_data.liquid_gas_mass * 1000, 'orange', linewidth=2, label='Liquid gas mass')\n\n    add_phase_backgrounds(ax1, phases)\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax1.set_ylabel('Mass (g)')\n    ax1.set_title('Propellant Masses')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n\n    # Pressure and temperature\n    ax2_temp = ax2.twinx()\n\n    # Pressure (convert to bar for readability)\n    pressure_bar = flight_data.pressure / 1e5\n    line1 = ax2.plot(flight_data.time, pressure_bar, 'r-', linewidth=2, label='Pressure')\n    ax2.axhline(ATMOSPHERIC_PRESSURE / 1e5, color='red', linestyle=':', alpha=0.7, label='Atmospheric')\n\n    # Temperature\n    line2 = ax2_temp.plot(flight_data.time, flight_data.air_temperature, 'orange', linewidth=2, label='Temperature')\n    ax2_temp.axhline(INITIAL_TEMPERATURE, color='orange', linestyle=':', alpha=0.7, label='Initial temp')\n\n    add_phase_backgrounds(ax2, phases)\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Pressure (bar)', color='r')\n    ax2_temp.set_ylabel('Temperature (K)', color='orange')\n    ax2.set_title('Pressure and Temperature')\n    ax2.grid(True, alpha=0.3)\n\n    # Combine legends\n    lines1, labels1 = ax2.get_legend_handles_labels()\n    lines2, labels2 = ax2_temp.get_legend_handles_labels()\n    ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right')\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_trajectory_and_velocity","title":"<code>plot_trajectory_and_velocity(flight_data, phases)</code>","text":"<p>Plot altitude and velocity vs time.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_trajectory_and_velocity(flight_data, phases):\n    \"\"\"Plot altitude and velocity vs time.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Altitude plot\n    ax1.plot(flight_data.time, flight_data.altitude, 'b-', linewidth=2, label='Altitude')\n    add_phase_backgrounds(ax1, phases)\n\n    # Mark key events\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7, label='Water depleted')\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7, label='Air depleted')\n    ax1.axvline(phases['apogee_time'], color='green', linestyle='--', alpha=0.7, label='Apogee')\n\n    ax1.set_ylabel('Altitude (m)')\n    ax1.set_title('Rocket Trajectory')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n\n    # Velocity plot\n    ax2.plot(flight_data.time, flight_data.velocity, 'r-', linewidth=2, label='Velocity')\n    add_phase_backgrounds(ax2, phases)\n\n    # Mark key events\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['apogee_time'], color='green', linestyle='--', alpha=0.7)\n    ax2.axhline(0, color='black', linestyle='-', alpha=0.3)\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Velocity (m/s)')\n    ax2.set_title('Rocket Velocity')\n    ax2.grid(True, alpha=0.3)\n    ax2.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.print_flight_summary","title":"<code>print_flight_summary(flight_data, phases)</code>","text":"<p>Print a comprehensive flight summary.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def print_flight_summary(flight_data, phases):\n    \"\"\"Print a comprehensive flight summary.\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"WATER ROCKET FLIGHT ANALYSIS SUMMARY\")\n    print(\"=\"*60)\n\n    summary = create_summary_table(flight_data, phases)\n\n    for category, values in summary.items():\n        print(f\"\\n{category}:\")\n        print(\"-\" * len(category))\n        for key, value in values.items():\n            print(f\"  {key:&lt;25}: {value}\")\n\n    print(\"\\n\" + \"=\"*60)\n</code></pre>"},{"location":"api/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.setup_plot_style","title":"<code>setup_plot_style()</code>","text":"<p>Configure matplotlib for professional-looking plots.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def setup_plot_style():\n    \"\"\"Configure matplotlib for professional-looking plots.\"\"\"\n    plt.style.use('seaborn-v0_8')\n    plt.rcParams.update({\n        'figure.figsize': (16, 12),\n        'font.size': 10,\n        'axes.titlesize': 12,\n        'axes.labelsize': 11,\n        'xtick.labelsize': 9,\n        'ytick.labelsize': 9,\n        'legend.fontsize': 9,\n        'lines.linewidth': 1.5,\n        'grid.alpha': 0.3\n    })\n</code></pre>"},{"location":"api/waterrocketpy/main/","title":"waterrocketpy.main","text":""},{"location":"api/waterrocketpy/analysis/energy_breakdown/","title":"waterrocketpy.analysis.energy_breakdown","text":""},{"location":"api/waterrocketpy/analysis/energy_breakdown/#waterrocketpy.analysis.energy_breakdown.EnergyComponents","title":"<code> EnergyComponents        </code>  <code>dataclass</code>","text":"<p>Container for energy breakdown results.</p> Source code in <code>waterrocketpy/analysis/energy_breakdown.py</code> <pre><code>@dataclass\nclass EnergyComponents:\n    \"\"\"Container for energy breakdown results.\"\"\"\n\n    time: np.ndarray\n\n    # Internal energy\n    air_internal_energy: np.ndarray\n\n    # Rocket system energy\n    rocket_kinetic_energy: np.ndarray\n    rocket_potential_energy: np.ndarray\n    water_in_kinetic_energy: np.ndarray\n    water_in_potential_energy: np.ndarray\n\n    # Expelled fluid energy (cumulative)\n    water_out_kinetic_energy: np.ndarray\n    water_out_potential_energy: np.ndarray\n    air_out_kinetic_energy: np.ndarray\n    air_out_potential_energy: np.ndarray\n\n    # Energy losses (cumulative)\n    drag_energy_loss: np.ndarray\n\n    # Total energy accounting\n    total_initial_energy: float\n    total_final_energy: np.ndarray\n    energy_conservation_error: np.ndarray\n\n    # Summary values\n    max_kinetic_energy: float\n    max_potential_energy: float\n    total_drag_loss: float\n    total_expelled_energy: float\n</code></pre>"},{"location":"api/waterrocketpy/analysis/energy_breakdown/#waterrocketpy.analysis.energy_breakdown.tenergy_breakdown","title":"<code>tenergy_breakdown(flight_data, rocket_params)</code>","text":"<p>Perform comprehensive energy breakdown analysis of water rocket flight.</p> <p>Parameters:</p> Name Type Description Default <code>flight_data</code> <p>FlightData object from simulation</p> required <code>rocket_params</code> <code>Dict[str, Any]</code> <p>Rocket configuration parameters</p> required <p>Returns:</p> Type Description <code>EnergyComponents</code> <p>EnergyComponents object with detailed energy analysis</p> Source code in <code>waterrocketpy/analysis/energy_breakdown.py</code> <pre><code>def tenergy_breakdown(\n    flight_data, rocket_params: Dict[str, Any]\n) -&gt; EnergyComponents:\n    \"\"\"\n    Perform comprehensive energy breakdown analysis of water rocket flight.\n\n    Args:\n        flight_data: FlightData object from simulation\n        rocket_params: Rocket configuration parameters\n\n    Returns:\n        EnergyComponents object with detailed energy analysis\n    \"\"\"\n\n    # Extract data arrays\n    time = flight_data.time\n    altitude = flight_data.altitude\n    velocity = flight_data.velocity\n    water_mass = flight_data.water_mass\n    air_mass = flight_data.air_mass\n    pressure = flight_data.pressure\n    air_temperature = flight_data.air_temperature\n    drag = flight_data.drag\n    thrust = flight_data.thrust\n\n    # Calculate rocket mass components\n    m_empty = rocket_params[\"m_empty\"]\n    total_mass = m_empty + water_mass + air_mass\n\n    # 1. Internal Energy of Pressurized Air\n    # Using U = m * cv * T for internal energy\n    air_internal_energy = air_mass * AIR_SPECIFIC_HEAT_CV * air_temperature\n\n    # 2. Kinetic Energy of Rocket System\n    rocket_kinetic_energy = 0.5 * total_mass * velocity**2\n\n    # 3. Potential Energy of Rocket System\n    rocket_potential_energy = total_mass * GRAVITY * altitude\n\n    # 4. Kinetic Energy of Water Inside Rocket\n    water_in_kinetic_energy = 0.5 * water_mass * velocity**2\n\n    # 5. Potential Energy of Water Inside Rocket\n    water_in_potential_energy = water_mass * GRAVITY * altitude\n\n    # 6. Energy of Expelled Water (cumulative integration)\n    water_out_kinetic_energy = np.zeros_like(time)\n    water_out_potential_energy = np.zeros_like(time)\n\n    # Calculate expelled water energy by integrating over time\n    for i in range(1, len(time)):\n        dt = time[i] - time[i - 1]\n\n        # Water mass flow rate (negative since mass is decreasing) NOOOO its\n        # the other way around! leaving water / air is defined as positive in\n        # the simulation\n        if i &lt; len(flight_data.water_mass_flow_rate):\n            dm_water_dt = flight_data.water_mass_flow_rate[i]\n        else:\n            dm_water_dt = 0.0\n\n        if dm_water_dt &gt; 0:  # Water is being expelled\n            # Estimate water exhaust velocity\n            if flight_data.water_exhaust_speed[i] is not None:\n                v_exhaust = flight_data.water_exhaust_speed[i]\n            else:\n                # Fallback: estimate from thrust and mass flow rate\n                if dm_water_dt &gt; 0:\n                    v_exhaust = (\n                        thrust[i] / dm_water_dt if dm_water_dt &gt; 1e-10 else 0.0\n                    )\n                else:\n                    v_exhaust = 0.0\n\n            # Energy carried away by expelled water\n            dE_kin_water = 0.5 * dm_water_dt * v_exhaust**2 * dt\n            dE_pot_water = dm_water_dt * GRAVITY * altitude[i] * dt\n\n            water_out_kinetic_energy[i] = (\n                water_out_kinetic_energy[i - 1] + dE_kin_water\n            )\n            water_out_potential_energy[i] = (\n                water_out_potential_energy[i - 1] + dE_pot_water\n            )\n        else:\n            water_out_kinetic_energy[i] = water_out_kinetic_energy[i - 1]\n            water_out_potential_energy[i] = water_out_potential_energy[i - 1]\n\n    # 7. Energy of Expelled Air (cumulative integration)\n    air_out_kinetic_energy = np.zeros_like(time)\n    air_out_potential_energy = np.zeros_like(time)\n\n    for i in range(1, len(time)):\n        dt = time[i] - time[i - 1]\n\n        # Air mass flow rate\n        if i &lt; len(flight_data.air_mass_flow_rate):\n            dm_air_dt = flight_data.air_mass_flow_rate[i]\n        else:\n            dm_air_dt = 0.0\n\n        if dm_air_dt &gt; 0:  # Air is being expelled\n            # Estimate air exhaust velocity -&gt; leaving water / air is defined\n            # as positive in the simulation\n            if flight_data.air_exhaust_speed[i] is not None:\n                v_exhaust_air = flight_data.air_exhaust_speed[i]\n            else:\n                # Fallback: estimate from thrust and mass flow rate\n                if dm_air_dt &gt; 0:\n                    v_exhaust_air = (\n                        thrust[i] / dm_air_dt if dm_air_dt &gt; 1e-10 else 0.0\n                    )\n                else:\n                    v_exhaust_air = 0.0\n\n            # Energy carried away by expelled air\n            dE_kin_air = 0.5 * dm_air_dt * v_exhaust_air**2 * dt\n            dE_pot_air = dm_air_dt * GRAVITY * altitude[i] * dt\n\n            air_out_kinetic_energy[i] = (\n                air_out_kinetic_energy[i - 1] + dE_kin_air\n            )\n            air_out_potential_energy[i] = (\n                air_out_potential_energy[i - 1] + dE_pot_air\n            )\n        else:\n            air_out_kinetic_energy[i] = air_out_kinetic_energy[i - 1]\n            air_out_potential_energy[i] = air_out_potential_energy[i - 1]\n\n    # 8. Energy Loss Due to Drag (cumulative)\n    drag_energy_loss = np.zeros_like(time)\n    for i in range(1, len(time)):\n        dt = time[i] - time[i - 1]\n        # Energy lost to drag = drag force * distance = drag * velocity * dt\n        dE_drag = abs(drag[i]) * abs(velocity[i]) * dt\n        drag_energy_loss[i] = drag_energy_loss[i - 1] + dE_drag\n\n    # 9. Calculate Initial Total Energy\n    # Initial energy is stored as internal energy in pressurized air\n    initial_air_volume = rocket_params[\"V_bottle\"] * (\n        1 - rocket_params[\"water_fraction\"]\n    )\n    initial_air_mass = (rocket_params[\"P0\"] * initial_air_volume) / (\n        287.0 * INITIAL_TEMPERATURE\n    )  # Using ideal gas law\n    total_initial_energy = (\n        initial_air_mass * AIR_SPECIFIC_HEAT_CV * INITIAL_TEMPERATURE\n    )\n\n    # 10. Energy Conservation Check\n    # Total energy at time t should equal:\n    # Internal + Kinetic + Potential + Expelled + Losses\n    total_final_energy = (\n        air_internal_energy\n        + rocket_kinetic_energy\n        + rocket_potential_energy\n        + water_out_kinetic_energy\n        + water_out_potential_energy\n        + air_out_kinetic_energy\n        + air_out_potential_energy\n        + drag_energy_loss\n    )\n\n    energy_conservation_error = (\n        abs(total_final_energy - total_initial_energy)\n        / total_initial_energy\n        * 100\n    )\n\n    # Calculate summary values\n    max_kinetic_energy = np.max(rocket_kinetic_energy)\n    max_potential_energy = np.max(rocket_potential_energy)\n    total_drag_loss = drag_energy_loss[-1]\n    total_expelled_energy = (\n        water_out_kinetic_energy[-1]\n        + water_out_potential_energy[-1]\n        + air_out_kinetic_energy[-1]\n        + air_out_potential_energy[-1]\n    )\n\n    return EnergyComponents(\n        time=time,\n        air_internal_energy=air_internal_energy,\n        rocket_kinetic_energy=rocket_kinetic_energy,\n        rocket_potential_energy=rocket_potential_energy,\n        water_in_kinetic_energy=water_in_kinetic_energy,\n        water_in_potential_energy=water_in_potential_energy,\n        water_out_kinetic_energy=water_out_kinetic_energy,\n        water_out_potential_energy=water_out_potential_energy,\n        air_out_kinetic_energy=air_out_kinetic_energy,\n        air_out_potential_energy=air_out_potential_energy,\n        drag_energy_loss=drag_energy_loss,\n        total_initial_energy=total_initial_energy,\n        total_final_energy=total_final_energy,\n        energy_conservation_error=energy_conservation_error,\n        max_kinetic_energy=max_kinetic_energy,\n        max_potential_energy=max_potential_energy,\n        total_drag_loss=total_drag_loss,\n        total_expelled_energy=total_expelled_energy,\n    )\n</code></pre>"},{"location":"api/waterrocketpy/analysis/energy_breakdown_plot/","title":"waterrocketpy.analysis.energy_breakdown_plot","text":""},{"location":"api/waterrocketpy/analysis/energy_breakdown_plot/#waterrocketpy.analysis.energy_breakdown_plot--energy-breakdown-analysis-module","title":"Energy Breakdown Analysis Module","text":"<p>This module provides functions to plot the energy breakdown of water rocket flights. The calculations are done in energy_breakdown.py, and the plotting is handled in energy_breakdown_plot.py.</p> <ol> <li>Create energy breakdown plots</li> <li>Understand energy flow through the system</li> </ol>"},{"location":"api/waterrocketpy/analysis/energy_breakdown_plot/#waterrocketpy.analysis.energy_breakdown_plot.create_energy_plots","title":"<code>create_energy_plots(energy_components, flight_data)</code>","text":"<p>Create comprehensive energy breakdown plots.</p> Source code in <code>waterrocketpy/analysis/energy_breakdown_plot.py</code> <pre><code>def create_energy_plots(energy_components, flight_data):\n    \"\"\"Create comprehensive energy breakdown plots.\"\"\"\n\n    # Set up the plotting style\n    plt.style.use(\"seaborn-v0_8\")\n    colors = {\n        \"internal\": \"#FF6B6B\",\n        \"kinetic\": \"#4ECDC4\",\n        \"potential\": \"#45B7D1\",\n        \"expelled\": \"#96CEB4\",\n        \"losses\": \"#FFEAA7\",\n        \"total\": \"#2D3436\",\n    }\n\n    # Create figure with subplots\n    fig = plt.figure(figsize=(16, 12))\n    gs = fig.add_gridspec(3, 2, hspace=0.3, wspace=0.3)\n\n    # Main energy breakdown plot (large, spanning top row)\n    ax1 = fig.add_subplot(gs[0, :])\n\n    # Calculate combined energy components for stacked plot\n    time = energy_components.time\n\n    # Energy stored in the system\n    internal_energy = energy_components.air_internal_energy\n    kinetic_energy = energy_components.rocket_kinetic_energy\n    potential_energy = energy_components.rocket_potential_energy\n\n    # Energy that left the system\n    expelled_kinetic = (\n        energy_components.water_out_kinetic_energy\n        + energy_components.air_out_kinetic_energy\n    )\n    expelled_potential = (\n        energy_components.water_out_potential_energy\n        + energy_components.air_out_potential_energy\n    )\n    expelled_total = expelled_kinetic + expelled_potential\n\n    # Energy losses\n    drag_losses = energy_components.drag_energy_loss\n\n    # Create stacked area plot\n    ax1.fill_between(\n        time,\n        0,\n        internal_energy,\n        color=colors[\"internal\"],\n        alpha=0.8,\n        label=\"Internal Energy (Air)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy,\n        internal_energy + kinetic_energy,\n        color=colors[\"kinetic\"],\n        alpha=0.8,\n        label=\"Kinetic Energy (Rocket)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy,\n        internal_energy + kinetic_energy + potential_energy,\n        color=colors[\"potential\"],\n        alpha=0.8,\n        label=\"Potential Energy (Rocket)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy + potential_energy,\n        internal_energy + kinetic_energy + potential_energy + expelled_total,\n        color=colors[\"expelled\"],\n        alpha=0.8,\n        label=\"Expelled Energy (Water + Air)\",\n    )\n    ax1.fill_between(\n        time,\n        internal_energy + kinetic_energy + potential_energy + expelled_total,\n        internal_energy\n        + kinetic_energy\n        + potential_energy\n        + expelled_total\n        + drag_losses,\n        color=colors[\"losses\"],\n        alpha=0.8,\n        label=\"Energy Losses (Drag)\",\n    )\n\n    # Add total energy line\n    total_energy = (\n        internal_energy\n        + kinetic_energy\n        + potential_energy\n        + expelled_total\n        + drag_losses\n    )\n    ax1.plot(\n        time,\n        total_energy,\n        color=colors[\"total\"],\n        linewidth=2,\n        label=f\"Total Energy (Initial: {energy_components.total_initial_energy:.0f} J)\",\n    )\n\n    # Add vertical lines for phase transitions\n    if flight_data.water_depletion_time &gt; 0:\n        ax1.axvline(\n            flight_data.water_depletion_time,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Water Depletion\",\n        )\n    if flight_data.air_depletion_time &gt; 0:\n        ax1.axvline(\n            flight_data.air_depletion_time,\n            color=\"orange\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Air Depletion\",\n        )\n\n    ax1.set_xlabel(\"Time (s)\")\n    ax1.set_ylabel(\"Energy (J)\")\n    ax1.set_title(\n        \"Complete Energy Breakdown Over Time\", fontsize=14, fontweight=\"bold\"\n    )\n    ax1.legend(loc=\"upper right\", bbox_to_anchor=(1.02, 1))\n    ax1.grid(True, alpha=0.3)\n\n    # Detailed kinetic energy breakdown\n    ax2 = fig.add_subplot(gs[1, 0])\n    ax2.plot(\n        time,\n        energy_components.rocket_kinetic_energy,\n        color=colors[\"kinetic\"],\n        linewidth=2,\n        label=\"Rocket Kinetic\",\n    )\n    ax2.plot(\n        time,\n        energy_components.water_out_kinetic_energy,\n        color=\"#74b9ff\",\n        linewidth=2,\n        label=\"Expelled Water Kinetic\",\n    )\n    ax2.plot(\n        time,\n        energy_components.air_out_kinetic_energy,\n        color=\"#a29bfe\",\n        linewidth=2,\n        label=\"Expelled Air Kinetic\",\n    )\n    ax2.set_xlabel(\"Time (s)\")\n    ax2.set_ylabel(\"Kinetic Energy (J)\")\n    ax2.set_title(\"Kinetic Energy Components\")\n    ax2.legend()\n    ax2.grid(True, alpha=0.3)\n\n    # Detailed potential energy breakdown\n    ax3 = fig.add_subplot(gs[1, 1])\n    ax3.plot(\n        time,\n        energy_components.rocket_potential_energy,\n        color=colors[\"potential\"],\n        linewidth=2,\n        label=\"Rocket Potential\",\n    )\n    ax3.plot(\n        time,\n        energy_components.water_out_potential_energy,\n        color=\"#00b894\",\n        linewidth=2,\n        label=\"Expelled Water Potential\",\n    )\n    ax3.plot(\n        time,\n        energy_components.air_out_potential_energy,\n        color=\"#00cec9\",\n        linewidth=2,\n        label=\"Expelled Air Potential\",\n    )\n    ax3.set_xlabel(\"Time (s)\")\n    ax3.set_ylabel(\"Potential Energy (J)\")\n    ax3.set_title(\"Potential Energy Components\")\n    ax3.legend()\n    ax3.grid(True, alpha=0.3)\n\n    # Energy conservation check\n    ax4 = fig.add_subplot(gs[2, 0])\n    ax4.plot(\n        time,\n        energy_components.energy_conservation_error,\n        color=\"red\",\n        linewidth=2,\n    )\n    ax4.set_xlabel(\"Time (s)\")\n    ax4.set_ylabel(\"Conservation Error (%)\")\n    ax4.set_title(\"Energy Conservation Error\")\n    ax4.grid(True, alpha=0.3)\n\n    # Energy flow rates\n    ax5 = fig.add_subplot(gs[2, 1])\n\n    # Calculate energy flow rates (derivatives)\n    dt = np.diff(time)\n    expelled_rate = np.diff(expelled_total) / dt\n    drag_rate = np.diff(drag_losses) / dt\n\n    # Pad with zeros to match time array length\n    expelled_rate = np.append(expelled_rate, 0)\n    drag_rate = np.append(drag_rate, 0)\n\n    ax5.plot(\n        time,\n        expelled_rate,\n        color=colors[\"expelled\"],\n        linewidth=2,\n        label=\"Expelled Energy Rate\",\n    )\n    ax5.plot(\n        time,\n        drag_rate,\n        color=colors[\"losses\"],\n        linewidth=2,\n        label=\"Drag Loss Rate\",\n    )\n    ax5.set_xlabel(\"Time (s)\")\n    ax5.set_ylabel(\"Energy Rate (J/s)\")\n    ax5.set_title(\"Energy Flow Rates\")\n    ax5.legend()\n    ax5.grid(True, alpha=0.3)\n\n    plt.tight_layout()\n    plt.savefig(\"energy_breakdown_analysis.png\", dpi=300, bbox_inches=\"tight\")\n    plt.show()\n</code></pre>"},{"location":"api/waterrocketpy/analysis/energy_breakdown_plot/#waterrocketpy.analysis.energy_breakdown_plot.create_energy_summary_chart","title":"<code>create_energy_summary_chart(energy_components, flight_data)</code>","text":"<p>Create pie charts showing energy distribution at key time points.</p> Source code in <code>waterrocketpy/analysis/energy_breakdown_plot.py</code> <pre><code>def create_energy_summary_chart(energy_components, flight_data):\n    \"\"\"Create pie charts showing energy distribution at key time points.\"\"\"\n\n    # Time series data\n    time = energy_components.time\n\n    # Find indices of interest\n    max_altitude_index = np.argmax(flight_data.altitude)\n    max_velocity_index = np.argmax(flight_data.velocity)\n    final_index = -1  # Last value\n\n    # Helper function to extract energy components at a given index\n    def get_energy_distribution_at(index):\n        ke = energy_components.rocket_kinetic_energy[index]\n        pe = energy_components.rocket_potential_energy[index]\n        ie = energy_components.air_internal_energy[index]\n        expelled = (\n            energy_components.water_out_kinetic_energy[index]\n            + energy_components.water_out_potential_energy[index]\n            + energy_components.air_out_kinetic_energy[index]\n            + energy_components.air_out_potential_energy[index]\n        )\n        losses = energy_components.drag_energy_loss[index]\n        return ke, pe, ie, expelled, losses\n\n    # Collect energy values at each key time\n    snapshots = {\n        \"At Max Altitude\": get_energy_distribution_at(max_altitude_index),\n        \"At Max Velocity\": get_energy_distribution_at(max_velocity_index),\n        \"Final State\": get_energy_distribution_at(final_index),\n    }\n\n    # Set up pie chart layout\n    fig, axes = plt.subplots(1, 3, figsize=(20, 6))\n\n    for ax, (title, (ke, pe, ie, expelled, losses)) in zip(\n        axes, snapshots.items()\n    ):\n        energies = []\n        labels = []\n        colors = []\n\n        if ke &gt; 1.0:\n            energies.append(ke)\n            labels.append(f\"Kinetic\\n{ke:.1f} J\")\n            colors.append(\"#4ECDC4\")\n        if pe &gt; 1.0:\n            energies.append(pe)\n            labels.append(f\"Potential\\n{pe:.1f} J\")\n            colors.append(\"#45B7D1\")\n        if ie &gt; 1.0:\n            energies.append(ie)\n            labels.append(f\"Internal\\n{ie:.1f} J\")\n            colors.append(\"#FF6B6B\")\n        if expelled &gt; 1.0:\n            energies.append(expelled)\n            labels.append(f\"Expelled\\n{expelled:.1f} J\")\n            colors.append(\"#96CEB4\")\n        if losses &gt; 1.0:\n            energies.append(losses)\n            labels.append(f\"Drag Losses\\n{losses:.1f} J\")\n            colors.append(\"#FFEAA7\")\n\n        ax.pie(\n            energies,\n            labels=labels,\n            colors=colors,\n            autopct=\"%1.1f%%\",\n            startangle=90,\n        )\n        ax.set_title(title)\n\n    plt.suptitle(\n        f\"Energy Distribution at Key Points (Total: {energy_components.total_initial_energy:.0f} J)\",\n        fontsize=16,\n        fontweight=\"bold\",\n    )\n    plt.tight_layout(rect=[0, 0, 1, 0.95])\n    plt.savefig(\"energy_snapshots.png\", dpi=300, bbox_inches=\"tight\")\n    plt.show()\n</code></pre>"},{"location":"api/waterrocketpy/core/constants/","title":"waterrocketpy.core.constants","text":"<p>Physical constants and default values for water rocket simulations.</p>"},{"location":"api/waterrocketpy/core/physics_engine/","title":"waterrocketpy.core.physics_engine","text":"<p>Physics calculations for water rocket simulation.</p>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine","title":"<code> PhysicsEngine        </code>","text":"<p>Handles all physics calculations for water rocket simulation.</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>class PhysicsEngine:\n    \"\"\"Handles all physics calculations for water rocket simulation.\"\"\"\n\n    def __init__(self, gravity=GRAVITY, air_density=AIR_DENSITY_SL):\n        self.gravity = gravity\n        self.air_density = air_density\n        self.air_gas_constant = 287.0  # J/(kg\u00b7K) for air\n\n    def calculate_water_thrust(\n        self, pressure, nozzle_area, discharge_coefficient\n    ):\n        \"\"\"\n        Calculate thrust force from water expulsion.\n\n        Args:\n            pressure (float): Internal pressure (Pa)\n            nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n            discharge_coefficient (float): Discharge coefficient\n\n        Returns:\n            tuple: (thrust_force, exit_velocity, mass_flow_rate)\n        \"\"\"\n        pressure_diff = max(pressure - ATMOSPHERIC_PRESSURE, 0)\n\n        # Exit velocity using Torricelli's equation\n        exit_velocity = discharge_coefficient * np.sqrt(\n            2 * pressure_diff / WATER_DENSITY\n        )\n\n        # Mass flow rate\n        mass_flow_rate = WATER_DENSITY * nozzle_area * exit_velocity\n\n        # Thrust force\n        thrust_force = mass_flow_rate * exit_velocity\n\n        return thrust_force, exit_velocity, mass_flow_rate\n\n    def calculate_air_thrust(\n        self, pressure, temperature, nozzle_area, discharge_coefficient\n    ):\n        \"\"\"\n        Calculate thrust force from air expulsion through converging nozzle.\n        Hole prinziple: from values inside the tank, calculate the exit flow properties, from them calculate the change inside the tank :D\n        Args:\n            pressure (float): Internal air pressure (Pa)\n            temperature (float): Internal air temperature (K)\n            nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n            discharge_coefficient (float): Discharge coefficient\n\n        Returns:\n            tuple: (thrust_force, air_exit_velocity, mass_flow_rate, air_exit_pressure, air_exit_temperature)\n        \"\"\"\n        if pressure &lt;= ATMOSPHERIC_PRESSURE:\n            return 0.0, 0.0, 0.0, 0.0, 0.0\n\n        gamma = ADIABATIC_INDEX_AIR\n        R = self.air_gas_constant\n\n        # Critical pressure ratio for choked flow\n        pressure_ratio_critical = (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n        pressure_ratio = pressure / ATMOSPHERIC_PRESSURE\n\n        # Check if flow is choked\n        if pressure_ratio &gt; pressure_ratio_critical:\n            # Choked flow - sonic at throat\n\n            # Throat conditions (sonic)\n            T_throat = temperature * (2 / (gamma + 1))\n            P_throat = pressure * (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n            rho_throat = P_throat / (R * T_throat)\n\n            # Sonic velocity at throat\n            v_throat = np.sqrt(gamma * R * T_throat)\n\n            # Mass flow rate (choked)\n            mass_flow_rate = (\n                discharge_coefficient * rho_throat * nozzle_area * v_throat\n            )\n\n            # For converging nozzle, exit conditions = throat conditions\n            air_exit_velocity = v_throat\n            air_exit_pressure = P_throat\n            air_exit_temperature = T_throat\n\n        else:\n            # Subsonic flow - exit pressure = ambient pressure\n            air_exit_pressure = ATMOSPHERIC_PRESSURE\n\n            # Isentropic relations for exit conditions\n            pressure_ratio_exit = air_exit_pressure / pressure\n            T_exit = temperature * (\n                pressure_ratio_exit ** ((gamma - 1) / gamma)\n            )\n            rho_exit = air_exit_pressure / (R * T_exit)\n\n            # Exit velocity from isentropic relations\n            air_exit_velocity = np.sqrt(\n                2\n                * gamma\n                * R\n                * temperature\n                / (\n                    gamma - 1\n                )  # TODO woher kommt das /(gamma-1) her - \u00fcberpr\u00fcfe die gleichungen\n                * (1 - pressure_ratio_exit ** ((gamma - 1) / gamma))\n            )\n\n            # Mass flow rate\n            mass_flow_rate = (\n                discharge_coefficient\n                * rho_exit\n                * nozzle_area\n                * air_exit_velocity\n            )\n\n        # Thrust force (momentum + pressure thrust)\n        momentum_thrust = mass_flow_rate * air_exit_velocity\n        pressure_thrust = nozzle_area * (\n            air_exit_pressure - ATMOSPHERIC_PRESSURE\n        )\n        thrust_force = momentum_thrust + pressure_thrust\n\n        return (\n            thrust_force,\n            air_exit_velocity,\n            mass_flow_rate,\n            air_exit_pressure,\n            air_exit_temperature,\n        )\n\n    def calculate_air_mass_flow_rate(\n        self,\n        pressure,\n        temperature,\n        air_volume,\n        nozzle_area,\n        discharge_coefficient,\n    ):\n        \"\"\"\n        Calculate air mass flow rate and resulting pressure change.\n\n        Args:\n            pressure (float): Current pressure (Pa)\n            temperature (float): Current temperature (K)\n            air_volume (float): Current air volume (m\u00b3)\n            nozzle_area (float): Nozzle area (m\u00b2)\n            discharge_coefficient (float): Discharge coefficient\n\n        Returns:\n            float: Mass flow rate (kg/s)\n        \"\"\"\n        if pressure &lt;= ATMOSPHERIC_PRESSURE:\n            return 0.0\n\n        # Get mass flow rate from air thrust calculation\n        _, _, mass_flow_rate = self.calculate_air_thrust(\n            pressure, temperature, nozzle_area, discharge_coefficient\n        )\n\n        return mass_flow_rate\n\n    def calculate_drag(self, velocity, drag_coefficient, cross_sectional_area):\n        \"\"\"\n        Calculate drag force on the rocket.\n\n        Args:\n            velocity (float): Rocket velocity (m/s)\n            drag_coefficient (float): Drag coefficient\n            cross_sectional_area (float): Cross-sectional area (m\u00b2)\n\n        Returns:\n            float: Drag force (N)\n        \"\"\"\n        return (\n            0.5\n            * self.air_density\n            * velocity**2\n            * drag_coefficient\n            * cross_sectional_area\n            * np.sign(velocity)\n        )\n\n    def calculate_pressure_adiabatic(\n        self, initial_pressure, initial_volume, current_volume\n    ):\n        \"\"\"\n        Calculate pressure during adiabatic expansion.\n\n        Args:\n            initial_pressure (float): Initial pressure (Pa)\n            initial_volume (float): Initial air volume (m\u00b3)\n            current_volume (float): Current air volume (m\u00b3)\n\n        Returns:\n            float: Current pressure (Pa)\n        \"\"\"\n        if current_volume &lt;= 0:\n            return initial_pressure\n\n        return (\n            initial_pressure\n            * (initial_volume / current_volume) ** ADIABATIC_INDEX_AIR\n        )\n\n    def calculate_temperature_adiabatic(\n        self, initial_temperature, initial_pressure, current_pressure\n    ):\n        \"\"\"\n        Calculate temperature during adiabatic expansion.\n\n        Args:\n            initial_temperature (float): Initial temperature (K)\n            initial_pressure (float): Initial pressure (Pa)\n            current_pressure (float): Current pressure (Pa)\n\n        Returns:\n            float: Current temperature (K)\n        \"\"\"\n        return initial_temperature * (current_pressure / initial_pressure) ** (\n            (ADIABATIC_INDEX_AIR - 1) / ADIABATIC_INDEX_AIR\n        )\n\n    def calculate_air_volume(self, bottle_volume, water_mass):\n        \"\"\"\n        Calculate current air volume in the bottle.\n\n        Args:\n            bottle_volume (float): Total bottle volume (m\u00b3)\n            water_mass (float): Current water mass (kg)\n\n        Returns:\n            float: Air volume (m\u00b3)\n        \"\"\"\n        water_volume = water_mass / WATER_DENSITY\n        air_volume = bottle_volume - water_volume\n        return max(air_volume, 1e-10)  # Prevent division by zero\n\n    def calculate_air_volume_air_phase(\n        self, bottle_volume, initial_air_mass, current_air_mass\n    ):\n        \"\"\"\n        Calculate current air volume in the bottle.\n\n        Args:\n            bottle_volume (float): Total bottle volume (m\u00b3)\n            initial_air_mass (float): Initial air mass (kg)\n            current_air_mass (float): Current air mass (kg)\n\n        Returns:\n            float: Air volume (m\u00b3)\n        \"\"\"\n        current_air_density = current_air_mass / bottle_volume\n        theoretical_air_volume = initial_air_mass / current_air_density\n        return max(theoretical_air_volume, 1e-10)  # Prevent division by zero\n\n    def calculate_air_mass_from_conditions(\n        self, pressure, temperature, volume\n    ):\n        \"\"\"\n        Calculate air mass from thermodynamic conditions.\n\n        Args:\n            pressure (float): Pressure (Pa)\n            temperature (float): Temperature (K)\n            volume (float): Volume (m\u00b3)\n\n        Returns:\n            float: Air mass (kg)\n        \"\"\"\n        # Using ideal gas law: PV = mRT/M, so m = PV*M/(RT)\n        # For air, M/R = 1/R_specific where R_specific = 287 J/(kg\u00b7K)\n        return pressure * volume / (self.air_gas_constant * temperature)\n\n    def calculate_net_force(self, thrust, drag, mass):\n        \"\"\"\n        Calculate net force and acceleration.\n\n        Args:\n            thrust (float): Thrust force (N)\n            drag (float): Drag force (N)\n            mass (float): Total rocket mass (kg)\n\n        Returns:\n            tuple: (net_force, acceleration)\n        \"\"\"\n        net_force = thrust - drag\n        acceleration = net_force / mass - self.gravity\n        return net_force, acceleration\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_mass_flow_rate","title":"<code>calculate_air_mass_flow_rate(self, pressure, temperature, air_volume, nozzle_area, discharge_coefficient)</code>","text":"<p>Calculate air mass flow rate and resulting pressure change.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Current pressure (Pa)</p> required <code>temperature</code> <code>float</code> <p>Current temperature (K)</p> required <code>air_volume</code> <code>float</code> <p>Current air volume (m\u00b3)</p> required <code>nozzle_area</code> <code>float</code> <p>Nozzle area (m\u00b2)</p> required <code>discharge_coefficient</code> <code>float</code> <p>Discharge coefficient</p> required <p>Returns:</p> Type Description <code>float</code> <p>Mass flow rate (kg/s)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_mass_flow_rate(\n    self,\n    pressure,\n    temperature,\n    air_volume,\n    nozzle_area,\n    discharge_coefficient,\n):\n    \"\"\"\n    Calculate air mass flow rate and resulting pressure change.\n\n    Args:\n        pressure (float): Current pressure (Pa)\n        temperature (float): Current temperature (K)\n        air_volume (float): Current air volume (m\u00b3)\n        nozzle_area (float): Nozzle area (m\u00b2)\n        discharge_coefficient (float): Discharge coefficient\n\n    Returns:\n        float: Mass flow rate (kg/s)\n    \"\"\"\n    if pressure &lt;= ATMOSPHERIC_PRESSURE:\n        return 0.0\n\n    # Get mass flow rate from air thrust calculation\n    _, _, mass_flow_rate = self.calculate_air_thrust(\n        pressure, temperature, nozzle_area, discharge_coefficient\n    )\n\n    return mass_flow_rate\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_mass_from_conditions","title":"<code>calculate_air_mass_from_conditions(self, pressure, temperature, volume)</code>","text":"<p>Calculate air mass from thermodynamic conditions.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Pressure (Pa)</p> required <code>temperature</code> <code>float</code> <p>Temperature (K)</p> required <code>volume</code> <code>float</code> <p>Volume (m\u00b3)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Air mass (kg)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_mass_from_conditions(\n    self, pressure, temperature, volume\n):\n    \"\"\"\n    Calculate air mass from thermodynamic conditions.\n\n    Args:\n        pressure (float): Pressure (Pa)\n        temperature (float): Temperature (K)\n        volume (float): Volume (m\u00b3)\n\n    Returns:\n        float: Air mass (kg)\n    \"\"\"\n    # Using ideal gas law: PV = mRT/M, so m = PV*M/(RT)\n    # For air, M/R = 1/R_specific where R_specific = 287 J/(kg\u00b7K)\n    return pressure * volume / (self.air_gas_constant * temperature)\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_thrust","title":"<code>calculate_air_thrust(self, pressure, temperature, nozzle_area, discharge_coefficient)</code>","text":"<p>Calculate thrust force from air expulsion through converging nozzle. Hole prinziple: from values inside the tank, calculate the exit flow properties, from them calculate the change inside the tank :D</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Internal air pressure (Pa)</p> required <code>temperature</code> <code>float</code> <p>Internal air temperature (K)</p> required <code>nozzle_area</code> <code>float</code> <p>Nozzle cross-sectional area (m\u00b2)</p> required <code>discharge_coefficient</code> <code>float</code> <p>Discharge coefficient</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(thrust_force, air_exit_velocity, mass_flow_rate, air_exit_pressure, air_exit_temperature)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_thrust(\n    self, pressure, temperature, nozzle_area, discharge_coefficient\n):\n    \"\"\"\n    Calculate thrust force from air expulsion through converging nozzle.\n    Hole prinziple: from values inside the tank, calculate the exit flow properties, from them calculate the change inside the tank :D\n    Args:\n        pressure (float): Internal air pressure (Pa)\n        temperature (float): Internal air temperature (K)\n        nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n        discharge_coefficient (float): Discharge coefficient\n\n    Returns:\n        tuple: (thrust_force, air_exit_velocity, mass_flow_rate, air_exit_pressure, air_exit_temperature)\n    \"\"\"\n    if pressure &lt;= ATMOSPHERIC_PRESSURE:\n        return 0.0, 0.0, 0.0, 0.0, 0.0\n\n    gamma = ADIABATIC_INDEX_AIR\n    R = self.air_gas_constant\n\n    # Critical pressure ratio for choked flow\n    pressure_ratio_critical = (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n    pressure_ratio = pressure / ATMOSPHERIC_PRESSURE\n\n    # Check if flow is choked\n    if pressure_ratio &gt; pressure_ratio_critical:\n        # Choked flow - sonic at throat\n\n        # Throat conditions (sonic)\n        T_throat = temperature * (2 / (gamma + 1))\n        P_throat = pressure * (2 / (gamma + 1)) ** (gamma / (gamma - 1))\n        rho_throat = P_throat / (R * T_throat)\n\n        # Sonic velocity at throat\n        v_throat = np.sqrt(gamma * R * T_throat)\n\n        # Mass flow rate (choked)\n        mass_flow_rate = (\n            discharge_coefficient * rho_throat * nozzle_area * v_throat\n        )\n\n        # For converging nozzle, exit conditions = throat conditions\n        air_exit_velocity = v_throat\n        air_exit_pressure = P_throat\n        air_exit_temperature = T_throat\n\n    else:\n        # Subsonic flow - exit pressure = ambient pressure\n        air_exit_pressure = ATMOSPHERIC_PRESSURE\n\n        # Isentropic relations for exit conditions\n        pressure_ratio_exit = air_exit_pressure / pressure\n        T_exit = temperature * (\n            pressure_ratio_exit ** ((gamma - 1) / gamma)\n        )\n        rho_exit = air_exit_pressure / (R * T_exit)\n\n        # Exit velocity from isentropic relations\n        air_exit_velocity = np.sqrt(\n            2\n            * gamma\n            * R\n            * temperature\n            / (\n                gamma - 1\n            )  # TODO woher kommt das /(gamma-1) her - \u00fcberpr\u00fcfe die gleichungen\n            * (1 - pressure_ratio_exit ** ((gamma - 1) / gamma))\n        )\n\n        # Mass flow rate\n        mass_flow_rate = (\n            discharge_coefficient\n            * rho_exit\n            * nozzle_area\n            * air_exit_velocity\n        )\n\n    # Thrust force (momentum + pressure thrust)\n    momentum_thrust = mass_flow_rate * air_exit_velocity\n    pressure_thrust = nozzle_area * (\n        air_exit_pressure - ATMOSPHERIC_PRESSURE\n    )\n    thrust_force = momentum_thrust + pressure_thrust\n\n    return (\n        thrust_force,\n        air_exit_velocity,\n        mass_flow_rate,\n        air_exit_pressure,\n        air_exit_temperature,\n    )\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_volume","title":"<code>calculate_air_volume(self, bottle_volume, water_mass)</code>","text":"<p>Calculate current air volume in the bottle.</p> <p>Parameters:</p> Name Type Description Default <code>bottle_volume</code> <code>float</code> <p>Total bottle volume (m\u00b3)</p> required <code>water_mass</code> <code>float</code> <p>Current water mass (kg)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Air volume (m\u00b3)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_volume(self, bottle_volume, water_mass):\n    \"\"\"\n    Calculate current air volume in the bottle.\n\n    Args:\n        bottle_volume (float): Total bottle volume (m\u00b3)\n        water_mass (float): Current water mass (kg)\n\n    Returns:\n        float: Air volume (m\u00b3)\n    \"\"\"\n    water_volume = water_mass / WATER_DENSITY\n    air_volume = bottle_volume - water_volume\n    return max(air_volume, 1e-10)  # Prevent division by zero\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_air_volume_air_phase","title":"<code>calculate_air_volume_air_phase(self, bottle_volume, initial_air_mass, current_air_mass)</code>","text":"<p>Calculate current air volume in the bottle.</p> <p>Parameters:</p> Name Type Description Default <code>bottle_volume</code> <code>float</code> <p>Total bottle volume (m\u00b3)</p> required <code>initial_air_mass</code> <code>float</code> <p>Initial air mass (kg)</p> required <code>current_air_mass</code> <code>float</code> <p>Current air mass (kg)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Air volume (m\u00b3)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_air_volume_air_phase(\n    self, bottle_volume, initial_air_mass, current_air_mass\n):\n    \"\"\"\n    Calculate current air volume in the bottle.\n\n    Args:\n        bottle_volume (float): Total bottle volume (m\u00b3)\n        initial_air_mass (float): Initial air mass (kg)\n        current_air_mass (float): Current air mass (kg)\n\n    Returns:\n        float: Air volume (m\u00b3)\n    \"\"\"\n    current_air_density = current_air_mass / bottle_volume\n    theoretical_air_volume = initial_air_mass / current_air_density\n    return max(theoretical_air_volume, 1e-10)  # Prevent division by zero\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_drag","title":"<code>calculate_drag(self, velocity, drag_coefficient, cross_sectional_area)</code>","text":"<p>Calculate drag force on the rocket.</p> <p>Parameters:</p> Name Type Description Default <code>velocity</code> <code>float</code> <p>Rocket velocity (m/s)</p> required <code>drag_coefficient</code> <code>float</code> <p>Drag coefficient</p> required <code>cross_sectional_area</code> <code>float</code> <p>Cross-sectional area (m\u00b2)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Drag force (N)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_drag(self, velocity, drag_coefficient, cross_sectional_area):\n    \"\"\"\n    Calculate drag force on the rocket.\n\n    Args:\n        velocity (float): Rocket velocity (m/s)\n        drag_coefficient (float): Drag coefficient\n        cross_sectional_area (float): Cross-sectional area (m\u00b2)\n\n    Returns:\n        float: Drag force (N)\n    \"\"\"\n    return (\n        0.5\n        * self.air_density\n        * velocity**2\n        * drag_coefficient\n        * cross_sectional_area\n        * np.sign(velocity)\n    )\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_net_force","title":"<code>calculate_net_force(self, thrust, drag, mass)</code>","text":"<p>Calculate net force and acceleration.</p> <p>Parameters:</p> Name Type Description Default <code>thrust</code> <code>float</code> <p>Thrust force (N)</p> required <code>drag</code> <code>float</code> <p>Drag force (N)</p> required <code>mass</code> <code>float</code> <p>Total rocket mass (kg)</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(net_force, acceleration)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_net_force(self, thrust, drag, mass):\n    \"\"\"\n    Calculate net force and acceleration.\n\n    Args:\n        thrust (float): Thrust force (N)\n        drag (float): Drag force (N)\n        mass (float): Total rocket mass (kg)\n\n    Returns:\n        tuple: (net_force, acceleration)\n    \"\"\"\n    net_force = thrust - drag\n    acceleration = net_force / mass - self.gravity\n    return net_force, acceleration\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_pressure_adiabatic","title":"<code>calculate_pressure_adiabatic(self, initial_pressure, initial_volume, current_volume)</code>","text":"<p>Calculate pressure during adiabatic expansion.</p> <p>Parameters:</p> Name Type Description Default <code>initial_pressure</code> <code>float</code> <p>Initial pressure (Pa)</p> required <code>initial_volume</code> <code>float</code> <p>Initial air volume (m\u00b3)</p> required <code>current_volume</code> <code>float</code> <p>Current air volume (m\u00b3)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Current pressure (Pa)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_pressure_adiabatic(\n    self, initial_pressure, initial_volume, current_volume\n):\n    \"\"\"\n    Calculate pressure during adiabatic expansion.\n\n    Args:\n        initial_pressure (float): Initial pressure (Pa)\n        initial_volume (float): Initial air volume (m\u00b3)\n        current_volume (float): Current air volume (m\u00b3)\n\n    Returns:\n        float: Current pressure (Pa)\n    \"\"\"\n    if current_volume &lt;= 0:\n        return initial_pressure\n\n    return (\n        initial_pressure\n        * (initial_volume / current_volume) ** ADIABATIC_INDEX_AIR\n    )\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_temperature_adiabatic","title":"<code>calculate_temperature_adiabatic(self, initial_temperature, initial_pressure, current_pressure)</code>","text":"<p>Calculate temperature during adiabatic expansion.</p> <p>Parameters:</p> Name Type Description Default <code>initial_temperature</code> <code>float</code> <p>Initial temperature (K)</p> required <code>initial_pressure</code> <code>float</code> <p>Initial pressure (Pa)</p> required <code>current_pressure</code> <code>float</code> <p>Current pressure (Pa)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Current temperature (K)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_temperature_adiabatic(\n    self, initial_temperature, initial_pressure, current_pressure\n):\n    \"\"\"\n    Calculate temperature during adiabatic expansion.\n\n    Args:\n        initial_temperature (float): Initial temperature (K)\n        initial_pressure (float): Initial pressure (Pa)\n        current_pressure (float): Current pressure (Pa)\n\n    Returns:\n        float: Current temperature (K)\n    \"\"\"\n    return initial_temperature * (current_pressure / initial_pressure) ** (\n        (ADIABATIC_INDEX_AIR - 1) / ADIABATIC_INDEX_AIR\n    )\n</code></pre>"},{"location":"api/waterrocketpy/core/physics_engine/#waterrocketpy.core.physics_engine.PhysicsEngine.calculate_water_thrust","title":"<code>calculate_water_thrust(self, pressure, nozzle_area, discharge_coefficient)</code>","text":"<p>Calculate thrust force from water expulsion.</p> <p>Parameters:</p> Name Type Description Default <code>pressure</code> <code>float</code> <p>Internal pressure (Pa)</p> required <code>nozzle_area</code> <code>float</code> <p>Nozzle cross-sectional area (m\u00b2)</p> required <code>discharge_coefficient</code> <code>float</code> <p>Discharge coefficient</p> required <p>Returns:</p> Type Description <code>tuple</code> <p>(thrust_force, exit_velocity, mass_flow_rate)</p> Source code in <code>waterrocketpy/core/physics_engine.py</code> <pre><code>def calculate_water_thrust(\n    self, pressure, nozzle_area, discharge_coefficient\n):\n    \"\"\"\n    Calculate thrust force from water expulsion.\n\n    Args:\n        pressure (float): Internal pressure (Pa)\n        nozzle_area (float): Nozzle cross-sectional area (m\u00b2)\n        discharge_coefficient (float): Discharge coefficient\n\n    Returns:\n        tuple: (thrust_force, exit_velocity, mass_flow_rate)\n    \"\"\"\n    pressure_diff = max(pressure - ATMOSPHERIC_PRESSURE, 0)\n\n    # Exit velocity using Torricelli's equation\n    exit_velocity = discharge_coefficient * np.sqrt(\n        2 * pressure_diff / WATER_DENSITY\n    )\n\n    # Mass flow rate\n    mass_flow_rate = WATER_DENSITY * nozzle_area * exit_velocity\n\n    # Thrust force\n    thrust_force = mass_flow_rate * exit_velocity\n\n    return thrust_force, exit_velocity, mass_flow_rate\n</code></pre>"},{"location":"api/waterrocketpy/core/simulation/","title":"waterrocketpy.core.simulation","text":"<p>Main simulation engine for water rocket flight.</p>"},{"location":"api/waterrocketpy/core/simulation/#waterrocketpy.core.simulation.FlightData","title":"<code> FlightData        </code>  <code>dataclass</code>","text":"<p>Container for flight simulation results.</p> Source code in <code>waterrocketpy/core/simulation.py</code> <pre><code>@dataclass\nclass FlightData:\n    \"\"\"Container for flight simulation results.\"\"\"\n\n    time: np.ndarray\n    altitude: np.ndarray\n    velocity: np.ndarray\n    acceleration: np.ndarray\n    water_mass: np.ndarray\n    liquid_gas_mass: np.ndarray\n    air_mass: np.ndarray\n    pressure: np.ndarray\n    air_temperature: np.ndarray\n    thrust: np.ndarray\n    drag: np.ndarray\n\n    water_exhaust_speed: np.ndarray\n    air_exhaust_speed: np.ndarray\n    water_mass_flow_rate: np.ndarray\n    air_mass_flow_rate: np.ndarray\n    air_exit_pressure: np.ndarray\n    air_exit_temperature: np.ndarray\n\n    max_altitude: float\n    max_velocity: float\n    flight_time: float\n    water_depletion_time: float\n    air_depletion_time: float\n</code></pre>"},{"location":"api/waterrocketpy/core/simulation/#waterrocketpy.core.simulation.WaterRocketSimulator","title":"<code> WaterRocketSimulator        </code>","text":"<p>Main simulation class for water rocket flight.</p> Source code in <code>waterrocketpy/core/simulation.py</code> <pre><code>class WaterRocketSimulator:\n    \"\"\"Main simulation class for water rocket flight.\"\"\"\n\n    def __init__(self, physics_engine: PhysicsEngine = None, verbose: bool = True):\n        self.physics_engine = physics_engine or PhysicsEngine()\n        self.validator = ParameterValidator()\n        self.verbose = verbose  # Enable verbose output for debugging\n\n        # Storage for derived quantities during integration\n        self.derived_data = {\n            \"time\": [],\n            \"pressure\": [],\n            \"temperature\": [],\n            \"thrust\": [],\n            \"drag\": [],\n            \"water_exhaust_speed\": [],\n            \"air_exhaust_speed\": [],\n            \"water_mass_flow_rate\": [],\n            \"air_mass_flow_rate\": [],\n            \"air_exit_pressure\": [],\n            \"air_exit_temperature\": [],\n        }\n\n    def _store_derived_quantities(\n        self,\n        t,\n        pressure,\n        temperature,\n        thrust,\n        drag,\n        water_exhaust_speed=None,\n        air_exhaust_speed=None,\n        water_mass_flow_rate=None,\n        air_mass_flow_rate=None,\n        air_exit_pressure=None,\n        air_exit_temperature=None,\n    ):\n        self.derived_data[\"time\"].append(t)\n        self.derived_data[\"pressure\"].append(pressure)\n        self.derived_data[\"temperature\"].append(temperature)\n        self.derived_data[\"thrust\"].append(thrust)\n        self.derived_data[\"drag\"].append(drag)\n        self.derived_data[\"water_exhaust_speed\"].append(water_exhaust_speed)\n        self.derived_data[\"air_exhaust_speed\"].append(air_exhaust_speed)\n        self.derived_data[\"water_mass_flow_rate\"].append(water_mass_flow_rate)\n        self.derived_data[\"air_mass_flow_rate\"].append(air_mass_flow_rate)\n        self.derived_data[\"air_exit_pressure\"].append(air_exit_pressure)\n        self.derived_data[\"air_exit_temperature\"].append(air_exit_temperature)\n\n    def _rocket_ode_water_phase(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; np.ndarray:\n        \"\"\"\n        ODE system for rocket dynamics during water expulsion phase.\n\n        Args:\n            t: Current time\n            state: [altitude, velocity, water_mass, liquid_gas_mass]\n            params: Rocket parameters\n\n        Returns:\n            Derivatives [velocity, acceleration, dm_water/dt, dm_gas/dt]\n        \"\"\"\n        altitude, velocity, water_mass, liquid_gas_mass = state\n\n        # Calculate current air volume\n        air_volume = self.physics_engine.calculate_air_volume(\n            params[\"V_bottle\"], water_mass\n        )\n\n        # Calculate pressure and temperature\n        if water_mass &gt; 0 and liquid_gas_mass &gt; 0:\n            # Pressure from vaporizing liquid gas (constant while liquid\n            # remains)\n            pressure = 10e5  # 10 bar in Pa\n            air_temperature = INITIAL_TEMPERATURE\n            dm_dt_liquid_gas = (\n                0  # Simplified: no vaporization rate calculation\n            )\n        else:\n            dm_dt_liquid_gas = 0\n            if water_mass &gt; 0 or True:\n                # Adiabatic expansion\n                initial_air_volume = params[\"V_bottle\"] * (\n                    1 - params[\"water_fraction\"]\n                )\n                pressure = self.physics_engine.calculate_pressure_adiabatic(\n                    params[\"P0\"], initial_air_volume, air_volume\n                )\n                air_temperature = (\n                    self.physics_engine.calculate_temperature_adiabatic(\n                        INITIAL_TEMPERATURE, params[\"P0\"], pressure\n                    )\n                )\n            else:  # NO, bad. should not happen\n                pressure = ATMOSPHERIC_PRESSURE\n                air_temperature = INITIAL_TEMPERATURE\n\n        # Calculate thrust and mass flow rate\n        if water_mass &gt; 0:\n            thrust, exit_water_velocity, mass_flow_rate = (\n                self.physics_engine.calculate_water_thrust(\n                    pressure, params[\"A_nozzle\"], params[\"C_d\"]\n                )\n            )\n            dm_dt_water = -mass_flow_rate\n        else:\n            thrust = 0\n            dm_dt_water = 0\n            exit_water_velocity = None\n            mass_flow_rate = None\n\n        # Calculate drag\n        drag = self.physics_engine.calculate_drag(\n            velocity, params[\"C_drag\"], params[\"A_rocket\"]\n        )\n\n        # Store derived quantities\n        self._store_derived_quantities(\n            t,\n            pressure,\n            air_temperature,\n            thrust,\n            drag,\n            water_exhaust_speed=exit_water_velocity,\n            water_mass_flow_rate=mass_flow_rate,\n        )\n\n        # Calculate acceleration\n        total_mass = params[\"m_empty\"] + water_mass\n        _, acceleration = self.physics_engine.calculate_net_force(\n            thrust, drag, total_mass\n        )\n\n        return np.array(\n            [velocity, acceleration, dm_dt_water, dm_dt_liquid_gas]\n        )\n\n    def _rocket_ode_air_phase(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; np.ndarray:\n        \"\"\"\n        ODE system for rocket dynamics during air expulsion phase.\n\n        Args:\n            t: Current time\n            state: [altitude, velocity, air_mass, temperature]\n            params: Rocket parameters\n\n        Returns:\n            Derivatives [velocity, acceleration, dm_air/dt, dT/dt]\n        \"\"\"\n        altitude, velocity, air_mass, air_temperature = state\n\n        if air_mass &lt;= 0:\n            # Store zero values for derived quantities\n            self._store_derived_quantities(\n                t, ATMOSPHERIC_PRESSURE, air_temperature, 0, 0\n            )\n            return np.array([velocity, -self.physics_engine.gravity, 0, 0])\n\n        # Calculate current air volume and pressure\n        air_volume = params[\"V_bottle\"]  # All bottle volume is now air\n\n        # Calculate pressure from ideal gas law: P = mRT/V\n        pressure = (\n            air_mass\n            * self.physics_engine.air_gas_constant\n            * air_temperature\n            / air_volume\n        )\n\n        # Ensure pressure doesn't go below atmospheric\n        pressure = max(pressure, ATMOSPHERIC_PRESSURE)\n\n        # Calculate air thrust and mass flow rate\n        if pressure &gt; ATMOSPHERIC_PRESSURE:\n            (\n                thrust,\n                exit_air_velocity,\n                mass_flow_rate,\n                air_exit_pressure,\n                air_exit_temperature,\n            ) = self.physics_engine.calculate_air_thrust(\n                pressure, air_temperature, params[\"A_nozzle\"], params[\"C_d\"]\n            )\n            dm_dt_air = -mass_flow_rate\n\n            # Recommended (correct):\n            if air_mass &gt; 0:\n                dT_dt = air_temperature * (ADIABATIC_INDEX_AIR - 1) / air_mass * dm_dt_air\n            else:\n                dT_dt = 0\n\n        else:\n            thrust = 0\n            dm_dt_air = 0\n            dT_dt = 0\n            exit_air_velocity = None\n            mass_flow_rate = None\n            air_exit_pressure = None\n            air_exit_temperature = None\n\n        # Calculate drag\n        drag = self.physics_engine.calculate_drag(\n            velocity, params[\"C_drag\"], params[\"A_rocket\"]\n        )\n\n        # Store derived quantities\n        self._store_derived_quantities(\n            t,\n            pressure,\n            air_temperature,\n            thrust,\n            drag,\n            air_exhaust_speed=exit_air_velocity,\n            air_mass_flow_rate=mass_flow_rate,\n            air_exit_pressure=air_exit_pressure,\n            air_exit_temperature=air_exit_temperature,\n        )\n\n        # Calculate acceleration\n        total_mass = params[\"m_empty\"] + air_mass\n        _, acceleration = self.physics_engine.calculate_net_force(\n            thrust, drag, total_mass\n        )\n\n        return np.array([velocity, acceleration, dm_dt_air, dT_dt])\n\n    def _rocket_ode_coasting_phase(\n        self,\n        t: float,\n        state: np.ndarray,\n        params: Dict[str, Any],\n        final_air_pressure,\n        final_air_temperature,\n    ) -&gt; np.ndarray:\n        \"\"\"\n        ODE system for rocket dynamics during coasting phase.\n\n        Args:\n            t: Current time\n            state: [altitude, velocity]\n            params: Rocket parameters\n\n        Returns:\n            Derivatives [velocity, acceleration]\n        \"\"\"\n        altitude, velocity = state\n\n        # Only drag and gravity forces\n        drag = self.physics_engine.calculate_drag(\n            velocity, params[\"C_drag\"], params[\"A_rocket\"]\n        )\n\n        # Store derived quantities\n        self._store_derived_quantities(\n            t,\n            final_air_pressure,\n            final_air_temperature,\n            0,\n            drag,\n            water_exhaust_speed=None,\n            air_exhaust_speed=None,\n            water_mass_flow_rate=0,\n            air_mass_flow_rate=0,\n            air_exit_pressure=None,\n            air_exit_temperature=None,\n        )\n\n        # Calculate acceleration\n        total_mass = params[\"m_empty\"]\n        _, acceleration = self.physics_engine.calculate_net_force(\n            0, drag, total_mass\n        )\n\n        return np.array([velocity, acceleration])\n\n    def _water_depletion_event(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; float:\n        \"\"\"Event function to detect water depletion.\"\"\"\n        return state[2]  # water_mass\n\n    def _air_depletion_event(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; float:\n        \"\"\"Event function to detect air depletion (pressure = atmospheric).\"\"\"\n        if len(state) &lt; 4:\n            return 1.0  # Not in air phase\n\n        altitude, velocity, air_mass, air_temperature = state\n        if air_mass &lt;= 0:\n            return 0.0\n\n        # Calculate pressure\n        air_volume = params[\"V_bottle\"]\n        pressure = (\n            air_mass\n            * self.physics_engine.air_gas_constant\n            * air_temperature\n            / air_volume\n        )\n        #print(f\"Pressure at t={t:.3f}s: {pressure:.2f} Pa\")\n        return pressure - ATMOSPHERIC_PRESSURE\n\n    def _hit_ground_event(\n        self, t: float, state: np.ndarray, params: Dict[str, Any]\n    ) -&gt; float:\n        \"\"\"Event function to detect _hit_ground_event (altetude &lt; 0 ).\"\"\"\n        # if len(state) &lt; 4:\n        #    return 1.0  # Not in air phase\n\n        altitude, velocity = state\n        if altitude &lt;= 0:\n            return 0.0\n        return altitude\n\n    def _setup_water_events(self, params: Dict[str, Any]):\n        \"\"\"Setup event functions for water phase simulation.\"\"\"\n\n        def water_depletion(t, state, *args):\n            return self._water_depletion_event(t, state, params)\n\n        water_depletion.terminal = True\n        water_depletion.direction = -1\n\n        return [water_depletion]\n\n    def _setup_air_events(self, params: Dict[str, Any]):\n        \"\"\"Setup event functions for air phase simulation.\"\"\"\n\n        def air_depletion(t, state, *args):\n            return self._air_depletion_event(t, state, params)\n\n        air_depletion.terminal = True\n        air_depletion.direction = -1\n\n        return [air_depletion]\n\n    def _setup_coasting_events(self, params: Dict[str, Any]):\n        \"\"\"Setup event functions for coasting phase simulation.\"\"\"\n\n        def hit_ground(t, state, *args):\n            return self._hit_ground_event(t, state, params)\n\n        hit_ground.terminal = True\n        hit_ground.direction = -1\n\n        return [hit_ground]\n\n    def simulate(\n        self, rocket_params: Dict[str, Any], sim_params: Dict[str, Any] = None\n    ) -&gt; FlightData:\n        \"\"\"\n        Run complete water rocket simulation with three phases.\n\n        Args:\n            rocket_params: Rocket configuration parameters\n            sim_params: Simulation parameters (optional)\n\n        Returns:\n            FlightData object with simulation results\n        \"\"\"\n        # Validate parameters\n        warnings = self.validator.validate_rocket_parameters(rocket_params)\n        if warnings:\n            print(\"Warnings:\", warnings)\n\n        # Set default simulation parameters\n        if sim_params is None:\n            sim_params = {}\n\n        max_time = sim_params.get(\"max_time\", DEFAULT_MAX_TIME)\n        time_step = sim_params.get(\"time_step\", DEFAULT_TIME_STEP)\n        solver = sim_params.get(\"solver\", DEFAULT_SOLVER)\n\n        # Initialize storage for derived quantities\n        self.derived_data = {\n            \"time\": [],\n            \"pressure\": [],\n            \"temperature\": [],\n            \"thrust\": [],\n            \"drag\": [],\n            \"water_exhaust_speed\": [],\n            \"air_exhaust_speed\": [],\n            \"water_mass_flow_rate\": [],\n            \"air_mass_flow_rate\": [],\n            \"air_exit_pressure\": [],\n            \"air_exit_temperature\": [],\n        }\n\n        # Initialize storage for all phases\n        all_times = []\n        all_altitudes = []\n        all_velocities = []\n        all_water_masses = []\n        all_liquid_gas_masses = []\n        all_air_masses = []\n\n        water_depletion_time = 0.0\n        air_depletion_time = 0.0\n\n        # Phase 1: Water expulsion phase\n        if self.verbose:\n            print(\"Starting water expulsion phase...\")\n        water_volume_initial = (\n            rocket_params[\"V_bottle\"] * rocket_params[\"water_fraction\"]\n        )\n        water_mass_initial = WATER_DENSITY * water_volume_initial\n        liquid_gas_mass_initial = rocket_params.get(\"liquid_gas_mass\", 0.0)\n\n        initial_state_water = np.array(\n            [0.0, 0.0, water_mass_initial, liquid_gas_mass_initial]\n        )\n        time_span = (0, max_time)\n\n        # Setup events for water phase\n        water_events = self._setup_water_events(rocket_params)\n\n        # Solve water phase\n        solution_water = solve_ivp(\n            self._rocket_ode_water_phase,\n            time_span,\n            initial_state_water,\n            args=(rocket_params,),\n            events=water_events,\n            max_step=time_step,\n            method=solver,\n            rtol=1e-8,\n            atol=1e-10,\n        )\n\n        # Store water phase results\n        all_times.append(solution_water.t)\n        all_altitudes.append(solution_water.y[0, :])\n        all_velocities.append(solution_water.y[1, :])\n        all_water_masses.append(solution_water.y[2, :])\n        all_liquid_gas_masses.append(solution_water.y[3, :])\n\n        # Calculate air mass during water phase\n        initial_air_volume = rocket_params[\"V_bottle\"] * (\n            1 - rocket_params[\"water_fraction\"]\n        )\n        initial_air_mass = (\n            self.physics_engine.calculate_air_mass_from_conditions(\n                rocket_params[\"P0\"], INITIAL_TEMPERATURE, initial_air_volume\n            )\n        )\n        air_masses_water_phase = np.full_like(\n            solution_water.t, initial_air_mass\n        )\n        all_air_masses.append(air_masses_water_phase)\n\n        # Phase 2: Air expulsion phase (if water depleted)\n        if solution_water.t_events[0].size &gt; 0:\n            water_depletion_time = solution_water.t_events[0][0]\n            if self.verbose:\n                print(\n                    f\"Water depleted at t={water_depletion_time:.3f}s, starting air expulsion phase...\"\n                )\n\n            # Get final state from water phase\n            final_state_water = solution_water.y[:, -1]\n\n            # Calculate initial conditions for air phase\n            final_altitude = final_state_water[0]\n            final_velocity = final_state_water[1]\n\n            # Calculate air mass and temperature at start of air phase\n            air_volume_at_transition = rocket_params[\"V_bottle\"]\n            initial_air_volume = rocket_params[\"V_bottle\"] * (\n                1 - rocket_params[\"water_fraction\"]\n            )\n\n            # Pressure at end of water phase\n            pressure_at_transition = (\n                self.physics_engine.calculate_pressure_adiabatic(\n                    rocket_params[\"P0\"],\n                    initial_air_volume,\n                    air_volume_at_transition,\n                )\n            )\n\n            # Temperature at end of water phase\n            temperature_at_transition = (\n                self.physics_engine.calculate_temperature_adiabatic(\n                    INITIAL_TEMPERATURE,\n                    rocket_params[\"P0\"],\n                    pressure_at_transition,\n                )\n            )\n\n            # Air mass at transition\n            air_mass_at_transition = (\n                self.physics_engine.calculate_air_mass_from_conditions(\n                    pressure_at_transition,\n                    temperature_at_transition,\n                    air_volume_at_transition,\n                )\n            )\n\n            initial_state_air = np.array(\n                [\n                    final_altitude,\n                    final_velocity,\n                    air_mass_at_transition,\n                    temperature_at_transition,\n                ]\n            )\n\n            # Setup events for air phase\n            air_events = self._setup_air_events(rocket_params)\n\n            # Solve air phase\n            solution_air = solve_ivp(\n                self._rocket_ode_air_phase,\n                (water_depletion_time, max_time),\n                initial_state_air,\n                args=(rocket_params,),\n                events=air_events,\n                max_step=time_step,\n                method=solver,\n                rtol=1e-8,\n                atol=1e-10,\n            )\n            final_air_mass = solution_air.y[2, -1]\n            final_air_temperature = solution_air.y[3, -1]\n            final_air_pressure = (\n                final_air_mass\n                * self.physics_engine.air_gas_constant\n                * final_air_temperature\n                / rocket_params[\"V_bottle\"]\n            )\n\n            # Store air phase results\n            all_times.append(solution_air.t)\n            all_altitudes.append(solution_air.y[0, :])\n            all_velocities.append(solution_air.y[1, :])\n            all_water_masses.append(np.zeros_like(solution_air.t))\n            all_liquid_gas_masses.append(np.zeros_like(solution_air.t))\n            all_air_masses.append(solution_air.y[2, :])\n\n            # Phase 3: Coasting phase (if air depleted)\n            if solution_air.t_events[0].size &gt; 0:\n                air_depletion_time = solution_air.t_events[0][0]\n                if self.verbose:\n                    print(\n                        f\"Air depleted at t={air_depletion_time:.3f}s, starting coasting phase...\"\n                    )\n\n                # Get final state from air phase\n                final_state_air = solution_air.y[:, -1]\n                final_altitude = final_state_air[0]\n                final_velocity = final_state_air[1]\n\n                initial_state_coasting = np.array(\n                    [final_altitude, final_velocity]\n                )\n                # Setup events for coasting phase\n                coasting_events = self._setup_coasting_events(rocket_params)\n                # Solve coasting phase\n                solution_coasting = solve_ivp(\n                    lambda t, y: self._rocket_ode_coasting_phase(\n                        t,\n                        y,\n                        rocket_params,\n                        final_air_pressure,\n                        final_air_temperature,\n                    ),\n                    (air_depletion_time, max_time),\n                    initial_state_coasting,\n                    # args=(rocket_params,),\n                    events=coasting_events,\n                    max_step=time_step,\n                    method=solver,\n                    rtol=1e-8,\n                    atol=1e-10,\n                )\n\n                # Store coasting phase results\n                all_times.append(solution_coasting.t)\n                all_altitudes.append(solution_coasting.y[0, :])\n                all_velocities.append(solution_coasting.y[1, :])\n                all_water_masses.append(np.zeros_like(solution_coasting.t))\n                all_liquid_gas_masses.append(\n                    np.zeros_like(solution_coasting.t)\n                )\n                all_air_masses.append(\n                    np.ones_like(solution_coasting.t) * final_air_mass\n                )\n                # i just want to have the same air mass temperature and\n                # pressure as after the end of the air run.\n\n        # Combine all phases\n        time = np.concatenate(all_times)\n        altitude = np.concatenate(all_altitudes)\n        velocity = np.concatenate(all_velocities)\n        water_mass = np.concatenate(all_water_masses)\n        liquid_gas_mass = np.concatenate(all_liquid_gas_masses)\n        air_mass = np.concatenate(all_air_masses)\n\n        # Remove duplicates from the original time series arrays\n        time, altitude, velocity, water_mass, liquid_gas_mass, air_mass = filter_unique_time_series(\n            time, altitude, velocity, water_mass, liquid_gas_mass, air_mass\n        )\n\n        # Convert to NumPy for interpolation\n        derived_time = np.array(self.derived_data[\"time\"])\n        # Interpolate each quantity\n        pressure = interp1d(\n            derived_time,\n            self.derived_data[\"pressure\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n        air_temperature = interp1d(\n            derived_time,\n            self.derived_data[\"temperature\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n        thrust = interp1d(\n            derived_time,\n            self.derived_data[\"thrust\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n        drag = interp1d(\n            derived_time,\n            self.derived_data[\"drag\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=\"extrapolate\",\n        )(time)\n\n        # Interpolate additional derived quantities\n        water_exhaust_speed = interp1d(\n            derived_time,\n            self.derived_data[\"water_exhaust_speed\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        air_exhaust_speed = interp1d(\n            derived_time,\n            self.derived_data[\"air_exhaust_speed\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        water_mass_flow_rate = interp1d(\n            derived_time,\n            self.derived_data[\"water_mass_flow_rate\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        air_mass_flow_rate = interp1d(\n            derived_time,\n            self.derived_data[\"air_mass_flow_rate\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=0.0,\n        )(time)\n        air_exit_pressure = interp1d(\n            derived_time,\n            self.derived_data[\"air_exit_pressure\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=ATMOSPHERIC_PRESSURE,\n        )(time)\n        air_exit_temperature = interp1d(\n            derived_time,\n            self.derived_data[\"air_exit_temperature\"],\n            kind=\"linear\",\n            bounds_error=False,\n            fill_value=INITIAL_TEMPERATURE,\n        )(time)\n\n        # Calculate accelerations\n        acceleration = np.gradient(velocity, time)\n\n        # Create flight data object\n        flight_data = FlightData(\n            time=time,\n            altitude=altitude,\n            velocity=velocity,\n            acceleration=acceleration,\n            water_mass=water_mass,\n            liquid_gas_mass=liquid_gas_mass,\n            air_mass=air_mass,\n            pressure=pressure,\n            air_temperature=air_temperature,\n            thrust=thrust,\n            drag=drag,\n            water_exhaust_speed=water_exhaust_speed,\n            air_exhaust_speed=air_exhaust_speed,\n            water_mass_flow_rate=water_mass_flow_rate,\n            air_mass_flow_rate=air_mass_flow_rate,\n            air_exit_pressure=air_exit_pressure,\n            air_exit_temperature=air_exit_temperature,\n            max_altitude=np.max(altitude),\n            max_velocity=np.max(velocity),\n            flight_time=time[-1],\n            water_depletion_time=water_depletion_time,\n            air_depletion_time=air_depletion_time,\n        )\n\n        return flight_data\n</code></pre>"},{"location":"api/waterrocketpy/core/simulation/#waterrocketpy.core.simulation.WaterRocketSimulator.simulate","title":"<code>simulate(self, rocket_params, sim_params=None)</code>","text":"<p>Run complete water rocket simulation with three phases.</p> <p>Parameters:</p> Name Type Description Default <code>rocket_params</code> <code>Dict[str, Any]</code> <p>Rocket configuration parameters</p> required <code>sim_params</code> <code>Dict[str, Any]</code> <p>Simulation parameters (optional)</p> <code>None</code> <p>Returns:</p> Type Description <code>FlightData</code> <p>FlightData object with simulation results</p> Source code in <code>waterrocketpy/core/simulation.py</code> <pre><code>def simulate(\n    self, rocket_params: Dict[str, Any], sim_params: Dict[str, Any] = None\n) -&gt; FlightData:\n    \"\"\"\n    Run complete water rocket simulation with three phases.\n\n    Args:\n        rocket_params: Rocket configuration parameters\n        sim_params: Simulation parameters (optional)\n\n    Returns:\n        FlightData object with simulation results\n    \"\"\"\n    # Validate parameters\n    warnings = self.validator.validate_rocket_parameters(rocket_params)\n    if warnings:\n        print(\"Warnings:\", warnings)\n\n    # Set default simulation parameters\n    if sim_params is None:\n        sim_params = {}\n\n    max_time = sim_params.get(\"max_time\", DEFAULT_MAX_TIME)\n    time_step = sim_params.get(\"time_step\", DEFAULT_TIME_STEP)\n    solver = sim_params.get(\"solver\", DEFAULT_SOLVER)\n\n    # Initialize storage for derived quantities\n    self.derived_data = {\n        \"time\": [],\n        \"pressure\": [],\n        \"temperature\": [],\n        \"thrust\": [],\n        \"drag\": [],\n        \"water_exhaust_speed\": [],\n        \"air_exhaust_speed\": [],\n        \"water_mass_flow_rate\": [],\n        \"air_mass_flow_rate\": [],\n        \"air_exit_pressure\": [],\n        \"air_exit_temperature\": [],\n    }\n\n    # Initialize storage for all phases\n    all_times = []\n    all_altitudes = []\n    all_velocities = []\n    all_water_masses = []\n    all_liquid_gas_masses = []\n    all_air_masses = []\n\n    water_depletion_time = 0.0\n    air_depletion_time = 0.0\n\n    # Phase 1: Water expulsion phase\n    if self.verbose:\n        print(\"Starting water expulsion phase...\")\n    water_volume_initial = (\n        rocket_params[\"V_bottle\"] * rocket_params[\"water_fraction\"]\n    )\n    water_mass_initial = WATER_DENSITY * water_volume_initial\n    liquid_gas_mass_initial = rocket_params.get(\"liquid_gas_mass\", 0.0)\n\n    initial_state_water = np.array(\n        [0.0, 0.0, water_mass_initial, liquid_gas_mass_initial]\n    )\n    time_span = (0, max_time)\n\n    # Setup events for water phase\n    water_events = self._setup_water_events(rocket_params)\n\n    # Solve water phase\n    solution_water = solve_ivp(\n        self._rocket_ode_water_phase,\n        time_span,\n        initial_state_water,\n        args=(rocket_params,),\n        events=water_events,\n        max_step=time_step,\n        method=solver,\n        rtol=1e-8,\n        atol=1e-10,\n    )\n\n    # Store water phase results\n    all_times.append(solution_water.t)\n    all_altitudes.append(solution_water.y[0, :])\n    all_velocities.append(solution_water.y[1, :])\n    all_water_masses.append(solution_water.y[2, :])\n    all_liquid_gas_masses.append(solution_water.y[3, :])\n\n    # Calculate air mass during water phase\n    initial_air_volume = rocket_params[\"V_bottle\"] * (\n        1 - rocket_params[\"water_fraction\"]\n    )\n    initial_air_mass = (\n        self.physics_engine.calculate_air_mass_from_conditions(\n            rocket_params[\"P0\"], INITIAL_TEMPERATURE, initial_air_volume\n        )\n    )\n    air_masses_water_phase = np.full_like(\n        solution_water.t, initial_air_mass\n    )\n    all_air_masses.append(air_masses_water_phase)\n\n    # Phase 2: Air expulsion phase (if water depleted)\n    if solution_water.t_events[0].size &gt; 0:\n        water_depletion_time = solution_water.t_events[0][0]\n        if self.verbose:\n            print(\n                f\"Water depleted at t={water_depletion_time:.3f}s, starting air expulsion phase...\"\n            )\n\n        # Get final state from water phase\n        final_state_water = solution_water.y[:, -1]\n\n        # Calculate initial conditions for air phase\n        final_altitude = final_state_water[0]\n        final_velocity = final_state_water[1]\n\n        # Calculate air mass and temperature at start of air phase\n        air_volume_at_transition = rocket_params[\"V_bottle\"]\n        initial_air_volume = rocket_params[\"V_bottle\"] * (\n            1 - rocket_params[\"water_fraction\"]\n        )\n\n        # Pressure at end of water phase\n        pressure_at_transition = (\n            self.physics_engine.calculate_pressure_adiabatic(\n                rocket_params[\"P0\"],\n                initial_air_volume,\n                air_volume_at_transition,\n            )\n        )\n\n        # Temperature at end of water phase\n        temperature_at_transition = (\n            self.physics_engine.calculate_temperature_adiabatic(\n                INITIAL_TEMPERATURE,\n                rocket_params[\"P0\"],\n                pressure_at_transition,\n            )\n        )\n\n        # Air mass at transition\n        air_mass_at_transition = (\n            self.physics_engine.calculate_air_mass_from_conditions(\n                pressure_at_transition,\n                temperature_at_transition,\n                air_volume_at_transition,\n            )\n        )\n\n        initial_state_air = np.array(\n            [\n                final_altitude,\n                final_velocity,\n                air_mass_at_transition,\n                temperature_at_transition,\n            ]\n        )\n\n        # Setup events for air phase\n        air_events = self._setup_air_events(rocket_params)\n\n        # Solve air phase\n        solution_air = solve_ivp(\n            self._rocket_ode_air_phase,\n            (water_depletion_time, max_time),\n            initial_state_air,\n            args=(rocket_params,),\n            events=air_events,\n            max_step=time_step,\n            method=solver,\n            rtol=1e-8,\n            atol=1e-10,\n        )\n        final_air_mass = solution_air.y[2, -1]\n        final_air_temperature = solution_air.y[3, -1]\n        final_air_pressure = (\n            final_air_mass\n            * self.physics_engine.air_gas_constant\n            * final_air_temperature\n            / rocket_params[\"V_bottle\"]\n        )\n\n        # Store air phase results\n        all_times.append(solution_air.t)\n        all_altitudes.append(solution_air.y[0, :])\n        all_velocities.append(solution_air.y[1, :])\n        all_water_masses.append(np.zeros_like(solution_air.t))\n        all_liquid_gas_masses.append(np.zeros_like(solution_air.t))\n        all_air_masses.append(solution_air.y[2, :])\n\n        # Phase 3: Coasting phase (if air depleted)\n        if solution_air.t_events[0].size &gt; 0:\n            air_depletion_time = solution_air.t_events[0][0]\n            if self.verbose:\n                print(\n                    f\"Air depleted at t={air_depletion_time:.3f}s, starting coasting phase...\"\n                )\n\n            # Get final state from air phase\n            final_state_air = solution_air.y[:, -1]\n            final_altitude = final_state_air[0]\n            final_velocity = final_state_air[1]\n\n            initial_state_coasting = np.array(\n                [final_altitude, final_velocity]\n            )\n            # Setup events for coasting phase\n            coasting_events = self._setup_coasting_events(rocket_params)\n            # Solve coasting phase\n            solution_coasting = solve_ivp(\n                lambda t, y: self._rocket_ode_coasting_phase(\n                    t,\n                    y,\n                    rocket_params,\n                    final_air_pressure,\n                    final_air_temperature,\n                ),\n                (air_depletion_time, max_time),\n                initial_state_coasting,\n                # args=(rocket_params,),\n                events=coasting_events,\n                max_step=time_step,\n                method=solver,\n                rtol=1e-8,\n                atol=1e-10,\n            )\n\n            # Store coasting phase results\n            all_times.append(solution_coasting.t)\n            all_altitudes.append(solution_coasting.y[0, :])\n            all_velocities.append(solution_coasting.y[1, :])\n            all_water_masses.append(np.zeros_like(solution_coasting.t))\n            all_liquid_gas_masses.append(\n                np.zeros_like(solution_coasting.t)\n            )\n            all_air_masses.append(\n                np.ones_like(solution_coasting.t) * final_air_mass\n            )\n            # i just want to have the same air mass temperature and\n            # pressure as after the end of the air run.\n\n    # Combine all phases\n    time = np.concatenate(all_times)\n    altitude = np.concatenate(all_altitudes)\n    velocity = np.concatenate(all_velocities)\n    water_mass = np.concatenate(all_water_masses)\n    liquid_gas_mass = np.concatenate(all_liquid_gas_masses)\n    air_mass = np.concatenate(all_air_masses)\n\n    # Remove duplicates from the original time series arrays\n    time, altitude, velocity, water_mass, liquid_gas_mass, air_mass = filter_unique_time_series(\n        time, altitude, velocity, water_mass, liquid_gas_mass, air_mass\n    )\n\n    # Convert to NumPy for interpolation\n    derived_time = np.array(self.derived_data[\"time\"])\n    # Interpolate each quantity\n    pressure = interp1d(\n        derived_time,\n        self.derived_data[\"pressure\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n    air_temperature = interp1d(\n        derived_time,\n        self.derived_data[\"temperature\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n    thrust = interp1d(\n        derived_time,\n        self.derived_data[\"thrust\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n    drag = interp1d(\n        derived_time,\n        self.derived_data[\"drag\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=\"extrapolate\",\n    )(time)\n\n    # Interpolate additional derived quantities\n    water_exhaust_speed = interp1d(\n        derived_time,\n        self.derived_data[\"water_exhaust_speed\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    air_exhaust_speed = interp1d(\n        derived_time,\n        self.derived_data[\"air_exhaust_speed\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    water_mass_flow_rate = interp1d(\n        derived_time,\n        self.derived_data[\"water_mass_flow_rate\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    air_mass_flow_rate = interp1d(\n        derived_time,\n        self.derived_data[\"air_mass_flow_rate\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=0.0,\n    )(time)\n    air_exit_pressure = interp1d(\n        derived_time,\n        self.derived_data[\"air_exit_pressure\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=ATMOSPHERIC_PRESSURE,\n    )(time)\n    air_exit_temperature = interp1d(\n        derived_time,\n        self.derived_data[\"air_exit_temperature\"],\n        kind=\"linear\",\n        bounds_error=False,\n        fill_value=INITIAL_TEMPERATURE,\n    )(time)\n\n    # Calculate accelerations\n    acceleration = np.gradient(velocity, time)\n\n    # Create flight data object\n    flight_data = FlightData(\n        time=time,\n        altitude=altitude,\n        velocity=velocity,\n        acceleration=acceleration,\n        water_mass=water_mass,\n        liquid_gas_mass=liquid_gas_mass,\n        air_mass=air_mass,\n        pressure=pressure,\n        air_temperature=air_temperature,\n        thrust=thrust,\n        drag=drag,\n        water_exhaust_speed=water_exhaust_speed,\n        air_exhaust_speed=air_exhaust_speed,\n        water_mass_flow_rate=water_mass_flow_rate,\n        air_mass_flow_rate=air_mass_flow_rate,\n        air_exit_pressure=air_exit_pressure,\n        air_exit_temperature=air_exit_temperature,\n        max_altitude=np.max(altitude),\n        max_velocity=np.max(velocity),\n        flight_time=time[-1],\n        water_depletion_time=water_depletion_time,\n        air_depletion_time=air_depletion_time,\n    )\n\n    return flight_data\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/","title":"waterrocketpy.core.validation","text":"<p>Validation functions for water rocket simulation parameters.</p>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator","title":"<code> ParameterValidator        </code>","text":"<p>Validates simulation and rocket parameters.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>class ParameterValidator:\n    \"\"\"Validates simulation and rocket parameters.\"\"\"\n\n    @staticmethod\n    def validate_positive(\n        value: float, name: str, min_value: float = 0\n    ) -&gt; None:\n        \"\"\"Validate that a value is positive.\"\"\"\n        if value &lt;= min_value:\n            raise ValidationError(\n                f\"{name} must be greater than {min_value}, got {value}\"\n            )\n\n    @staticmethod\n    def validate_range(\n        value: float, name: str, min_val: float, max_val: float\n    ) -&gt; None:\n        \"\"\"Validate that a value is within a specified range.\"\"\"\n        if not (min_val &lt;= value &lt;= max_val):\n            raise ValidationError(\n                f\"{name} must be between {min_val} and {max_val}, got {value}\"\n            )\n\n    @staticmethod\n    def validate_fraction(value: float, name: str) -&gt; None:\n        \"\"\"Validate that a value is a valid fraction (0-1).\"\"\"\n        ParameterValidator.validate_range(value, name, 0.0, 1.0)\n\n    @staticmethod\n    def validate_rocket_parameters(params: Dict[str, Any]) -&gt; List[str]:\n        \"\"\"\n        Validate rocket parameters and return list of warnings.\n\n        Args:\n            params: Dictionary of rocket parameters\n\n        Returns:\n            List of warning messages\n\n        Raises:\n            ValidationError: If critical parameters are invalid\n        \"\"\"\n        warnings = []\n\n        # Required parameters\n        required_params = [\n            \"P0\",\n            \"A_nozzle\",\n            \"V_bottle\",\n            \"water_fraction\",\n            \"C_d\",\n            \"m_empty\",\n            \"C_drag\",\n            \"A_rocket\",\n        ]\n\n        for param in required_params:\n            if param not in params:\n                raise ValidationError(f\"Missing required parameter: {param}\")\n\n        # Validate pressure\n        ParameterValidator.validate_positive(\n            params[\"P0\"], \"Initial pressure (P0)\"\n        )\n        if params[\"P0\"] &lt; ATMOSPHERIC_PRESSURE:\n            warnings.append(\"Initial pressure is below atmospheric pressure\")\n        if params[\"P0\"] &gt; 50 * ATMOSPHERIC_PRESSURE:\n            warnings.append(\n                \"Initial pressure is very high (&gt;50 bar) - safety concern\"\n            )\n\n        # Validate areas\n        ParameterValidator.validate_positive(\n            params[\"A_nozzle\"], \"Nozzle area (A_nozzle)\"\n        )\n        ParameterValidator.validate_positive(\n            params[\"A_rocket\"], \"Rocket cross-sectional area (A_rocket)\"\n        )\n\n        # Validate volume\n        ParameterValidator.validate_positive(\n            params[\"V_bottle\"], \"Bottle volume (V_bottle)\"\n        )\n\n        # Validate water fraction\n        ParameterValidator.validate_fraction(\n            params[\"water_fraction\"], \"Water fraction\"\n        )\n        if params[\"water_fraction\"] &lt; 0.1:\n            warnings.append(\n                \"Water fraction is very low (&lt;10%) - may result in poor performance\"\n            )\n        if params[\"water_fraction\"] &gt; 0.8:\n            warnings.append(\n                \"Water fraction is very high (&gt;80%) - may result in poor performance\"\n            )\n\n        # Validate coefficients\n        ParameterValidator.validate_range(\n            params[\"C_d\"], \"Discharge coefficient (C_d)\", 0.1, 1.0\n        )\n        ParameterValidator.validate_range(\n            params[\"C_drag\"], \"Drag coefficient (C_drag)\", 0.1, 2.0\n        )\n\n        # Validate mass\n        ParameterValidator.validate_positive(\n            params[\"m_empty\"], \"Empty mass (m_empty)\"\n        )\n\n        # Check for reasonable values\n        if params[\"C_d\"] &lt; 0.6:\n            warnings.append(\n                \"Discharge coefficient is low (&lt;0.6) - check nozzle design\"\n            )\n        if params[\"C_drag\"] &gt; 1.5:\n            warnings.append(\n                \"Drag coefficient is high (&gt;1.5) - check rocket aerodynamics\"\n            )\n\n        return warnings\n\n    @staticmethod\n    def validate_simulation_parameters(params: Dict[str, Any]) -&gt; List[str]:\n        \"\"\"\n        Validate simulation parameters.\n\n        Args:\n            params: Dictionary of simulation parameters\n\n        Returns:\n            List of warning messages\n        \"\"\"\n        warnings = []\n\n        if \"max_time\" in params:\n            ParameterValidator.validate_positive(\n                params[\"max_time\"], \"Maximum simulation time\"\n            )\n            if params[\"max_time\"] &gt; 60:\n                warnings.append(\"Maximum simulation time is very long (&gt;60s)\")\n\n        if \"time_step\" in params:\n            ParameterValidator.validate_positive(\n                params[\"time_step\"], \"Time step\"\n            )\n            if params[\"time_step\"] &gt; 0.1:\n                warnings.append(\n                    \"Time step is large (&gt;0.1s) - may affect accuracy\"\n                )\n            if params[\"time_step\"] &lt; 0.001:\n                warnings.append(\n                    \"Time step is very small (&lt;0.001s) - may be computationally expensive\"\n                )\n\n        return warnings\n\n    @staticmethod\n    def validate_flight_data(\n        time: np.ndarray,\n        altitude: np.ndarray,\n        velocity: np.ndarray,\n        mass: np.ndarray,\n    ) -&gt; bool:\n        \"\"\"\n        Validate flight data for physical consistency.\n\n        Args:\n            time: Time array\n            altitude: Altitude array\n            velocity: Velocity array\n            mass: Mass array\n\n        Returns:\n            bool: True if data is valid\n        \"\"\"\n        # Check array lengths\n        if not (len(time) == len(altitude) == len(velocity) == len(mass)):\n            raise ValidationError(\n                \"All flight data arrays must have the same length\"\n            )\n\n        # Check for NaN or infinite values\n        for arr, name in [\n            (time, \"time\"),\n            (altitude, \"altitude\"),\n            (velocity, \"velocity\"),\n            (mass, \"mass\"),\n        ]:\n            if np.any(np.isnan(arr)) or np.any(np.isinf(arr)):\n                raise ValidationError(\n                    f\"{name} array contains NaN or infinite values\"\n                )\n\n        # Check physical constraints\n        if np.any(mass &lt; 0):\n            raise ValidationError(\"Mass cannot be negative\")\n\n        if np.any(altitude &lt; 0):\n            raise ValidationError(\"Altitude cannot be negative\")\n\n        # Check time monotonicity\n        if not np.all(np.diff(time) &gt; 0):\n            raise ValidationError(\n                \"Time array must be monotonically increasing\"\n            )\n\n        return True\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_flight_data","title":"<code>validate_flight_data(time, altitude, velocity, mass)</code>  <code>staticmethod</code>","text":"<p>Validate flight data for physical consistency.</p> <p>Parameters:</p> Name Type Description Default <code>time</code> <code>ndarray</code> <p>Time array</p> required <code>altitude</code> <code>ndarray</code> <p>Altitude array</p> required <code>velocity</code> <code>ndarray</code> <p>Velocity array</p> required <code>mass</code> <code>ndarray</code> <p>Mass array</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if data is valid</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_flight_data(\n    time: np.ndarray,\n    altitude: np.ndarray,\n    velocity: np.ndarray,\n    mass: np.ndarray,\n) -&gt; bool:\n    \"\"\"\n    Validate flight data for physical consistency.\n\n    Args:\n        time: Time array\n        altitude: Altitude array\n        velocity: Velocity array\n        mass: Mass array\n\n    Returns:\n        bool: True if data is valid\n    \"\"\"\n    # Check array lengths\n    if not (len(time) == len(altitude) == len(velocity) == len(mass)):\n        raise ValidationError(\n            \"All flight data arrays must have the same length\"\n        )\n\n    # Check for NaN or infinite values\n    for arr, name in [\n        (time, \"time\"),\n        (altitude, \"altitude\"),\n        (velocity, \"velocity\"),\n        (mass, \"mass\"),\n    ]:\n        if np.any(np.isnan(arr)) or np.any(np.isinf(arr)):\n            raise ValidationError(\n                f\"{name} array contains NaN or infinite values\"\n            )\n\n    # Check physical constraints\n    if np.any(mass &lt; 0):\n        raise ValidationError(\"Mass cannot be negative\")\n\n    if np.any(altitude &lt; 0):\n        raise ValidationError(\"Altitude cannot be negative\")\n\n    # Check time monotonicity\n    if not np.all(np.diff(time) &gt; 0):\n        raise ValidationError(\n            \"Time array must be monotonically increasing\"\n        )\n\n    return True\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_fraction","title":"<code>validate_fraction(value, name)</code>  <code>staticmethod</code>","text":"<p>Validate that a value is a valid fraction (0-1).</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_fraction(value: float, name: str) -&gt; None:\n    \"\"\"Validate that a value is a valid fraction (0-1).\"\"\"\n    ParameterValidator.validate_range(value, name, 0.0, 1.0)\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_positive","title":"<code>validate_positive(value, name, min_value=0)</code>  <code>staticmethod</code>","text":"<p>Validate that a value is positive.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_positive(\n    value: float, name: str, min_value: float = 0\n) -&gt; None:\n    \"\"\"Validate that a value is positive.\"\"\"\n    if value &lt;= min_value:\n        raise ValidationError(\n            f\"{name} must be greater than {min_value}, got {value}\"\n        )\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_range","title":"<code>validate_range(value, name, min_val, max_val)</code>  <code>staticmethod</code>","text":"<p>Validate that a value is within a specified range.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_range(\n    value: float, name: str, min_val: float, max_val: float\n) -&gt; None:\n    \"\"\"Validate that a value is within a specified range.\"\"\"\n    if not (min_val &lt;= value &lt;= max_val):\n        raise ValidationError(\n            f\"{name} must be between {min_val} and {max_val}, got {value}\"\n        )\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_rocket_parameters","title":"<code>validate_rocket_parameters(params)</code>  <code>staticmethod</code>","text":"<p>Validate rocket parameters and return list of warnings.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Any]</code> <p>Dictionary of rocket parameters</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of warning messages</p> <p>Exceptions:</p> Type Description <code>ValidationError</code> <p>If critical parameters are invalid</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_rocket_parameters(params: Dict[str, Any]) -&gt; List[str]:\n    \"\"\"\n    Validate rocket parameters and return list of warnings.\n\n    Args:\n        params: Dictionary of rocket parameters\n\n    Returns:\n        List of warning messages\n\n    Raises:\n        ValidationError: If critical parameters are invalid\n    \"\"\"\n    warnings = []\n\n    # Required parameters\n    required_params = [\n        \"P0\",\n        \"A_nozzle\",\n        \"V_bottle\",\n        \"water_fraction\",\n        \"C_d\",\n        \"m_empty\",\n        \"C_drag\",\n        \"A_rocket\",\n    ]\n\n    for param in required_params:\n        if param not in params:\n            raise ValidationError(f\"Missing required parameter: {param}\")\n\n    # Validate pressure\n    ParameterValidator.validate_positive(\n        params[\"P0\"], \"Initial pressure (P0)\"\n    )\n    if params[\"P0\"] &lt; ATMOSPHERIC_PRESSURE:\n        warnings.append(\"Initial pressure is below atmospheric pressure\")\n    if params[\"P0\"] &gt; 50 * ATMOSPHERIC_PRESSURE:\n        warnings.append(\n            \"Initial pressure is very high (&gt;50 bar) - safety concern\"\n        )\n\n    # Validate areas\n    ParameterValidator.validate_positive(\n        params[\"A_nozzle\"], \"Nozzle area (A_nozzle)\"\n    )\n    ParameterValidator.validate_positive(\n        params[\"A_rocket\"], \"Rocket cross-sectional area (A_rocket)\"\n    )\n\n    # Validate volume\n    ParameterValidator.validate_positive(\n        params[\"V_bottle\"], \"Bottle volume (V_bottle)\"\n    )\n\n    # Validate water fraction\n    ParameterValidator.validate_fraction(\n        params[\"water_fraction\"], \"Water fraction\"\n    )\n    if params[\"water_fraction\"] &lt; 0.1:\n        warnings.append(\n            \"Water fraction is very low (&lt;10%) - may result in poor performance\"\n        )\n    if params[\"water_fraction\"] &gt; 0.8:\n        warnings.append(\n            \"Water fraction is very high (&gt;80%) - may result in poor performance\"\n        )\n\n    # Validate coefficients\n    ParameterValidator.validate_range(\n        params[\"C_d\"], \"Discharge coefficient (C_d)\", 0.1, 1.0\n    )\n    ParameterValidator.validate_range(\n        params[\"C_drag\"], \"Drag coefficient (C_drag)\", 0.1, 2.0\n    )\n\n    # Validate mass\n    ParameterValidator.validate_positive(\n        params[\"m_empty\"], \"Empty mass (m_empty)\"\n    )\n\n    # Check for reasonable values\n    if params[\"C_d\"] &lt; 0.6:\n        warnings.append(\n            \"Discharge coefficient is low (&lt;0.6) - check nozzle design\"\n        )\n    if params[\"C_drag\"] &gt; 1.5:\n        warnings.append(\n            \"Drag coefficient is high (&gt;1.5) - check rocket aerodynamics\"\n        )\n\n    return warnings\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ParameterValidator.validate_simulation_parameters","title":"<code>validate_simulation_parameters(params)</code>  <code>staticmethod</code>","text":"<p>Validate simulation parameters.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>Dict[str, Any]</code> <p>Dictionary of simulation parameters</p> required <p>Returns:</p> Type Description <code>List[str]</code> <p>List of warning messages</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>@staticmethod\ndef validate_simulation_parameters(params: Dict[str, Any]) -&gt; List[str]:\n    \"\"\"\n    Validate simulation parameters.\n\n    Args:\n        params: Dictionary of simulation parameters\n\n    Returns:\n        List of warning messages\n    \"\"\"\n    warnings = []\n\n    if \"max_time\" in params:\n        ParameterValidator.validate_positive(\n            params[\"max_time\"], \"Maximum simulation time\"\n        )\n        if params[\"max_time\"] &gt; 60:\n            warnings.append(\"Maximum simulation time is very long (&gt;60s)\")\n\n    if \"time_step\" in params:\n        ParameterValidator.validate_positive(\n            params[\"time_step\"], \"Time step\"\n        )\n        if params[\"time_step\"] &gt; 0.1:\n            warnings.append(\n                \"Time step is large (&gt;0.1s) - may affect accuracy\"\n            )\n        if params[\"time_step\"] &lt; 0.001:\n            warnings.append(\n                \"Time step is very small (&lt;0.001s) - may be computationally expensive\"\n            )\n\n    return warnings\n</code></pre>"},{"location":"api/waterrocketpy/core/validation/#waterrocketpy.core.validation.ValidationError","title":"<code> ValidationError            (Exception)         </code>","text":"<p>Custom exception for validation errors.</p> Source code in <code>waterrocketpy/core/validation.py</code> <pre><code>class ValidationError(Exception):\n    \"\"\"Custom exception for validation errors.\"\"\"\n\n    pass\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/","title":"waterrocketpy.optimization.water_rocket_optimizer","text":"<p>Water Rocket Parameter Optimization using SciPy</p> <p>This module provides optimization capabilities for water rocket simulations, allowing you to find optimal parameters for maximum altitude, velocity, or flight time.</p>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer","title":"<code> WaterRocketOptimizer        </code>","text":"<p>Optimizer for water rocket parameters using SciPy optimization algorithms.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>class WaterRocketOptimizer:\n    \"\"\"\n    Optimizer for water rocket parameters using SciPy optimization algorithms.\n    \"\"\"\n\n    def __init__(\n        self,\n        L_cone: float = 0.08,\n        material_name: str = \"PET\",\n        simulation_settings: Optional[Dict] = None,\n    ):\n        \"\"\"\n        Initialize the optimizer with fixed parameters.\n\n        Args:\n            L_cone: Nose cone length (fixed parameter)\n            material_name: Material name (fixed parameter)\n            simulation_settings: Simulation configuration\n        \"\"\"\n        self.L_cone = L_cone\n        self.material_name = material_name\n\n        # Default simulation settings\n        self.simulation_settings = simulation_settings or {\n            \"max_time\": 20,\n            \"time_step\": 0.01,\n            \"solver\": \"RK45\",\n        }\n\n        # Create simulator instance\n        self.simulator = WaterRocketSimulator(verbose=False)\n\n        # Cache for avoiding repeated identical simulations\n        self._simulation_cache = {}\n\n        # Optimization statistics\n        self.n_evaluations = 0\n        self.best_result = None\n        self.optimization_history = []\n\n    def objective_function(\n        self, params: np.ndarray, target: str = \"max_altitude\"\n    ) -&gt; float:\n        \"\"\"\n        Objective function for optimization.\n\n        Args:\n            params: Array of parameters [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n            target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n\n        Returns:\n            Negative value of the target metric (for minimization)\n        \"\"\"\n        L_body, d_body, p_max_bar, nozzle_diameter, water_fraction = params\n\n        # Convert pressure from bar to Pa\n        p_max = p_max_bar * ATMOSPHERIC_PRESSURE\n\n        # Create cache key\n        cache_key = tuple(np.round(params, 8))\n\n        if cache_key in self._simulation_cache:\n            flight_data = self._simulation_cache[cache_key]\n        else:\n            try:\n                # Build rocket configuration\n                builder = RocketBuilder()\n                config = (\n                    builder.build_from_dimensions(\n                        L_body=L_body,\n                        L_cone=self.L_cone,\n                        d_body=d_body,\n                        p_max=p_max,\n                        nozzle_diameter=nozzle_diameter,\n                        material_name=self.material_name,\n                        water_fraction=water_fraction,\n                    )\n                    .set_metadata(\n                        name=\"Optimization Rocket\",\n                        description=\"Rocket being optimized\",\n                    )\n                    .build()\n                )\n\n                # Convert to simulation parameters\n                builder_from_config = RocketBuilder.from_dict(config.__dict__)\n                sim_params = builder_from_config.to_simulation_params()\n\n                # Run simulation\n                flight_data = self.simulator.simulate(\n                    sim_params, self.simulation_settings\n                )\n\n                # Cache the result\n                self._simulation_cache[cache_key] = flight_data\n\n            except Exception as e:\n                # Return a large penalty for invalid configurations\n                warnings.warn(\n                    f\"Simulation failed with parameters {params}: {e}\"\n                )\n                return 1e6\n\n        self.n_evaluations += 1\n\n        # Extract target metric\n        if target == \"max_altitude\":\n            result = flight_data.max_altitude\n        elif target == \"max_velocity\":\n            result = flight_data.max_velocity\n        elif target == \"flight_time\":\n            result = flight_data.flight_time\n        else:\n            raise ValueError(f\"Unknown target: {target}\")\n\n        # Store optimization history\n        self.optimization_history.append(\n            {\n                \"evaluation\": self.n_evaluations,\n                \"params\": params.copy(),\n                \"result\": result,\n                \"target\": target,\n            }\n        )\n\n        # Update best result\n        if self.best_result is None or result &gt; self.best_result[\"result\"]:\n            self.best_result = {\n                \"params\": params.copy(),\n                \"result\": result,\n                \"target\": target,\n                \"flight_data\": flight_data,\n            }\n            print(\n                f\"New best {target}: {result:.4f} at evaluation {self.n_evaluations}\"\n            )\n            print(\n                f\"  Params: L_body={params[0]:.3f}, d_body={params[1]:.3f}, \"\n                f\"p_max={params[2]:.1f}bar, nozzle_d={params[3]:.4f}, \"\n                f\"water_frac={params[4]:.3f}\"\n            )\n\n        # Return negative for minimization\n        return -result\n\n    def optimize(\n        self,\n        bounds: List[Tuple[float, float]],\n        target: str = \"max_altitude\",\n        method: str = \"differential_evolution\",\n        **optimizer_kwargs,\n    ) -&gt; Dict:\n        \"\"\"\n        Optimize rocket parameters.\n\n        Args:\n            bounds: List of (min, max) tuples for each parameter\n                   [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n            target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n            method: Optimization method ('differential_evolution' or 'minimize')\n            **optimizer_kwargs: Additional arguments passed to the optimizer\n\n        Returns:\n            Optimization result dictionary\n        \"\"\"\n        print(f\"Starting optimization for {target} using {method}\")\n        print(f\"Parameter bounds: {bounds}\")\n\n        # Reset optimization statistics\n        self.n_evaluations = 0\n        self.best_result = None\n        self.optimization_history = []\n        self._simulation_cache = {}\n\n        # Define objective function with fixed target\n        def obj_func(params):\n            return self.objective_function(params, target)\n\n        # Set default optimizer parameters\n        if method == \"differential_evolution\":\n            default_kwargs = {\n                \"maxiter\": 100,\n                \"popsize\": 15,\n                \"seed\": 42,\n                \"disp\": True,\n            }\n            default_kwargs.update(optimizer_kwargs)\n\n            result = differential_evolution(obj_func, bounds, **default_kwargs)\n\n        elif method == \"minimize\":\n            # For minimize, we need an initial guess\n            x0 = optimizer_kwargs.pop(\"x0\", None)\n            if x0 is None:\n                # Create initial guess from middle of bounds\n                x0 = [(b[0] + b[1]) / 2 for b in bounds]\n\n            default_kwargs = {\n                \"method\": \"L-BFGS-B\",\n                \"options\": {\"disp\": True, \"maxiter\": 100},\n            }\n            default_kwargs.update(optimizer_kwargs)\n\n            result = minimize(obj_func, x0, bounds=bounds, **default_kwargs)\n        else:\n            raise ValueError(f\"Unknown optimization method: {method}\")\n\n        # Prepare result dictionary\n        optimization_result = {\n            \"success\": result.success,\n            \"message\": result.message,\n            \"n_evaluations\": self.n_evaluations,\n            \"best_params\": {\n                \"L_body\": result.x[0],\n                \"d_body\": result.x[1],\n                \"p_max_bar\": result.x[2],\n                \"nozzle_diameter\": result.x[3],\n                \"water_fraction\": result.x[4],\n            },\n            \"best_value\": -result.fun,\n            \"target\": target,\n            \"scipy_result\": result,\n            \"best_flight_data\": (\n                self.best_result[\"flight_data\"] if self.best_result else None\n            ),\n        }\n\n        print(f\"\\nOptimization completed!\")\n        print(f\"Best {target}: {optimization_result['best_value']:.4f}\")\n        print(f\"Best parameters:\")\n        for param, value in optimization_result[\"best_params\"].items():\n            print(f\"  {param}: {value:.4f}\")\n\n        return optimization_result\n\n    def get_default_bounds(self) -&gt; List[Tuple[float, float]]:\n        \"\"\"\n        Get reasonable default bounds for optimization parameters.\n\n        Returns:\n            List of (min, max) bounds for [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n        \"\"\"\n        return [\n            (0.1, 0.5),  # L_body: 10-50 cm\n            (0.05, 0.12),  # d_body: 5-12 cm diameter\n            (2.0, 12.0),  # p_max_bar: 2-12 bar\n            (0.005, 0.025),  # nozzle_diameter: 5-25 mm\n            (0.1, 0.8),  # water_fraction: 10-80%\n        ]\n\n    def plot_optimization_history(self):\n        \"\"\"\n        Plot the objective value and parameters over evaluation steps.\n        \"\"\"\n        if not self.optimization_history:\n            print(\"No optimization history to plot.\")\n            return\n\n        evaluations = [entry[\"evaluation\"] for entry in self.optimization_history]\n        results = [entry[\"result\"] for entry in self.optimization_history]\n        param_names = [\"L_body\", \"d_body\", \"p_max_bar\", \"nozzle_diameter\", \"water_fraction\"]\n        params_over_time = list(zip(*[entry[\"params\"] for entry in self.optimization_history]))\n\n        # Plot objective value over time\n        plt.figure(figsize=(10, 6))\n        plt.plot(evaluations, results, label=\"Objective Value\")\n        plt.xlabel(\"Evaluation\")\n        plt.ylabel(f\"{self.optimization_history[0]['target'].replace('_', ' ').title()}\")\n        plt.title(\"Optimization Progress\")\n        plt.grid(True)\n        plt.legend()\n        plt.tight_layout()\n        plt.show()\n\n        # Plot parameters over time\n        plt.figure(figsize=(12, 8))\n        for i, param_values in enumerate(params_over_time):\n            plt.plot(evaluations, param_values, label=param_names[i])\n        plt.xlabel(\"Evaluation\")\n        plt.ylabel(\"Parameter Value\")\n        plt.title(\"Parameter Evolution During Optimization\")\n        plt.grid(True)\n        plt.legend()\n        plt.tight_layout()\n        plt.show()\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.__init__","title":"<code>__init__(self, L_cone=0.08, material_name='PET', simulation_settings=None)</code>  <code>special</code>","text":"<p>Initialize the optimizer with fixed parameters.</p> <p>Parameters:</p> Name Type Description Default <code>L_cone</code> <code>float</code> <p>Nose cone length (fixed parameter)</p> <code>0.08</code> <code>material_name</code> <code>str</code> <p>Material name (fixed parameter)</p> <code>'PET'</code> <code>simulation_settings</code> <code>Optional[Dict]</code> <p>Simulation configuration</p> <code>None</code> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def __init__(\n    self,\n    L_cone: float = 0.08,\n    material_name: str = \"PET\",\n    simulation_settings: Optional[Dict] = None,\n):\n    \"\"\"\n    Initialize the optimizer with fixed parameters.\n\n    Args:\n        L_cone: Nose cone length (fixed parameter)\n        material_name: Material name (fixed parameter)\n        simulation_settings: Simulation configuration\n    \"\"\"\n    self.L_cone = L_cone\n    self.material_name = material_name\n\n    # Default simulation settings\n    self.simulation_settings = simulation_settings or {\n        \"max_time\": 20,\n        \"time_step\": 0.01,\n        \"solver\": \"RK45\",\n    }\n\n    # Create simulator instance\n    self.simulator = WaterRocketSimulator(verbose=False)\n\n    # Cache for avoiding repeated identical simulations\n    self._simulation_cache = {}\n\n    # Optimization statistics\n    self.n_evaluations = 0\n    self.best_result = None\n    self.optimization_history = []\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.get_default_bounds","title":"<code>get_default_bounds(self)</code>","text":"<p>Get reasonable default bounds for optimization parameters.</p> <p>Returns:</p> Type Description <code>List[Tuple[float, float]]</code> <p>List of (min, max) bounds for [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def get_default_bounds(self) -&gt; List[Tuple[float, float]]:\n    \"\"\"\n    Get reasonable default bounds for optimization parameters.\n\n    Returns:\n        List of (min, max) bounds for [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n    \"\"\"\n    return [\n        (0.1, 0.5),  # L_body: 10-50 cm\n        (0.05, 0.12),  # d_body: 5-12 cm diameter\n        (2.0, 12.0),  # p_max_bar: 2-12 bar\n        (0.005, 0.025),  # nozzle_diameter: 5-25 mm\n        (0.1, 0.8),  # water_fraction: 10-80%\n    ]\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.objective_function","title":"<code>objective_function(self, params, target='max_altitude')</code>","text":"<p>Objective function for optimization.</p> <p>Parameters:</p> Name Type Description Default <code>params</code> <code>ndarray</code> <p>Array of parameters [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]</p> required <code>target</code> <code>str</code> <p>Optimization target ('max_altitude', 'max_velocity', 'flight_time')</p> <code>'max_altitude'</code> <p>Returns:</p> Type Description <code>float</code> <p>Negative value of the target metric (for minimization)</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def objective_function(\n    self, params: np.ndarray, target: str = \"max_altitude\"\n) -&gt; float:\n    \"\"\"\n    Objective function for optimization.\n\n    Args:\n        params: Array of parameters [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n        target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n\n    Returns:\n        Negative value of the target metric (for minimization)\n    \"\"\"\n    L_body, d_body, p_max_bar, nozzle_diameter, water_fraction = params\n\n    # Convert pressure from bar to Pa\n    p_max = p_max_bar * ATMOSPHERIC_PRESSURE\n\n    # Create cache key\n    cache_key = tuple(np.round(params, 8))\n\n    if cache_key in self._simulation_cache:\n        flight_data = self._simulation_cache[cache_key]\n    else:\n        try:\n            # Build rocket configuration\n            builder = RocketBuilder()\n            config = (\n                builder.build_from_dimensions(\n                    L_body=L_body,\n                    L_cone=self.L_cone,\n                    d_body=d_body,\n                    p_max=p_max,\n                    nozzle_diameter=nozzle_diameter,\n                    material_name=self.material_name,\n                    water_fraction=water_fraction,\n                )\n                .set_metadata(\n                    name=\"Optimization Rocket\",\n                    description=\"Rocket being optimized\",\n                )\n                .build()\n            )\n\n            # Convert to simulation parameters\n            builder_from_config = RocketBuilder.from_dict(config.__dict__)\n            sim_params = builder_from_config.to_simulation_params()\n\n            # Run simulation\n            flight_data = self.simulator.simulate(\n                sim_params, self.simulation_settings\n            )\n\n            # Cache the result\n            self._simulation_cache[cache_key] = flight_data\n\n        except Exception as e:\n            # Return a large penalty for invalid configurations\n            warnings.warn(\n                f\"Simulation failed with parameters {params}: {e}\"\n            )\n            return 1e6\n\n    self.n_evaluations += 1\n\n    # Extract target metric\n    if target == \"max_altitude\":\n        result = flight_data.max_altitude\n    elif target == \"max_velocity\":\n        result = flight_data.max_velocity\n    elif target == \"flight_time\":\n        result = flight_data.flight_time\n    else:\n        raise ValueError(f\"Unknown target: {target}\")\n\n    # Store optimization history\n    self.optimization_history.append(\n        {\n            \"evaluation\": self.n_evaluations,\n            \"params\": params.copy(),\n            \"result\": result,\n            \"target\": target,\n        }\n    )\n\n    # Update best result\n    if self.best_result is None or result &gt; self.best_result[\"result\"]:\n        self.best_result = {\n            \"params\": params.copy(),\n            \"result\": result,\n            \"target\": target,\n            \"flight_data\": flight_data,\n        }\n        print(\n            f\"New best {target}: {result:.4f} at evaluation {self.n_evaluations}\"\n        )\n        print(\n            f\"  Params: L_body={params[0]:.3f}, d_body={params[1]:.3f}, \"\n            f\"p_max={params[2]:.1f}bar, nozzle_d={params[3]:.4f}, \"\n            f\"water_frac={params[4]:.3f}\"\n        )\n\n    # Return negative for minimization\n    return -result\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.optimize","title":"<code>optimize(self, bounds, target='max_altitude', method='differential_evolution', **optimizer_kwargs)</code>","text":"<p>Optimize rocket parameters.</p> <p>Parameters:</p> Name Type Description Default <code>bounds</code> <code>List[Tuple[float, float]]</code> <p>List of (min, max) tuples for each parameter    [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]</p> required <code>target</code> <code>str</code> <p>Optimization target ('max_altitude', 'max_velocity', 'flight_time')</p> <code>'max_altitude'</code> <code>method</code> <code>str</code> <p>Optimization method ('differential_evolution' or 'minimize')</p> <code>'differential_evolution'</code> <code>**optimizer_kwargs</code> <p>Additional arguments passed to the optimizer</p> <code>{}</code> <p>Returns:</p> Type Description <code>Dict</code> <p>Optimization result dictionary</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize(\n    self,\n    bounds: List[Tuple[float, float]],\n    target: str = \"max_altitude\",\n    method: str = \"differential_evolution\",\n    **optimizer_kwargs,\n) -&gt; Dict:\n    \"\"\"\n    Optimize rocket parameters.\n\n    Args:\n        bounds: List of (min, max) tuples for each parameter\n               [L_body, d_body, p_max_bar, nozzle_diameter, water_fraction]\n        target: Optimization target ('max_altitude', 'max_velocity', 'flight_time')\n        method: Optimization method ('differential_evolution' or 'minimize')\n        **optimizer_kwargs: Additional arguments passed to the optimizer\n\n    Returns:\n        Optimization result dictionary\n    \"\"\"\n    print(f\"Starting optimization for {target} using {method}\")\n    print(f\"Parameter bounds: {bounds}\")\n\n    # Reset optimization statistics\n    self.n_evaluations = 0\n    self.best_result = None\n    self.optimization_history = []\n    self._simulation_cache = {}\n\n    # Define objective function with fixed target\n    def obj_func(params):\n        return self.objective_function(params, target)\n\n    # Set default optimizer parameters\n    if method == \"differential_evolution\":\n        default_kwargs = {\n            \"maxiter\": 100,\n            \"popsize\": 15,\n            \"seed\": 42,\n            \"disp\": True,\n        }\n        default_kwargs.update(optimizer_kwargs)\n\n        result = differential_evolution(obj_func, bounds, **default_kwargs)\n\n    elif method == \"minimize\":\n        # For minimize, we need an initial guess\n        x0 = optimizer_kwargs.pop(\"x0\", None)\n        if x0 is None:\n            # Create initial guess from middle of bounds\n            x0 = [(b[0] + b[1]) / 2 for b in bounds]\n\n        default_kwargs = {\n            \"method\": \"L-BFGS-B\",\n            \"options\": {\"disp\": True, \"maxiter\": 100},\n        }\n        default_kwargs.update(optimizer_kwargs)\n\n        result = minimize(obj_func, x0, bounds=bounds, **default_kwargs)\n    else:\n        raise ValueError(f\"Unknown optimization method: {method}\")\n\n    # Prepare result dictionary\n    optimization_result = {\n        \"success\": result.success,\n        \"message\": result.message,\n        \"n_evaluations\": self.n_evaluations,\n        \"best_params\": {\n            \"L_body\": result.x[0],\n            \"d_body\": result.x[1],\n            \"p_max_bar\": result.x[2],\n            \"nozzle_diameter\": result.x[3],\n            \"water_fraction\": result.x[4],\n        },\n        \"best_value\": -result.fun,\n        \"target\": target,\n        \"scipy_result\": result,\n        \"best_flight_data\": (\n            self.best_result[\"flight_data\"] if self.best_result else None\n        ),\n    }\n\n    print(f\"\\nOptimization completed!\")\n    print(f\"Best {target}: {optimization_result['best_value']:.4f}\")\n    print(f\"Best parameters:\")\n    for param, value in optimization_result[\"best_params\"].items():\n        print(f\"  {param}: {value:.4f}\")\n\n    return optimization_result\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.WaterRocketOptimizer.plot_optimization_history","title":"<code>plot_optimization_history(self)</code>","text":"<p>Plot the objective value and parameters over evaluation steps.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def plot_optimization_history(self):\n    \"\"\"\n    Plot the objective value and parameters over evaluation steps.\n    \"\"\"\n    if not self.optimization_history:\n        print(\"No optimization history to plot.\")\n        return\n\n    evaluations = [entry[\"evaluation\"] for entry in self.optimization_history]\n    results = [entry[\"result\"] for entry in self.optimization_history]\n    param_names = [\"L_body\", \"d_body\", \"p_max_bar\", \"nozzle_diameter\", \"water_fraction\"]\n    params_over_time = list(zip(*[entry[\"params\"] for entry in self.optimization_history]))\n\n    # Plot objective value over time\n    plt.figure(figsize=(10, 6))\n    plt.plot(evaluations, results, label=\"Objective Value\")\n    plt.xlabel(\"Evaluation\")\n    plt.ylabel(f\"{self.optimization_history[0]['target'].replace('_', ' ').title()}\")\n    plt.title(\"Optimization Progress\")\n    plt.grid(True)\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n\n    # Plot parameters over time\n    plt.figure(figsize=(12, 8))\n    for i, param_values in enumerate(params_over_time):\n        plt.plot(evaluations, param_values, label=param_names[i])\n    plt.xlabel(\"Evaluation\")\n    plt.ylabel(\"Parameter Value\")\n    plt.title(\"Parameter Evolution During Optimization\")\n    plt.grid(True)\n    plt.legend()\n    plt.tight_layout()\n    plt.show()\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.optimize_for_altitude","title":"<code>optimize_for_altitude(bounds=None, method='differential_evolution', plot_history=False, **kwargs)</code>","text":"<p>Optimize rocket for maximum altitude.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize_for_altitude(\n    bounds: Optional[List[Tuple[float, float]]] = None,\n    method: str = \"differential_evolution\",\n    plot_history: bool = False,\n    **kwargs,\n) -&gt; Dict:\n    \"\"\"Optimize rocket for maximum altitude.\"\"\"\n    optimizer = WaterRocketOptimizer()\n    if bounds is None:\n        bounds = optimizer.get_default_bounds()\n    result = optimizer.optimize(\n        bounds, target=\"max_altitude\", method=method, **kwargs)\n    if plot_history:\n        optimizer.plot_optimization_history()\n    return result\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.optimize_for_flight_time","title":"<code>optimize_for_flight_time(bounds=None, method='differential_evolution', **kwargs)</code>","text":"<p>Optimize rocket for maximum flight time.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize_for_flight_time(\n    bounds: Optional[List[Tuple[float, float]]] = None,\n    method: str = \"differential_evolution\",\n    **kwargs,\n) -&gt; Dict:\n    \"\"\"Optimize rocket for maximum flight time.\"\"\"\n    optimizer = WaterRocketOptimizer()\n    if bounds is None:\n        bounds = optimizer.get_default_bounds()\n    return optimizer.optimize(\n        bounds, target=\"flight_time\", method=method, **kwargs\n    )\n</code></pre>"},{"location":"api/waterrocketpy/optimization/water_rocket_optimizer/#waterrocketpy.optimization.water_rocket_optimizer.optimize_for_velocity","title":"<code>optimize_for_velocity(bounds=None, method='differential_evolution', **kwargs)</code>","text":"<p>Optimize rocket for maximum velocity.</p> Source code in <code>waterrocketpy/optimization/water_rocket_optimizer.py</code> <pre><code>def optimize_for_velocity(\n    bounds: Optional[List[Tuple[float, float]]] = None,\n    method: str = \"differential_evolution\",\n    **kwargs,\n) -&gt; Dict:\n    \"\"\"Optimize rocket for maximum velocity.\"\"\"\n    optimizer = WaterRocketOptimizer()\n    if bounds is None:\n        bounds = optimizer.get_default_bounds()\n    return optimizer.optimize(\n        bounds, target=\"max_velocity\", method=method, **kwargs\n    )\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/","title":"waterrocketpy.rocket.builder","text":"<p>Rocket builder for creating and managing rocket configurations.</p>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.MaterialProperties","title":"<code> MaterialProperties        </code>  <code>dataclass</code>","text":"<p>Container for material properties.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@dataclass\nclass MaterialProperties:\n    \"\"\"Container for material properties.\"\"\"\n\n    name: str\n    density: float  # kg/m\u00b3\n    yield_strength: float  # Pa\n    ultimate_strength: float  # Pa\n    elastic_modulus: float  # Pa\n    poisson_ratio: float\n    thermal_expansion: float  # 1/K\n    thermal_conductivity: float  # W/(m\u00b7K)\n    specific_heat: float  # J/(kg\u00b7K)\n    max_temperature: float  # K\n    cost_per_kg: float = 0.0  # Optional cost information\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder","title":"<code> RocketBuilder        </code>","text":"<p>Builder class for creating rocket configurations.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>class RocketBuilder:\n    \"\"\"Builder class for creating rocket configurations.\"\"\"\n\n    def __init__(self):\n        self.config = RocketConfiguration()\n        self.validator = ParameterValidator()\n        self.material_db = materials.MaterialDatabase()\n\n    def set_bottle(\n        self, volume: float, diameter: float, length: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set bottle parameters.\"\"\"\n        self.config.bottle_volume = volume\n        self.config.bottle_diameter = diameter\n        if length is not None:\n            self.config.bottle_length = length\n        return self\n\n    def set_nozzle(\n        self, diameter: float, discharge_coefficient: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set nozzle parameters.\"\"\"\n        self.config.nozzle_diameter = diameter\n        if discharge_coefficient is not None:\n            self.config.nozzle_discharge_coefficient = discharge_coefficient\n        return self\n\n    def set_mass(\n        self, empty_mass: float, water_fraction: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set mass parameters.\"\"\"\n        self.config.empty_mass = empty_mass\n        if water_fraction is not None:\n            self.config.water_fraction = water_fraction\n        return self\n\n    def set_aerodynamics(\n        self, drag_coefficient: float, reference_area: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set aerodynamic parameters.\"\"\"\n        self.config.drag_coefficient = drag_coefficient\n        if reference_area is not None:\n            self.config.reference_area = reference_area\n        return self\n\n    def set_initial_conditions(\n        self, pressure: float, temperature: float = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set initial conditions.\"\"\"\n        self.config.initial_pressure = pressure\n        if temperature is not None:\n            self.config.initial_temperature = temperature\n        return self\n\n    def add_liquid_gas(self, mass: float) -&gt; \"RocketBuilder\":\n        \"\"\"Add liquid gas propellant.\"\"\"\n        self.config.liquid_gas_mass = mass\n        return self\n\n    def set_metadata(\n        self, name: str, description: str = None\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"Set rocket metadata.\"\"\"\n        self.config.name = name\n        if description is not None:\n            self.config.description = description\n        return self\n\n    def build_from_dimensions(\n        self,\n        L_body: float,\n        L_cone: float,\n        d_body: float,\n        p_max: float,\n        nozzle_diameter: float,\n        material_name: str = \"PET\",\n        water_fraction: float = DEFAULT_WATER_FRACTION,\n        nozzle_discharge_coefficient: float = DEFAULT_DISCHARGE_COEFFICIENT,\n        liquid_gas_mass: float = 0.0,\n        safety_factor: float = 2.0,\n        cone_wall_thickness: float = 0.002,\n    ) -&gt; \"RocketBuilder\":\n        \"\"\"\n        Build rocket configuration from dimensional parameters.\n\n        Args:\n            L_body: Body length (m)\n            L_cone: Nose cone length (m)\n            d_body: Body diameter (m)\n            p_max: Maximum pressure (Pa)\n            nozzle_diameter: Nozzle diameter (m)\n            material_name: Material name (default: 'PET')\n            water_fraction: Fraction of bottle volume filled with water\n            nozzle_discharge_coefficient: Nozzle discharge coefficient\n            liquid_gas_mass: Mass of liquid gas propellant (kg)\n            safety_factor: Safety factor for wall thickness calculation\n            cone_wall_thickness: Nose cone wall thickness (m)\n\n        Returns:\n            RocketBuilder instance\n        \"\"\"\n        # Get material properties\n        material = self.material_db.get_material(material_name)\n        if not material:\n            raise ValueError(f\"Unknown material: {material_name}\")\n\n        # Calculate wall thickness for body\n        wall_thickness_body = (\n            materials.StructuralAnalysis.calculate_wall_thickness(\n                internal_pressure=p_max,\n                diameter=d_body,\n                material=material,\n                safety_factor=safety_factor,\n            )\n        )\n\n        # Calculate bottle volume (cylindrical approximation)\n        bottle_volume = np.pi * (d_body / 2) ** 2 * L_body\n\n        # Calculate body mass\n        m_body = materials.calculate_bottle_mass(\n            diameter=d_body,\n            length=L_body,\n            wall_thickness=wall_thickness_body,\n            material_name=material_name,\n        )\n\n        # Calculate nose cone surface area\n        A_cone = geometry.RocketGeometry.cone_surface_area(\n            diameter=d_body, height=L_cone\n        )\n\n        # Calculate cone mass\n        cone_volume = A_cone * cone_wall_thickness\n        m_cone = materials.StructuralAnalysis.calculate_mass(\n            cone_volume, material\n        )\n\n        # Calculate total rocket dimensions\n        L_rocket = L_body + L_cone\n\n        # Calculate rocket surface area (wetted area)\n        surface_area_rocket = (\n            geometry.RocketGeometry.calculate_rocket_wetted_area(\n                diameter=d_body,\n                length=L_rocket,\n                nose_cone_height=L_cone,\n                fin_area=0.0,  # Set to 0 as requested\n            )\n        )\n\n        # Calculate Reynolds number and drag coefficient\n        # Using characteristic length = L_rocket\n        Re = 40000 * L_rocket  # Simplified Reynolds number\n\n        # Calculate friction coefficients\n        C_f_laminar = 1.437 * Re ** (-0.5058)\n        C_f_turbulent = 0.03725 * Re ** (-0.1557)\n        C_f = (C_f_laminar + C_f_turbulent) / 2\n\n        # Calculate areas\n        S_bt = np.pi * (d_body / 2) ** 2  # Cross-sectional area\n        S_w = surface_area_rocket  # Wetted surface area\n\n        # Calculate drag coefficient\n        C_drag = (\n            1.02\n            * C_f\n            * (1 + 1.5 / ((L_rocket / d_body) ** (3 / 2)))\n            * S_w\n            / S_bt\n        )\n\n        # Calculate empty mass\n        m_empty = m_cone + m_body\n\n        # Set all calculated parameters\n        self.config.bottle_volume = bottle_volume\n        self.config.bottle_diameter = d_body\n        self.config.bottle_length = L_body\n        self.config.nozzle_diameter = nozzle_diameter\n        self.config.nozzle_discharge_coefficient = nozzle_discharge_coefficient\n        self.config.empty_mass = m_empty\n        self.config.water_fraction = water_fraction\n        self.config.drag_coefficient = C_drag\n        self.config.reference_area = S_bt\n        self.config.initial_pressure = p_max\n        self.config.liquid_gas_mass = liquid_gas_mass\n\n        # Store additional calculated values as metadata\n        self.config.description = (\n            f\"Rocket built from dimensions: L_body={L_body:.3f}m, \"\n            f\"L_cone={L_cone:.3f}m, d_body={d_body:.3f}m, \"\n            f\"p_max={p_max/1000:.0f}kPa, material={material_name}, \"\n            f\"wall_thickness={wall_thickness_body:.4f}m, \"\n            f\"empty_mass={m_empty:.3f}kg, C_drag={C_drag:.3f}\"\n        )\n\n        return self\n\n    def build(self) -&gt; RocketConfiguration:\n        \"\"\"Build and validate the rocket configuration.\"\"\"\n        # Update calculated parameters\n        self.config.__post_init__()\n\n        # Convert to parameter dictionary for validation\n        params = self.to_simulation_params()\n\n        # Validate parameters\n        warnings = self.validator.validate_rocket_parameters(params)\n        if warnings:\n            print(f\"Rocket '{self.config.name}' validation warnings:\")\n            for warning in warnings:\n                print(f\"  - {warning}\")\n\n        return self.config\n\n    def to_simulation_params(self) -&gt; Dict[str, Any]:\n        \"\"\"Convert rocket configuration to simulation parameters.\"\"\"\n        return {\n            \"P0\": self.config.initial_pressure,\n            \"A_nozzle\": self.config.nozzle_area,\n            \"V_bottle\": self.config.bottle_volume,\n            \"water_fraction\": self.config.water_fraction,\n            \"C_d\": self.config.nozzle_discharge_coefficient,\n            \"m_empty\": self.config.empty_mass,\n            \"C_drag\": self.config.drag_coefficient,\n            \"A_rocket\": self.config.reference_area,\n            \"liquid_gas_mass\": self.config.liquid_gas_mass,\n        }\n\n    @classmethod\n    def from_dict(cls, data: Dict[str, Any]) -&gt; \"RocketBuilder\":\n        \"\"\"Create builder from dictionary.\"\"\"\n        builder = cls()\n        builder.config = RocketConfiguration(**data)\n        return builder\n\n    @classmethod\n    def from_json(cls, file_path: str) -&gt; \"RocketBuilder\":\n        \"\"\"Create builder from JSON file.\"\"\"\n        path = Path(file_path)\n        if not path.exists():\n            raise FileNotFoundError(\n                f\"Rocket configuration file not found: {file_path}\"\n            )\n\n        with open(path, \"r\") as f:\n            data = json.load(f)\n\n        return cls.from_dict(data)\n\n    def to_json(self, file_path: str) -&gt; None:\n        \"\"\"Save rocket configuration to JSON file.\"\"\"\n        path = Path(file_path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n\n        with open(path, \"w\") as f:\n            json.dump(asdict(self.config), f, indent=2)\n\n    def reset(self) -&gt; \"RocketBuilder\":\n        \"\"\"Reset builder to default configuration.\"\"\"\n        self.config = RocketConfiguration()\n        return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.add_liquid_gas","title":"<code>add_liquid_gas(self, mass)</code>","text":"<p>Add liquid gas propellant.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def add_liquid_gas(self, mass: float) -&gt; \"RocketBuilder\":\n    \"\"\"Add liquid gas propellant.\"\"\"\n    self.config.liquid_gas_mass = mass\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.build","title":"<code>build(self)</code>","text":"<p>Build and validate the rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def build(self) -&gt; RocketConfiguration:\n    \"\"\"Build and validate the rocket configuration.\"\"\"\n    # Update calculated parameters\n    self.config.__post_init__()\n\n    # Convert to parameter dictionary for validation\n    params = self.to_simulation_params()\n\n    # Validate parameters\n    warnings = self.validator.validate_rocket_parameters(params)\n    if warnings:\n        print(f\"Rocket '{self.config.name}' validation warnings:\")\n        for warning in warnings:\n            print(f\"  - {warning}\")\n\n    return self.config\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.build_from_dimensions","title":"<code>build_from_dimensions(self, L_body, L_cone, d_body, p_max, nozzle_diameter, material_name='PET', water_fraction=0.33, nozzle_discharge_coefficient=0.97, liquid_gas_mass=0.0, safety_factor=2.0, cone_wall_thickness=0.002)</code>","text":"<p>Build rocket configuration from dimensional parameters.</p> <p>Parameters:</p> Name Type Description Default <code>L_body</code> <code>float</code> <p>Body length (m)</p> required <code>L_cone</code> <code>float</code> <p>Nose cone length (m)</p> required <code>d_body</code> <code>float</code> <p>Body diameter (m)</p> required <code>p_max</code> <code>float</code> <p>Maximum pressure (Pa)</p> required <code>nozzle_diameter</code> <code>float</code> <p>Nozzle diameter (m)</p> required <code>material_name</code> <code>str</code> <p>Material name (default: 'PET')</p> <code>'PET'</code> <code>water_fraction</code> <code>float</code> <p>Fraction of bottle volume filled with water</p> <code>0.33</code> <code>nozzle_discharge_coefficient</code> <code>float</code> <p>Nozzle discharge coefficient</p> <code>0.97</code> <code>liquid_gas_mass</code> <code>float</code> <p>Mass of liquid gas propellant (kg)</p> <code>0.0</code> <code>safety_factor</code> <code>float</code> <p>Safety factor for wall thickness calculation</p> <code>2.0</code> <code>cone_wall_thickness</code> <code>float</code> <p>Nose cone wall thickness (m)</p> <code>0.002</code> <p>Returns:</p> Type Description <code>RocketBuilder</code> <p>RocketBuilder instance</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def build_from_dimensions(\n    self,\n    L_body: float,\n    L_cone: float,\n    d_body: float,\n    p_max: float,\n    nozzle_diameter: float,\n    material_name: str = \"PET\",\n    water_fraction: float = DEFAULT_WATER_FRACTION,\n    nozzle_discharge_coefficient: float = DEFAULT_DISCHARGE_COEFFICIENT,\n    liquid_gas_mass: float = 0.0,\n    safety_factor: float = 2.0,\n    cone_wall_thickness: float = 0.002,\n) -&gt; \"RocketBuilder\":\n    \"\"\"\n    Build rocket configuration from dimensional parameters.\n\n    Args:\n        L_body: Body length (m)\n        L_cone: Nose cone length (m)\n        d_body: Body diameter (m)\n        p_max: Maximum pressure (Pa)\n        nozzle_diameter: Nozzle diameter (m)\n        material_name: Material name (default: 'PET')\n        water_fraction: Fraction of bottle volume filled with water\n        nozzle_discharge_coefficient: Nozzle discharge coefficient\n        liquid_gas_mass: Mass of liquid gas propellant (kg)\n        safety_factor: Safety factor for wall thickness calculation\n        cone_wall_thickness: Nose cone wall thickness (m)\n\n    Returns:\n        RocketBuilder instance\n    \"\"\"\n    # Get material properties\n    material = self.material_db.get_material(material_name)\n    if not material:\n        raise ValueError(f\"Unknown material: {material_name}\")\n\n    # Calculate wall thickness for body\n    wall_thickness_body = (\n        materials.StructuralAnalysis.calculate_wall_thickness(\n            internal_pressure=p_max,\n            diameter=d_body,\n            material=material,\n            safety_factor=safety_factor,\n        )\n    )\n\n    # Calculate bottle volume (cylindrical approximation)\n    bottle_volume = np.pi * (d_body / 2) ** 2 * L_body\n\n    # Calculate body mass\n    m_body = materials.calculate_bottle_mass(\n        diameter=d_body,\n        length=L_body,\n        wall_thickness=wall_thickness_body,\n        material_name=material_name,\n    )\n\n    # Calculate nose cone surface area\n    A_cone = geometry.RocketGeometry.cone_surface_area(\n        diameter=d_body, height=L_cone\n    )\n\n    # Calculate cone mass\n    cone_volume = A_cone * cone_wall_thickness\n    m_cone = materials.StructuralAnalysis.calculate_mass(\n        cone_volume, material\n    )\n\n    # Calculate total rocket dimensions\n    L_rocket = L_body + L_cone\n\n    # Calculate rocket surface area (wetted area)\n    surface_area_rocket = (\n        geometry.RocketGeometry.calculate_rocket_wetted_area(\n            diameter=d_body,\n            length=L_rocket,\n            nose_cone_height=L_cone,\n            fin_area=0.0,  # Set to 0 as requested\n        )\n    )\n\n    # Calculate Reynolds number and drag coefficient\n    # Using characteristic length = L_rocket\n    Re = 40000 * L_rocket  # Simplified Reynolds number\n\n    # Calculate friction coefficients\n    C_f_laminar = 1.437 * Re ** (-0.5058)\n    C_f_turbulent = 0.03725 * Re ** (-0.1557)\n    C_f = (C_f_laminar + C_f_turbulent) / 2\n\n    # Calculate areas\n    S_bt = np.pi * (d_body / 2) ** 2  # Cross-sectional area\n    S_w = surface_area_rocket  # Wetted surface area\n\n    # Calculate drag coefficient\n    C_drag = (\n        1.02\n        * C_f\n        * (1 + 1.5 / ((L_rocket / d_body) ** (3 / 2)))\n        * S_w\n        / S_bt\n    )\n\n    # Calculate empty mass\n    m_empty = m_cone + m_body\n\n    # Set all calculated parameters\n    self.config.bottle_volume = bottle_volume\n    self.config.bottle_diameter = d_body\n    self.config.bottle_length = L_body\n    self.config.nozzle_diameter = nozzle_diameter\n    self.config.nozzle_discharge_coefficient = nozzle_discharge_coefficient\n    self.config.empty_mass = m_empty\n    self.config.water_fraction = water_fraction\n    self.config.drag_coefficient = C_drag\n    self.config.reference_area = S_bt\n    self.config.initial_pressure = p_max\n    self.config.liquid_gas_mass = liquid_gas_mass\n\n    # Store additional calculated values as metadata\n    self.config.description = (\n        f\"Rocket built from dimensions: L_body={L_body:.3f}m, \"\n        f\"L_cone={L_cone:.3f}m, d_body={d_body:.3f}m, \"\n        f\"p_max={p_max/1000:.0f}kPa, material={material_name}, \"\n        f\"wall_thickness={wall_thickness_body:.4f}m, \"\n        f\"empty_mass={m_empty:.3f}kg, C_drag={C_drag:.3f}\"\n    )\n\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.from_dict","title":"<code>from_dict(data)</code>  <code>classmethod</code>","text":"<p>Create builder from dictionary.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@classmethod\ndef from_dict(cls, data: Dict[str, Any]) -&gt; \"RocketBuilder\":\n    \"\"\"Create builder from dictionary.\"\"\"\n    builder = cls()\n    builder.config = RocketConfiguration(**data)\n    return builder\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.from_json","title":"<code>from_json(file_path)</code>  <code>classmethod</code>","text":"<p>Create builder from JSON file.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@classmethod\ndef from_json(cls, file_path: str) -&gt; \"RocketBuilder\":\n    \"\"\"Create builder from JSON file.\"\"\"\n    path = Path(file_path)\n    if not path.exists():\n        raise FileNotFoundError(\n            f\"Rocket configuration file not found: {file_path}\"\n        )\n\n    with open(path, \"r\") as f:\n        data = json.load(f)\n\n    return cls.from_dict(data)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.reset","title":"<code>reset(self)</code>","text":"<p>Reset builder to default configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def reset(self) -&gt; \"RocketBuilder\":\n    \"\"\"Reset builder to default configuration.\"\"\"\n    self.config = RocketConfiguration()\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_aerodynamics","title":"<code>set_aerodynamics(self, drag_coefficient, reference_area=None)</code>","text":"<p>Set aerodynamic parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_aerodynamics(\n    self, drag_coefficient: float, reference_area: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set aerodynamic parameters.\"\"\"\n    self.config.drag_coefficient = drag_coefficient\n    if reference_area is not None:\n        self.config.reference_area = reference_area\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_bottle","title":"<code>set_bottle(self, volume, diameter, length=None)</code>","text":"<p>Set bottle parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_bottle(\n    self, volume: float, diameter: float, length: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set bottle parameters.\"\"\"\n    self.config.bottle_volume = volume\n    self.config.bottle_diameter = diameter\n    if length is not None:\n        self.config.bottle_length = length\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_initial_conditions","title":"<code>set_initial_conditions(self, pressure, temperature=None)</code>","text":"<p>Set initial conditions.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_initial_conditions(\n    self, pressure: float, temperature: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set initial conditions.\"\"\"\n    self.config.initial_pressure = pressure\n    if temperature is not None:\n        self.config.initial_temperature = temperature\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_mass","title":"<code>set_mass(self, empty_mass, water_fraction=None)</code>","text":"<p>Set mass parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_mass(\n    self, empty_mass: float, water_fraction: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set mass parameters.\"\"\"\n    self.config.empty_mass = empty_mass\n    if water_fraction is not None:\n        self.config.water_fraction = water_fraction\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_metadata","title":"<code>set_metadata(self, name, description=None)</code>","text":"<p>Set rocket metadata.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_metadata(\n    self, name: str, description: str = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set rocket metadata.\"\"\"\n    self.config.name = name\n    if description is not None:\n        self.config.description = description\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.set_nozzle","title":"<code>set_nozzle(self, diameter, discharge_coefficient=None)</code>","text":"<p>Set nozzle parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def set_nozzle(\n    self, diameter: float, discharge_coefficient: float = None\n) -&gt; \"RocketBuilder\":\n    \"\"\"Set nozzle parameters.\"\"\"\n    self.config.nozzle_diameter = diameter\n    if discharge_coefficient is not None:\n        self.config.nozzle_discharge_coefficient = discharge_coefficient\n    return self\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.to_json","title":"<code>to_json(self, file_path)</code>","text":"<p>Save rocket configuration to JSON file.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def to_json(self, file_path: str) -&gt; None:\n    \"\"\"Save rocket configuration to JSON file.\"\"\"\n    path = Path(file_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    with open(path, \"w\") as f:\n        json.dump(asdict(self.config), f, indent=2)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketBuilder.to_simulation_params","title":"<code>to_simulation_params(self)</code>","text":"<p>Convert rocket configuration to simulation parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def to_simulation_params(self) -&gt; Dict[str, Any]:\n    \"\"\"Convert rocket configuration to simulation parameters.\"\"\"\n    return {\n        \"P0\": self.config.initial_pressure,\n        \"A_nozzle\": self.config.nozzle_area,\n        \"V_bottle\": self.config.bottle_volume,\n        \"water_fraction\": self.config.water_fraction,\n        \"C_d\": self.config.nozzle_discharge_coefficient,\n        \"m_empty\": self.config.empty_mass,\n        \"C_drag\": self.config.drag_coefficient,\n        \"A_rocket\": self.config.reference_area,\n        \"liquid_gas_mass\": self.config.liquid_gas_mass,\n    }\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration","title":"<code> RocketConfiguration        </code>  <code>dataclass</code>","text":"<p>Data class for rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>@dataclass\nclass RocketConfiguration:\n    \"\"\"Data class for rocket configuration.\"\"\"\n\n    # Bottle parameters\n    bottle_volume: float = DEFAULT_BOTTLE_VOLUME  # m\u00b3\n    bottle_diameter: float = DEFAULT_ROCKET_DIAMETER  # m\n    bottle_length: float = 0.3  # m\n\n    # Nozzle parameters\n    nozzle_diameter: float = DEFAULT_NOZZLE_DIAMETER  # m\n    nozzle_discharge_coefficient: float = DEFAULT_DISCHARGE_COEFFICIENT\n\n    # Mass parameters\n    empty_mass: float = DEFAULT_EMPTY_MASS  # kg\n    water_fraction: float = DEFAULT_WATER_FRACTION\n\n    # Aerodynamic parameters\n    drag_coefficient: float = DEFAULT_DRAG_COEFFICIENT\n    reference_area: float = None  # Will be calculated if None\n\n    # Initial conditions\n    initial_pressure: float = 10 * ATMOSPHERIC_PRESSURE  # Pa\n    initial_temperature: float = 300  # K\n\n    # Optional liquid gas parameters\n    liquid_gas_mass: float = 0.0  # kg\n\n    # Metadata\n    name: str = \"Default Rocket\"\n    description: str = \"Standard water rocket configuration\"\n\n    def __post_init__(self):\n        \"\"\"Calculate derived parameters after initialization.\"\"\"\n        if self.reference_area is None:\n            self.reference_area = np.pi * (self.bottle_diameter / 2) ** 2\n\n    @property\n    def nozzle_area(self) -&gt; float:\n        \"\"\"Calculate nozzle cross-sectional area.\"\"\"\n        return np.pi * (self.nozzle_diameter / 2) ** 2\n\n    @property\n    def water_volume(self) -&gt; float:\n        \"\"\"Calculate initial water volume.\"\"\"\n        return self.bottle_volume * self.water_fraction\n\n    @property\n    def water_mass(self) -&gt; float:\n        \"\"\"Calculate initial water mass.\"\"\"\n        from ..core.constants import WATER_DENSITY\n\n        return WATER_DENSITY * self.water_volume\n\n    @property\n    def total_mass(self) -&gt; float:\n        \"\"\"Calculate total initial mass.\"\"\"\n        return self.empty_mass + self.water_mass + self.liquid_gas_mass\n\n    def to_simulation_params(self) -&gt; Dict[str, Any]:\n        \"\"\"Exporting to simulation parameters for simulating the rocket\"\"\"\n        return {\n            \"P0\": self.initial_pressure,\n            \"A_nozzle\": self.nozzle_area,\n            \"V_bottle\": self.bottle_volume,\n            \"water_fraction\": self.water_fraction,\n            \"C_d\": self.nozzle_discharge_coefficient,\n            \"m_empty\": self.empty_mass,\n            \"C_drag\": self.drag_coefficient,\n            \"A_rocket\": self.reference_area,\n            \"liquid_gas_mass\": self.liquid_gas_mass,\n        }\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.nozzle_area","title":"<code>nozzle_area: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate nozzle cross-sectional area.</p>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.total_mass","title":"<code>total_mass: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate total initial mass.</p>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.water_mass","title":"<code>water_mass: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate initial water mass.</p>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.water_volume","title":"<code>water_volume: float</code>  <code>property</code> <code>readonly</code>","text":"<p>Calculate initial water volume.</p>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.__post_init__","title":"<code>__post_init__(self)</code>  <code>special</code>","text":"<p>Calculate derived parameters after initialization.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def __post_init__(self):\n    \"\"\"Calculate derived parameters after initialization.\"\"\"\n    if self.reference_area is None:\n        self.reference_area = np.pi * (self.bottle_diameter / 2) ** 2\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.RocketConfiguration.to_simulation_params","title":"<code>to_simulation_params(self)</code>","text":"<p>Exporting to simulation parameters for simulating the rocket</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def to_simulation_params(self) -&gt; Dict[str, Any]:\n    \"\"\"Exporting to simulation parameters for simulating the rocket\"\"\"\n    return {\n        \"P0\": self.initial_pressure,\n        \"A_nozzle\": self.nozzle_area,\n        \"V_bottle\": self.bottle_volume,\n        \"water_fraction\": self.water_fraction,\n        \"C_d\": self.nozzle_discharge_coefficient,\n        \"m_empty\": self.empty_mass,\n        \"C_drag\": self.drag_coefficient,\n        \"A_rocket\": self.reference_area,\n        \"liquid_gas_mass\": self.liquid_gas_mass,\n    }\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.create_IPT1_rocket","title":"<code>create_IPT1_rocket()</code>","text":"<p>Create a standard water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_IPT1_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a standard water rocket configuration.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.001, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.021)\n        .set_mass(empty_mass=0.1, water_fraction=0.33)\n        .set_initial_conditions(pressure=13 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\n            \"Standard IPT 1L Rocket\",\n            \"Standard IPT Air configuration for 1L bottle\",\n        )\n        .build()\n    )\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.create_competition_rocket","title":"<code>create_competition_rocket()</code>","text":"<p>Create a competition-grade water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_competition_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a competition-grade water rocket configuration.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.0015, diameter=0.08)  # 1.5L bottle\n        .set_nozzle(diameter=0.012, discharge_coefficient=0.98)\n        .set_mass(empty_mass=0.15, water_fraction=0.4)\n        .set_aerodynamics(drag_coefficient=0.3)  # Improved aerodynamics\n        .set_initial_conditions(pressure=12 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\"Competition Rocket\", \"Optimized for maximum altitude\")\n        .build()\n    )\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.create_dimensional_rocket_example","title":"<code>create_dimensional_rocket_example()</code>","text":"<p>Example of creating a rocket from dimensional parameters.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_dimensional_rocket_example():\n    \"\"\"Example of creating a rocket from dimensional parameters.\"\"\"\n    builder = RocketBuilder()\n\n    # Build rocket from dimensions\n    config = (\n        builder.build_from_dimensions(\n            L_body=0.25,  # 25 cm body length\n            L_cone=0.08,  # 8 cm nose cone\n            d_body=0.088,  # 88 mm diameter (standard 2L bottle)\n            p_max=8 * ATMOSPHERIC_PRESSURE,  # 8 bar pressure\n            nozzle_diameter=0.01,  # 10 mm nozzle\n            material_name=\"PET\",\n            water_fraction=0.3,\n        )\n        .set_metadata(\n            name=\"Dimensional Rocket\",\n            description=\"Built from dimensional parameters\",\n        )\n        .build()\n    )\n\n    return config\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.create_high_pressure_rocket","title":"<code>create_high_pressure_rocket()</code>","text":"<p>Create a high-pressure water rocket with liquid gas boost.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_high_pressure_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a high-pressure water rocket with liquid gas boost.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.001, diameter=0.1)  # 1L bottle\n        .set_nozzle(diameter=0.020)\n        .set_mass(empty_mass=0.3, water_fraction=0.25)\n        .add_liquid_gas(mass=0.05)  # 50g liquid CO2\n        .set_initial_conditions(pressure=15 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\"High Pressure Rocket\", \"Rocket with liquid gas boost\")\n        .build()\n    )\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.create_standard_IPT_rocket","title":"<code>create_standard_IPT_rocket()</code>","text":"<p>Create a standard water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_standard_IPT_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a standard water rocket configuration.\"\"\"\n    return (\n        RocketBuilder()\n        .set_bottle(volume=0.001, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.021)\n        .set_mass(empty_mass=0.1, water_fraction=0.33)\n        .set_initial_conditions(pressure=13 * ATMOSPHERIC_PRESSURE)\n        .set_metadata(\n            \"Standard IPT 1L Rocket\",\n            \"Standard IPT Air configuration for 1L bottle\",\n        )\n        .build()\n    )\n</code></pre>"},{"location":"api/waterrocketpy/rocket/builder/#waterrocketpy.rocket.builder.create_standard_rocket","title":"<code>create_standard_rocket()</code>","text":"<p>Create a standard water rocket configuration.</p> Source code in <code>waterrocketpy/rocket/builder.py</code> <pre><code>def create_standard_rocket() -&gt; RocketConfiguration:\n    \"\"\"Create a standard water rocket configuration.\"\"\"\n    return (RocketBuilder()\n       .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle\n        .set_nozzle(diameter=0.015)\n        .set_mass(empty_mass=0.25, water_fraction=0.33)\n        .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)\n       .set_metadata(\"Standard 2L Rocket\", \"Standard configuration for 2L bottle\")\n        .build()\n    )\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/","title":"waterrocketpy.rocket.geometry","text":"<p>Geometric calculations for water rocket components.</p>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.GeometricProperties","title":"<code> GeometricProperties        </code>  <code>dataclass</code>","text":"<p>Container for geometric properties of rocket components.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@dataclass\nclass GeometricProperties:\n    \"\"\"Container for geometric properties of rocket components.\"\"\"\n\n    volume: float\n    surface_area: float\n    center_of_mass: Tuple[float, float, float]\n    center_of_pressure: Tuple[float, float, float]\n    moment_of_inertia: Tuple[float, float, float]  # Ixx, Iyy, Izz\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry","title":"<code> RocketGeometry        </code>","text":"<p>Geometric calculations for water rocket components.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>class RocketGeometry:\n    \"\"\"Geometric calculations for water rocket components.\"\"\"\n\n    @staticmethod\n    def cylinder_volume(diameter: float, length: float) -&gt; float:\n        \"\"\"Calculate volume of a cylinder.\"\"\"\n        radius = diameter / 2\n        return np.pi * radius**2 * length\n\n    @staticmethod\n    def cylinder_surface_area(\n        diameter: float, length: float, include_ends: bool = True\n    ) -&gt; float:\n        \"\"\"Calculate surface area of a cylinder.\"\"\"\n        radius = diameter / 2\n        lateral_area = 2 * np.pi * radius * length\n        if include_ends:\n            end_area = 2 * np.pi * radius**2\n            return lateral_area + end_area\n        return lateral_area\n\n    @staticmethod\n    def sphere_volume(diameter: float) -&gt; float:\n        \"\"\"Calculate volume of a sphere.\"\"\"\n        radius = diameter / 2\n        return (4 / 3) * np.pi * radius**3\n\n    @staticmethod\n    def sphere_surface_area(diameter: float) -&gt; float:\n        \"\"\"Calculate surface area of a sphere.\"\"\"\n        radius = diameter / 2\n        return 4 * np.pi * radius**2\n\n    @staticmethod\n    def cone_volume(diameter: float, height: float) -&gt; float:\n        \"\"\"Calculate volume of a cone.\"\"\"\n        radius = diameter / 2\n        return (1 / 3) * np.pi * radius**2 * height\n\n    @staticmethod\n    def cone_surface_area(diameter: float, height: float) -&gt; float:\n        \"\"\"Calculate surface area of a cone.\"\"\"\n        radius = diameter / 2\n        slant_height = np.sqrt(radius**2 + height**2)\n        return np.pi * radius * slant_height + np.pi * radius**2\n\n    @staticmethod\n    def ellipsoid_volume(a: float, b: float, c: float) -&gt; float:\n        \"\"\"Calculate volume of an ellipsoid.\"\"\"\n        return (4 / 3) * np.pi * a * b * c\n\n    @staticmethod\n    def bottle_volume(\n        diameter: float,\n        length: float,\n        nose_cone_height: float = 0.0,\n        bottom_cone_height: float = 0.0,\n    ) -&gt; float:\n        \"\"\"\n        Calculate total volume of a rocket bottle.\n\n        Args:\n            diameter: Bottle diameter\n            length: Cylindrical section length\n            nose_cone_height: Height of nose cone\n            bottom_cone_height: Height of bottom cone\n\n        Returns:\n            Total volume\n        \"\"\"\n        # Cylindrical section\n        cylinder_vol = RocketGeometry.cylinder_volume(diameter, length)\n\n        # Nose cone (if present)\n        nose_vol = 0\n        if nose_cone_height &gt; 0:\n            nose_vol = RocketGeometry.cone_volume(diameter, nose_cone_height)\n\n        # Bottom cone (if present)\n        bottom_vol = 0\n        if bottom_cone_height &gt; 0:\n            bottom_vol = RocketGeometry.cone_volume(\n                diameter, bottom_cone_height\n            )\n\n        return cylinder_vol + nose_vol + bottom_vol\n\n    @staticmethod\n    def calculate_center_of_mass(\n        components: List[Dict[str, Any]],\n    ) -&gt; Tuple[float, float, float]:\n        \"\"\"\n        Calculate center of mass for multiple components.\n\n        Args:\n            components: List of component dictionaries with 'mass', 'position' keys\n\n        Returns:\n            Center of mass coordinates (x, y, z)\n        \"\"\"\n        total_mass = 0\n        weighted_position = np.array([0.0, 0.0, 0.0])\n\n        for component in components:\n            mass = component[\"mass\"]\n            position = np.array(component[\"position\"])\n\n            total_mass += mass\n            weighted_position += mass * position\n\n        if total_mass == 0:\n            return (0.0, 0.0, 0.0)\n\n        center_of_mass = weighted_position / total_mass\n        return tuple(center_of_mass)\n\n    @staticmethod\n    def calculate_center_of_pressure(\n        fins: List[Dict[str, Any]], body_cp: Tuple[float, float, float]\n    ) -&gt; Tuple[float, float, float]:\n        \"\"\"\n        Calculate center of pressure for rocket with fins.\n\n        Args:\n            fins: List of fin dictionaries with area and position\n            body_cp: Center of pressure of the body\n\n        Returns:\n            Overall center of pressure\n        \"\"\"\n        # Body contribution\n        body_area = 1.0  # Normalized\n        body_moment = np.array(body_cp) * body_area\n\n        total_area = body_area\n        total_moment = body_moment\n\n        # Fin contributions\n        for fin in fins:\n            fin_area = fin[\"area\"]\n            fin_position = np.array(fin[\"position\"])\n\n            total_area += fin_area\n            total_moment += fin_area * fin_position\n\n        if total_area == 0:\n            return body_cp\n\n        cp = total_moment / total_area\n        return tuple(cp)\n\n    @staticmethod\n    def calculate_moment_of_inertia_cylinder(\n        mass: float, radius: float, length: float\n    ) -&gt; Tuple[float, float, float]:\n        \"\"\"\n        Calculate moment of inertia for a cylinder.\n\n        Args:\n            mass: Mass of cylinder\n            radius: Radius of cylinder\n            length: Length of cylinder\n\n        Returns:\n            Moments of inertia (Ixx, Iyy, Izz)\n        \"\"\"\n        # For a cylinder with axis along z:\n        # Ixx = Iyy = (1/12) * m * (3*r^2 + h^2)\n        # Izz = (1/2) * m * r^2\n\n        Ixx = Iyy = (1 / 12) * mass * (3 * radius**2 + length**2)\n        Izz = 0.5 * mass * radius**2\n\n        return (Ixx, Iyy, Izz)\n\n    @staticmethod\n    def calculate_stability_margin(\n        center_of_mass: Tuple[float, float, float],\n        center_of_pressure: Tuple[float, float, float],\n        reference_length: float,\n    ) -&gt; float:\n        \"\"\"\n        Calculate static stability margin.\n\n        Args:\n            center_of_mass: Center of mass position\n            center_of_pressure: Center of pressure position\n            reference_length: Reference length (typically rocket diameter)\n\n        Returns:\n            Stability margin (positive = stable)\n        \"\"\"\n        # Calculate distance between CP and CG along rocket axis (typically\n        # x-axis)\n        cp_x = center_of_pressure[0]\n        cg_x = center_of_mass[0]\n\n        # Stability margin in calibers (rocket diameters)\n        stability_margin = (cp_x - cg_x) / reference_length\n\n        return stability_margin\n\n    @staticmethod\n    def calculate_fin_properties(\n        span: float,\n        root_chord: float,\n        tip_chord: float,\n        sweep_angle: float = 0.0,\n    ) -&gt; Dict[str, float]:\n        \"\"\"\n        Calculate properties of a trapezoidal fin.\n\n        Args:\n            span: Fin span (height)\n            root_chord: Root chord length\n            tip_chord: Tip chord length\n            sweep_angle: Sweep angle in radians\n\n        Returns:\n            Dictionary with fin properties\n        \"\"\"\n        # Area\n        area = 0.5 * (root_chord + tip_chord) * span\n\n        # Aspect ratio\n        aspect_ratio = span**2 / area\n\n        # Taper ratio\n        taper_ratio = tip_chord / root_chord if root_chord &gt; 0 else 0\n\n        # Mean aerodynamic chord\n        mac = (\n            (2 / 3)\n            * root_chord\n            * (1 + taper_ratio + taper_ratio**2)\n            / (1 + taper_ratio)\n        )\n\n        # Centroid position (from root leading edge)\n        x_centroid = (\n            (root_chord + 2 * tip_chord)\n            / (3 * (root_chord + tip_chord))\n            * root_chord\n        )\n        y_centroid = (\n            span / 3 * (root_chord + 2 * tip_chord) / (root_chord + tip_chord)\n        )\n\n        return {\n            \"area\": area,\n            \"aspect_ratio\": aspect_ratio,\n            \"taper_ratio\": taper_ratio,\n            \"mac\": mac,\n            \"centroid_x\": x_centroid,\n            \"centroid_y\": y_centroid,\n        }\n\n    @staticmethod\n    def calculate_rocket_wetted_area(\n        diameter: float,\n        length: float,\n        nose_cone_height: float = 0.0,\n        fin_area: float = 0.0,\n    ) -&gt; float:\n        \"\"\"\n        Calculate total wetted area of rocket.\n\n        Args:\n            diameter: Rocket diameter\n            length: Body length\n            nose_cone_height: Nose cone height\n            fin_area: Total fin area\n\n        Returns:\n            Total wetted area\n        \"\"\"\n        # Body area\n        body_area = RocketGeometry.cylinder_surface_area(\n            diameter, length, include_ends=False\n        )\n\n        # Nose cone area\n        nose_area = 0\n        if nose_cone_height &gt; 0:\n            nose_area = RocketGeometry.cone_surface_area(\n                diameter, nose_cone_height\n            )\n\n        # Base area\n        base_area = np.pi * (diameter / 2) ** 2\n\n        # Total wetted area (both sides of fins)\n        total_area = body_area + nose_area + base_area + 2 * fin_area\n\n        return total_area\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.bottle_volume","title":"<code>bottle_volume(diameter, length, nose_cone_height=0.0, bottom_cone_height=0.0)</code>  <code>staticmethod</code>","text":"<p>Calculate total volume of a rocket bottle.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Bottle diameter</p> required <code>length</code> <code>float</code> <p>Cylindrical section length</p> required <code>nose_cone_height</code> <code>float</code> <p>Height of nose cone</p> <code>0.0</code> <code>bottom_cone_height</code> <code>float</code> <p>Height of bottom cone</p> <code>0.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Total volume</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef bottle_volume(\n    diameter: float,\n    length: float,\n    nose_cone_height: float = 0.0,\n    bottom_cone_height: float = 0.0,\n) -&gt; float:\n    \"\"\"\n    Calculate total volume of a rocket bottle.\n\n    Args:\n        diameter: Bottle diameter\n        length: Cylindrical section length\n        nose_cone_height: Height of nose cone\n        bottom_cone_height: Height of bottom cone\n\n    Returns:\n        Total volume\n    \"\"\"\n    # Cylindrical section\n    cylinder_vol = RocketGeometry.cylinder_volume(diameter, length)\n\n    # Nose cone (if present)\n    nose_vol = 0\n    if nose_cone_height &gt; 0:\n        nose_vol = RocketGeometry.cone_volume(diameter, nose_cone_height)\n\n    # Bottom cone (if present)\n    bottom_vol = 0\n    if bottom_cone_height &gt; 0:\n        bottom_vol = RocketGeometry.cone_volume(\n            diameter, bottom_cone_height\n        )\n\n    return cylinder_vol + nose_vol + bottom_vol\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_center_of_mass","title":"<code>calculate_center_of_mass(components)</code>  <code>staticmethod</code>","text":"<p>Calculate center of mass for multiple components.</p> <p>Parameters:</p> Name Type Description Default <code>components</code> <code>List[Dict[str, Any]]</code> <p>List of component dictionaries with 'mass', 'position' keys</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Center of mass coordinates (x, y, z)</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_center_of_mass(\n    components: List[Dict[str, Any]],\n) -&gt; Tuple[float, float, float]:\n    \"\"\"\n    Calculate center of mass for multiple components.\n\n    Args:\n        components: List of component dictionaries with 'mass', 'position' keys\n\n    Returns:\n        Center of mass coordinates (x, y, z)\n    \"\"\"\n    total_mass = 0\n    weighted_position = np.array([0.0, 0.0, 0.0])\n\n    for component in components:\n        mass = component[\"mass\"]\n        position = np.array(component[\"position\"])\n\n        total_mass += mass\n        weighted_position += mass * position\n\n    if total_mass == 0:\n        return (0.0, 0.0, 0.0)\n\n    center_of_mass = weighted_position / total_mass\n    return tuple(center_of_mass)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_center_of_pressure","title":"<code>calculate_center_of_pressure(fins, body_cp)</code>  <code>staticmethod</code>","text":"<p>Calculate center of pressure for rocket with fins.</p> <p>Parameters:</p> Name Type Description Default <code>fins</code> <code>List[Dict[str, Any]]</code> <p>List of fin dictionaries with area and position</p> required <code>body_cp</code> <code>Tuple[float, float, float]</code> <p>Center of pressure of the body</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Overall center of pressure</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_center_of_pressure(\n    fins: List[Dict[str, Any]], body_cp: Tuple[float, float, float]\n) -&gt; Tuple[float, float, float]:\n    \"\"\"\n    Calculate center of pressure for rocket with fins.\n\n    Args:\n        fins: List of fin dictionaries with area and position\n        body_cp: Center of pressure of the body\n\n    Returns:\n        Overall center of pressure\n    \"\"\"\n    # Body contribution\n    body_area = 1.0  # Normalized\n    body_moment = np.array(body_cp) * body_area\n\n    total_area = body_area\n    total_moment = body_moment\n\n    # Fin contributions\n    for fin in fins:\n        fin_area = fin[\"area\"]\n        fin_position = np.array(fin[\"position\"])\n\n        total_area += fin_area\n        total_moment += fin_area * fin_position\n\n    if total_area == 0:\n        return body_cp\n\n    cp = total_moment / total_area\n    return tuple(cp)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_fin_properties","title":"<code>calculate_fin_properties(span, root_chord, tip_chord, sweep_angle=0.0)</code>  <code>staticmethod</code>","text":"<p>Calculate properties of a trapezoidal fin.</p> <p>Parameters:</p> Name Type Description Default <code>span</code> <code>float</code> <p>Fin span (height)</p> required <code>root_chord</code> <code>float</code> <p>Root chord length</p> required <code>tip_chord</code> <code>float</code> <p>Tip chord length</p> required <code>sweep_angle</code> <code>float</code> <p>Sweep angle in radians</p> <code>0.0</code> <p>Returns:</p> Type Description <code>Dict[str, float]</code> <p>Dictionary with fin properties</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_fin_properties(\n    span: float,\n    root_chord: float,\n    tip_chord: float,\n    sweep_angle: float = 0.0,\n) -&gt; Dict[str, float]:\n    \"\"\"\n    Calculate properties of a trapezoidal fin.\n\n    Args:\n        span: Fin span (height)\n        root_chord: Root chord length\n        tip_chord: Tip chord length\n        sweep_angle: Sweep angle in radians\n\n    Returns:\n        Dictionary with fin properties\n    \"\"\"\n    # Area\n    area = 0.5 * (root_chord + tip_chord) * span\n\n    # Aspect ratio\n    aspect_ratio = span**2 / area\n\n    # Taper ratio\n    taper_ratio = tip_chord / root_chord if root_chord &gt; 0 else 0\n\n    # Mean aerodynamic chord\n    mac = (\n        (2 / 3)\n        * root_chord\n        * (1 + taper_ratio + taper_ratio**2)\n        / (1 + taper_ratio)\n    )\n\n    # Centroid position (from root leading edge)\n    x_centroid = (\n        (root_chord + 2 * tip_chord)\n        / (3 * (root_chord + tip_chord))\n        * root_chord\n    )\n    y_centroid = (\n        span / 3 * (root_chord + 2 * tip_chord) / (root_chord + tip_chord)\n    )\n\n    return {\n        \"area\": area,\n        \"aspect_ratio\": aspect_ratio,\n        \"taper_ratio\": taper_ratio,\n        \"mac\": mac,\n        \"centroid_x\": x_centroid,\n        \"centroid_y\": y_centroid,\n    }\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_moment_of_inertia_cylinder","title":"<code>calculate_moment_of_inertia_cylinder(mass, radius, length)</code>  <code>staticmethod</code>","text":"<p>Calculate moment of inertia for a cylinder.</p> <p>Parameters:</p> Name Type Description Default <code>mass</code> <code>float</code> <p>Mass of cylinder</p> required <code>radius</code> <code>float</code> <p>Radius of cylinder</p> required <code>length</code> <code>float</code> <p>Length of cylinder</p> required <p>Returns:</p> Type Description <code>Tuple[float, float, float]</code> <p>Moments of inertia (Ixx, Iyy, Izz)</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_moment_of_inertia_cylinder(\n    mass: float, radius: float, length: float\n) -&gt; Tuple[float, float, float]:\n    \"\"\"\n    Calculate moment of inertia for a cylinder.\n\n    Args:\n        mass: Mass of cylinder\n        radius: Radius of cylinder\n        length: Length of cylinder\n\n    Returns:\n        Moments of inertia (Ixx, Iyy, Izz)\n    \"\"\"\n    # For a cylinder with axis along z:\n    # Ixx = Iyy = (1/12) * m * (3*r^2 + h^2)\n    # Izz = (1/2) * m * r^2\n\n    Ixx = Iyy = (1 / 12) * mass * (3 * radius**2 + length**2)\n    Izz = 0.5 * mass * radius**2\n\n    return (Ixx, Iyy, Izz)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_rocket_wetted_area","title":"<code>calculate_rocket_wetted_area(diameter, length, nose_cone_height=0.0, fin_area=0.0)</code>  <code>staticmethod</code>","text":"<p>Calculate total wetted area of rocket.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Rocket diameter</p> required <code>length</code> <code>float</code> <p>Body length</p> required <code>nose_cone_height</code> <code>float</code> <p>Nose cone height</p> <code>0.0</code> <code>fin_area</code> <code>float</code> <p>Total fin area</p> <code>0.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Total wetted area</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_rocket_wetted_area(\n    diameter: float,\n    length: float,\n    nose_cone_height: float = 0.0,\n    fin_area: float = 0.0,\n) -&gt; float:\n    \"\"\"\n    Calculate total wetted area of rocket.\n\n    Args:\n        diameter: Rocket diameter\n        length: Body length\n        nose_cone_height: Nose cone height\n        fin_area: Total fin area\n\n    Returns:\n        Total wetted area\n    \"\"\"\n    # Body area\n    body_area = RocketGeometry.cylinder_surface_area(\n        diameter, length, include_ends=False\n    )\n\n    # Nose cone area\n    nose_area = 0\n    if nose_cone_height &gt; 0:\n        nose_area = RocketGeometry.cone_surface_area(\n            diameter, nose_cone_height\n        )\n\n    # Base area\n    base_area = np.pi * (diameter / 2) ** 2\n\n    # Total wetted area (both sides of fins)\n    total_area = body_area + nose_area + base_area + 2 * fin_area\n\n    return total_area\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.calculate_stability_margin","title":"<code>calculate_stability_margin(center_of_mass, center_of_pressure, reference_length)</code>  <code>staticmethod</code>","text":"<p>Calculate static stability margin.</p> <p>Parameters:</p> Name Type Description Default <code>center_of_mass</code> <code>Tuple[float, float, float]</code> <p>Center of mass position</p> required <code>center_of_pressure</code> <code>Tuple[float, float, float]</code> <p>Center of pressure position</p> required <code>reference_length</code> <code>float</code> <p>Reference length (typically rocket diameter)</p> required <p>Returns:</p> Type Description <code>float</code> <p>Stability margin (positive = stable)</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef calculate_stability_margin(\n    center_of_mass: Tuple[float, float, float],\n    center_of_pressure: Tuple[float, float, float],\n    reference_length: float,\n) -&gt; float:\n    \"\"\"\n    Calculate static stability margin.\n\n    Args:\n        center_of_mass: Center of mass position\n        center_of_pressure: Center of pressure position\n        reference_length: Reference length (typically rocket diameter)\n\n    Returns:\n        Stability margin (positive = stable)\n    \"\"\"\n    # Calculate distance between CP and CG along rocket axis (typically\n    # x-axis)\n    cp_x = center_of_pressure[0]\n    cg_x = center_of_mass[0]\n\n    # Stability margin in calibers (rocket diameters)\n    stability_margin = (cp_x - cg_x) / reference_length\n\n    return stability_margin\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cone_surface_area","title":"<code>cone_surface_area(diameter, height)</code>  <code>staticmethod</code>","text":"<p>Calculate surface area of a cone.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cone_surface_area(diameter: float, height: float) -&gt; float:\n    \"\"\"Calculate surface area of a cone.\"\"\"\n    radius = diameter / 2\n    slant_height = np.sqrt(radius**2 + height**2)\n    return np.pi * radius * slant_height + np.pi * radius**2\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cone_volume","title":"<code>cone_volume(diameter, height)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of a cone.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cone_volume(diameter: float, height: float) -&gt; float:\n    \"\"\"Calculate volume of a cone.\"\"\"\n    radius = diameter / 2\n    return (1 / 3) * np.pi * radius**2 * height\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cylinder_surface_area","title":"<code>cylinder_surface_area(diameter, length, include_ends=True)</code>  <code>staticmethod</code>","text":"<p>Calculate surface area of a cylinder.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cylinder_surface_area(\n    diameter: float, length: float, include_ends: bool = True\n) -&gt; float:\n    \"\"\"Calculate surface area of a cylinder.\"\"\"\n    radius = diameter / 2\n    lateral_area = 2 * np.pi * radius * length\n    if include_ends:\n        end_area = 2 * np.pi * radius**2\n        return lateral_area + end_area\n    return lateral_area\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.cylinder_volume","title":"<code>cylinder_volume(diameter, length)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of a cylinder.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef cylinder_volume(diameter: float, length: float) -&gt; float:\n    \"\"\"Calculate volume of a cylinder.\"\"\"\n    radius = diameter / 2\n    return np.pi * radius**2 * length\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.ellipsoid_volume","title":"<code>ellipsoid_volume(a, b, c)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of an ellipsoid.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef ellipsoid_volume(a: float, b: float, c: float) -&gt; float:\n    \"\"\"Calculate volume of an ellipsoid.\"\"\"\n    return (4 / 3) * np.pi * a * b * c\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.sphere_surface_area","title":"<code>sphere_surface_area(diameter)</code>  <code>staticmethod</code>","text":"<p>Calculate surface area of a sphere.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef sphere_surface_area(diameter: float) -&gt; float:\n    \"\"\"Calculate surface area of a sphere.\"\"\"\n    radius = diameter / 2\n    return 4 * np.pi * radius**2\n</code></pre>"},{"location":"api/waterrocketpy/rocket/geometry/#waterrocketpy.rocket.geometry.RocketGeometry.sphere_volume","title":"<code>sphere_volume(diameter)</code>  <code>staticmethod</code>","text":"<p>Calculate volume of a sphere.</p> Source code in <code>waterrocketpy/rocket/geometry.py</code> <pre><code>@staticmethod\ndef sphere_volume(diameter: float) -&gt; float:\n    \"\"\"Calculate volume of a sphere.\"\"\"\n    radius = diameter / 2\n    return (4 / 3) * np.pi * radius**3\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/","title":"waterrocketpy.rocket.materials","text":"<p>Material properties and calculations for water rocket components.</p>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase","title":"<code> MaterialDatabase        </code>","text":"<p>Database of material properties for rocket components.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>class MaterialDatabase:\n    \"\"\"Database of material properties for rocket components.\"\"\"\n\n    def __init__(self):\n        self._materials = self._load_default_materials()\n\n    def _load_default_materials(self) -&gt; Dict[str, MaterialProperties]:\n        \"\"\"Load default material properties.\"\"\"\n        materials = {}\n\n        # PET (Polyethylene Terephthalate) - Common bottle material\n        materials[\"PET\"] = MaterialProperties(\n            name=\"PET\",\n            density=1380,  # kg/m\u00b3\n            yield_strength=55e6,  # Pa\n            ultimate_strength=75e6,  # Pa\n            elastic_modulus=2.8e9,  # Pa\n            poisson_ratio=0.37,\n            thermal_expansion=70e-6,  # 1/K\n            thermal_conductivity=0.24,  # W/(m\u00b7K)\n            specific_heat=1200,  # J/(kg\u00b7K)\n            max_temperature=343,  # K (70\u00b0C)\n            cost_per_kg=1.5,\n        )\n\n        # HDPE (High-Density Polyethylene)\n        materials[\"HDPE\"] = MaterialProperties(\n            name=\"HDPE\",\n            density=960,  # kg/m\u00b3\n            yield_strength=30e6,  # Pa\n            ultimate_strength=40e6,  # Pa\n            elastic_modulus=1.1e9,  # Pa\n            poisson_ratio=0.42,\n            thermal_expansion=120e-6,  # 1/K\n            thermal_conductivity=0.48,  # W/(m\u00b7K)\n            specific_heat=1900,  # J/(kg\u00b7K)\n            max_temperature=393,  # K (120\u00b0C)\n            cost_per_kg=1.2,\n        )\n\n        # Aluminum (for nozzles, fins)\n        materials[\"Aluminum\"] = MaterialProperties(\n            name=\"Aluminum\",\n            density=2700,  # kg/m\u00b3\n            yield_strength=276e6,  # Pa\n            ultimate_strength=310e6,  # Pa\n            elastic_modulus=69e9,  # Pa\n            poisson_ratio=0.33,\n            thermal_expansion=23e-6,  # 1/K\n            thermal_conductivity=237,  # W/(m\u00b7K)\n            specific_heat=900,  # J/(kg\u00b7K)\n            max_temperature=933,  # K (660\u00b0C)\n            cost_per_kg=2.5,\n        )\n\n        # Carbon Fiber (for advanced rockets)\n        materials[\"Carbon_Fiber\"] = MaterialProperties(\n            name=\"Carbon Fiber\",\n            density=1600,  # kg/m\u00b3\n            yield_strength=3500e6,  # Pa\n            ultimate_strength=4000e6,  # Pa\n            elastic_modulus=230e9,  # Pa\n            poisson_ratio=0.22,\n            thermal_expansion=-0.5e-6,  # 1/K\n            thermal_conductivity=100,  # W/(m\u00b7K)\n            specific_heat=700,  # J/(kg\u00b7K)\n            max_temperature=673,  # K (400\u00b0C)\n            cost_per_kg=50.0,\n        )\n\n        # Fiberglass\n        materials[\"Fiberglass\"] = MaterialProperties(\n            name=\"Fiberglass\",\n            density=1800,  # kg/m\u00b3\n            yield_strength=400e6,  # Pa\n            ultimate_strength=500e6,  # Pa\n            elastic_modulus=35e9,  # Pa\n            poisson_ratio=0.25,\n            thermal_expansion=8e-6,  # 1/K\n            thermal_conductivity=0.35,  # W/(m\u00b7K)\n            specific_heat=800,  # J/(kg\u00b7K)\n            max_temperature=573,  # K (300\u00b0C)\n            cost_per_kg=8.0,\n        )\n\n        # Stainless Steel (for high-pressure applications)\n        materials[\"Stainless_Steel\"] = MaterialProperties(\n            name=\"Stainless Steel\",\n            density=8000,  # kg/m\u00b3\n            yield_strength=520e6,  # Pa\n            ultimate_strength=720e6,  # Pa\n            elastic_modulus=200e9,  # Pa\n            poisson_ratio=0.29,\n            thermal_expansion=17e-6,  # 1/K\n            thermal_conductivity=16,  # W/(m\u00b7K)\n            specific_heat=500,  # J/(kg\u00b7K)\n            max_temperature=1673,  # K (1400\u00b0C)\n            cost_per_kg=5.0,\n        )\n\n        return materials\n\n    def get_material(self, name: str) -&gt; Optional[MaterialProperties]:\n        \"\"\"Get material properties by name.\"\"\"\n        return self._materials.get(name)\n\n    def add_material(self, material: MaterialProperties) -&gt; None:\n        \"\"\"Add a new material to the database.\"\"\"\n        self._materials[material.name] = material\n\n    def list_materials(self) -&gt; list:\n        \"\"\"List all available materials.\"\"\"\n        return list(self._materials.keys())\n\n    def load_from_json(self, file_path: str) -&gt; None:\n        \"\"\"Load materials from JSON file.\"\"\"\n        path = Path(file_path)\n        if not path.exists():\n            raise FileNotFoundError(\n                f\"Material database file not found: {file_path}\"\n            )\n\n        with open(path, \"r\") as f:\n            data = json.load(f)\n\n        for name, props in data.items():\n            material = MaterialProperties(name=name, **props)\n            self.add_material(material)\n\n    def save_to_json(self, file_path: str) -&gt; None:\n        \"\"\"Save materials to JSON file.\"\"\"\n        path = Path(file_path)\n        path.parent.mkdir(parents=True, exist_ok=True)\n\n        data = {}\n        for name, material in self._materials.items():\n            data[name] = {\n                \"density\": material.density,\n                \"yield_strength\": material.yield_strength,\n                \"ultimate_strength\": material.ultimate_strength,\n                \"elastic_modulus\": material.elastic_modulus,\n                \"poisson_ratio\": material.poisson_ratio,\n                \"thermal_expansion\": material.thermal_expansion,\n                \"thermal_conductivity\": material.thermal_conductivity,\n                \"specific_heat\": material.specific_heat,\n                \"max_temperature\": material.max_temperature,\n                \"cost_per_kg\": material.cost_per_kg,\n            }\n\n        with open(path, \"w\") as f:\n            json.dump(data, f, indent=2)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.add_material","title":"<code>add_material(self, material)</code>","text":"<p>Add a new material to the database.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def add_material(self, material: MaterialProperties) -&gt; None:\n    \"\"\"Add a new material to the database.\"\"\"\n    self._materials[material.name] = material\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.get_material","title":"<code>get_material(self, name)</code>","text":"<p>Get material properties by name.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def get_material(self, name: str) -&gt; Optional[MaterialProperties]:\n    \"\"\"Get material properties by name.\"\"\"\n    return self._materials.get(name)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.list_materials","title":"<code>list_materials(self)</code>","text":"<p>List all available materials.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def list_materials(self) -&gt; list:\n    \"\"\"List all available materials.\"\"\"\n    return list(self._materials.keys())\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.load_from_json","title":"<code>load_from_json(self, file_path)</code>","text":"<p>Load materials from JSON file.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def load_from_json(self, file_path: str) -&gt; None:\n    \"\"\"Load materials from JSON file.\"\"\"\n    path = Path(file_path)\n    if not path.exists():\n        raise FileNotFoundError(\n            f\"Material database file not found: {file_path}\"\n        )\n\n    with open(path, \"r\") as f:\n        data = json.load(f)\n\n    for name, props in data.items():\n        material = MaterialProperties(name=name, **props)\n        self.add_material(material)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialDatabase.save_to_json","title":"<code>save_to_json(self, file_path)</code>","text":"<p>Save materials to JSON file.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def save_to_json(self, file_path: str) -&gt; None:\n    \"\"\"Save materials to JSON file.\"\"\"\n    path = Path(file_path)\n    path.parent.mkdir(parents=True, exist_ok=True)\n\n    data = {}\n    for name, material in self._materials.items():\n        data[name] = {\n            \"density\": material.density,\n            \"yield_strength\": material.yield_strength,\n            \"ultimate_strength\": material.ultimate_strength,\n            \"elastic_modulus\": material.elastic_modulus,\n            \"poisson_ratio\": material.poisson_ratio,\n            \"thermal_expansion\": material.thermal_expansion,\n            \"thermal_conductivity\": material.thermal_conductivity,\n            \"specific_heat\": material.specific_heat,\n            \"max_temperature\": material.max_temperature,\n            \"cost_per_kg\": material.cost_per_kg,\n        }\n\n    with open(path, \"w\") as f:\n        json.dump(data, f, indent=2)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.MaterialProperties","title":"<code> MaterialProperties        </code>  <code>dataclass</code>","text":"<p>Container for material properties.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@dataclass\nclass MaterialProperties:\n    \"\"\"Container for material properties.\"\"\"\n\n    name: str\n    density: float  # kg/m\u00b3\n    yield_strength: float  # Pa\n    ultimate_strength: float  # Pa\n    elastic_modulus: float  # Pa\n    poisson_ratio: float\n    thermal_expansion: float  # 1/K\n    thermal_conductivity: float  # W/(m\u00b7K)\n    specific_heat: float  # J/(kg\u00b7K)\n    max_temperature: float  # K\n    cost_per_kg: float = 0.0  # Optional cost information\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis","title":"<code> StructuralAnalysis        </code>","text":"<p>Structural analysis calculations for rocket components.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>class StructuralAnalysis:\n    \"\"\"Structural analysis calculations for rocket components.\"\"\"\n\n    @staticmethod\n    def calculate_wall_thickness(\n        internal_pressure: float,\n        diameter: float,\n        material: MaterialProperties,\n        safety_factor: float = 2.0,\n    ) -&gt; float:\n        \"\"\"\n        Calculate minimum wall thickness for pressure vessel.\n\n        Args:\n            internal_pressure: Internal pressure (Pa)\n            diameter: Vessel diameter (m)\n            material: Material properties\n            safety_factor: Safety factor\n\n        Returns:\n            Minimum wall thickness (m)\n        \"\"\"\n        # Using thin-wall pressure vessel formula: \u03c3 = p*d/(2*t)\n        # Rearranging: t = p*d/(2*\u03c3_allow)\n\n        allowable_stress = material.yield_strength / safety_factor\n        radius = diameter / 2\n\n        # Hoop stress formula for thin-walled cylinder\n        thickness = internal_pressure * radius / allowable_stress\n\n        return thickness\n\n    @staticmethod\n    def calculate_burst_pressure(\n        diameter: float, wall_thickness: float, material: MaterialProperties\n    ) -&gt; float:\n        \"\"\"\n        Calculate burst pressure for a cylindrical vessel.\n\n        Args:\n            diameter: Vessel diameter (m)\n            wall_thickness: Wall thickness (m)\n            material: Material properties\n\n        Returns:\n            Burst pressure (Pa)\n        \"\"\"\n        radius = diameter / 2\n\n        # Using ultimate strength for burst calculation\n        burst_pressure = (\n            2 * material.ultimate_strength * wall_thickness / radius\n        )\n\n        return burst_pressure\n\n    @staticmethod\n    def calculate_mass(volume: float, material: MaterialProperties) -&gt; float:\n        \"\"\"\n        Calculate mass of component.\n\n        Args:\n            volume: Component volume (m\u00b3)\n            material: Material properties\n\n        Returns:\n            Mass (kg)\n        \"\"\"\n        return volume * material.density\n\n    @staticmethod\n    def check_temperature_limits(\n        operating_temperature: float, material: MaterialProperties\n    ) -&gt; bool:\n        \"\"\"\n        Check if operating temperature is within material limits.\n\n        Args:\n            operating_temperature: Operating temperature (K)\n            material: Material properties\n\n        Returns:\n            True if temperature is acceptable\n        \"\"\"\n        return operating_temperature &lt;= material.max_temperature\n\n    @staticmethod\n    def calculate_thermal_stress(\n        temperature_change: float, length: float, material: MaterialProperties\n    ) -&gt; float:\n        \"\"\"\n        Calculate thermal stress due to temperature change.\n\n        Args:\n            temperature_change: Temperature change (K)\n            length: Component length (m)\n            material: Material properties\n\n        Returns:\n            Thermal stress (Pa)\n        \"\"\"\n        # Thermal strain = \u03b1 * \u0394T\n        # Thermal stress = E * \u03b1 * \u0394T (if constrained)\n\n        thermal_strain = material.thermal_expansion * temperature_change\n        thermal_stress = material.elastic_modulus * thermal_strain\n\n        return thermal_stress\n\n    @staticmethod\n    def calculate_cost(volume: float, material: MaterialProperties) -&gt; float:\n        \"\"\"\n        Calculate material cost.\n\n        Args:\n            volume: Component volume (m\u00b3)\n            material: Material properties\n\n        Returns:\n            Cost (currency units)\n        \"\"\"\n        mass = StructuralAnalysis.calculate_mass(volume, material)\n        return mass * material.cost_per_kg\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_burst_pressure","title":"<code>calculate_burst_pressure(diameter, wall_thickness, material)</code>  <code>staticmethod</code>","text":"<p>Calculate burst pressure for a cylindrical vessel.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Vessel diameter (m)</p> required <code>wall_thickness</code> <code>float</code> <p>Wall thickness (m)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Burst pressure (Pa)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_burst_pressure(\n    diameter: float, wall_thickness: float, material: MaterialProperties\n) -&gt; float:\n    \"\"\"\n    Calculate burst pressure for a cylindrical vessel.\n\n    Args:\n        diameter: Vessel diameter (m)\n        wall_thickness: Wall thickness (m)\n        material: Material properties\n\n    Returns:\n        Burst pressure (Pa)\n    \"\"\"\n    radius = diameter / 2\n\n    # Using ultimate strength for burst calculation\n    burst_pressure = (\n        2 * material.ultimate_strength * wall_thickness / radius\n    )\n\n    return burst_pressure\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_cost","title":"<code>calculate_cost(volume, material)</code>  <code>staticmethod</code>","text":"<p>Calculate material cost.</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>float</code> <p>Component volume (m\u00b3)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Cost (currency units)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_cost(volume: float, material: MaterialProperties) -&gt; float:\n    \"\"\"\n    Calculate material cost.\n\n    Args:\n        volume: Component volume (m\u00b3)\n        material: Material properties\n\n    Returns:\n        Cost (currency units)\n    \"\"\"\n    mass = StructuralAnalysis.calculate_mass(volume, material)\n    return mass * material.cost_per_kg\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_mass","title":"<code>calculate_mass(volume, material)</code>  <code>staticmethod</code>","text":"<p>Calculate mass of component.</p> <p>Parameters:</p> Name Type Description Default <code>volume</code> <code>float</code> <p>Component volume (m\u00b3)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Mass (kg)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_mass(volume: float, material: MaterialProperties) -&gt; float:\n    \"\"\"\n    Calculate mass of component.\n\n    Args:\n        volume: Component volume (m\u00b3)\n        material: Material properties\n\n    Returns:\n        Mass (kg)\n    \"\"\"\n    return volume * material.density\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_thermal_stress","title":"<code>calculate_thermal_stress(temperature_change, length, material)</code>  <code>staticmethod</code>","text":"<p>Calculate thermal stress due to temperature change.</p> <p>Parameters:</p> Name Type Description Default <code>temperature_change</code> <code>float</code> <p>Temperature change (K)</p> required <code>length</code> <code>float</code> <p>Component length (m)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>float</code> <p>Thermal stress (Pa)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_thermal_stress(\n    temperature_change: float, length: float, material: MaterialProperties\n) -&gt; float:\n    \"\"\"\n    Calculate thermal stress due to temperature change.\n\n    Args:\n        temperature_change: Temperature change (K)\n        length: Component length (m)\n        material: Material properties\n\n    Returns:\n        Thermal stress (Pa)\n    \"\"\"\n    # Thermal strain = \u03b1 * \u0394T\n    # Thermal stress = E * \u03b1 * \u0394T (if constrained)\n\n    thermal_strain = material.thermal_expansion * temperature_change\n    thermal_stress = material.elastic_modulus * thermal_strain\n\n    return thermal_stress\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.calculate_wall_thickness","title":"<code>calculate_wall_thickness(internal_pressure, diameter, material, safety_factor=2.0)</code>  <code>staticmethod</code>","text":"<p>Calculate minimum wall thickness for pressure vessel.</p> <p>Parameters:</p> Name Type Description Default <code>internal_pressure</code> <code>float</code> <p>Internal pressure (Pa)</p> required <code>diameter</code> <code>float</code> <p>Vessel diameter (m)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <code>safety_factor</code> <code>float</code> <p>Safety factor</p> <code>2.0</code> <p>Returns:</p> Type Description <code>float</code> <p>Minimum wall thickness (m)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef calculate_wall_thickness(\n    internal_pressure: float,\n    diameter: float,\n    material: MaterialProperties,\n    safety_factor: float = 2.0,\n) -&gt; float:\n    \"\"\"\n    Calculate minimum wall thickness for pressure vessel.\n\n    Args:\n        internal_pressure: Internal pressure (Pa)\n        diameter: Vessel diameter (m)\n        material: Material properties\n        safety_factor: Safety factor\n\n    Returns:\n        Minimum wall thickness (m)\n    \"\"\"\n    # Using thin-wall pressure vessel formula: \u03c3 = p*d/(2*t)\n    # Rearranging: t = p*d/(2*\u03c3_allow)\n\n    allowable_stress = material.yield_strength / safety_factor\n    radius = diameter / 2\n\n    # Hoop stress formula for thin-walled cylinder\n    thickness = internal_pressure * radius / allowable_stress\n\n    return thickness\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.StructuralAnalysis.check_temperature_limits","title":"<code>check_temperature_limits(operating_temperature, material)</code>  <code>staticmethod</code>","text":"<p>Check if operating temperature is within material limits.</p> <p>Parameters:</p> Name Type Description Default <code>operating_temperature</code> <code>float</code> <p>Operating temperature (K)</p> required <code>material</code> <code>MaterialProperties</code> <p>Material properties</p> required <p>Returns:</p> Type Description <code>bool</code> <p>True if temperature is acceptable</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>@staticmethod\ndef check_temperature_limits(\n    operating_temperature: float, material: MaterialProperties\n) -&gt; bool:\n    \"\"\"\n    Check if operating temperature is within material limits.\n\n    Args:\n        operating_temperature: Operating temperature (K)\n        material: Material properties\n\n    Returns:\n        True if temperature is acceptable\n    \"\"\"\n    return operating_temperature &lt;= material.max_temperature\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.calculate_bottle_mass","title":"<code>calculate_bottle_mass(diameter, length, wall_thickness, material_name='PET')</code>","text":"<p>Calculate mass of a bottle.</p> <p>Parameters:</p> Name Type Description Default <code>diameter</code> <code>float</code> <p>Bottle diameter (m)</p> required <code>length</code> <code>float</code> <p>Bottle length (m)</p> required <code>wall_thickness</code> <code>float</code> <p>Wall thickness (m)</p> required <code>material_name</code> <code>str</code> <p>Material name</p> <code>'PET'</code> <p>Returns:</p> Type Description <code>float</code> <p>Bottle mass (kg)</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def calculate_bottle_mass(\n    diameter: float,\n    length: float,\n    wall_thickness: float,\n    material_name: str = \"PET\",\n) -&gt; float:\n    \"\"\"\n    Calculate mass of a bottle.\n\n    Args:\n        diameter: Bottle diameter (m)\n        length: Bottle length (m)\n        wall_thickness: Wall thickness (m)\n        material_name: Material name\n\n    Returns:\n        Bottle mass (kg)\n    \"\"\"\n    material = get_material_properties(material_name)\n    if not material:\n        raise ValueError(f\"Unknown material: {material_name}\")\n\n    # Calculate volume of material (approximation for thin walls)\n    outer_radius = diameter / 2\n    inner_radius = outer_radius - wall_thickness\n\n    # Volume of cylindrical shell\n    volume = np.pi * length * (outer_radius**2 - inner_radius**2)\n\n    # Add volume for bottle ends (approximate as flat discs)\n    end_volume = (\n        2 * np.pi * wall_thickness * (outer_radius**2 - inner_radius**2)\n    )\n\n    total_volume = volume + end_volume\n\n    return StructuralAnalysis.calculate_mass(total_volume, material)\n</code></pre>"},{"location":"api/waterrocketpy/rocket/materials/#waterrocketpy.rocket.materials.get_material_properties","title":"<code>get_material_properties(name)</code>","text":"<p>Convenience function to get material properties.</p> Source code in <code>waterrocketpy/rocket/materials.py</code> <pre><code>def get_material_properties(name: str) -&gt; Optional[MaterialProperties]:\n    \"\"\"Convenience function to get material properties.\"\"\"\n    return material_db.get_material(name)\n</code></pre>"},{"location":"api/waterrocketpy/utils/loader/","title":"waterrocketpy.utils.loader","text":""},{"location":"api/waterrocketpy/utils/loader/#waterrocketpy.utils.loader.load_flight_data","title":"<code>load_flight_data(path)</code>","text":"<p>Load FlightData from a .json or .npz file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Path to the .json or .npz file (without extension allowed).</p> required <p>Returns:</p> Type Description <code>FlightData</code> <p>FlightData instance reconstructed from saved data.</p> Source code in <code>waterrocketpy/utils/loader.py</code> <pre><code>def load_flight_data(path: Union[str, Path]) -&gt; FlightData:\n    \"\"\"\n    Load FlightData from a .json or .npz file.\n\n    Args:\n        path: Path to the .json or .npz file (without extension allowed).\n\n    Returns:\n        FlightData instance reconstructed from saved data.\n    \"\"\"\n    path = Path(path)\n    if path.suffix == \"\":\n        if (path.with_suffix(\".json\")).exists():\n            path = path.with_suffix(\".json\")\n        elif (path.with_suffix(\".npz\")).exists():\n            path = path.with_suffix(\".npz\")\n        else:\n            raise FileNotFoundError(\n                \"Neither .json nor .npz file found for base path.\"\n            )\n\n    if path.suffix == \".json\":\n        with open(path, \"r\") as f:\n            data = json.load(f)\n        fd_fields = FlightData.__dataclass_fields__.keys()\n        init_args = {\n            key: (\n                np.array(value)\n                if isinstance(\n                    FlightData.__dataclass_fields__[key].type, type(np.ndarray)\n                )\n                else value\n            )\n            for key, value in data.items()\n            if key in fd_fields\n        }\n        return FlightData(**init_args)\n\n    elif path.suffix == \".npz\":\n        loaded = np.load(path, allow_pickle=False)\n        init_args = {\n            key: loaded[key]\n            for key in FlightData.__dataclass_fields__.keys()\n            if key in loaded\n        }\n        return FlightData(**init_args)\n\n    else:\n        raise ValueError(\"Unsupported file extension. Use .json or .npz.\")\n</code></pre>"},{"location":"api/waterrocketpy/utils/loader/#waterrocketpy.utils.loader.load_simulation_params","title":"<code>load_simulation_params(path)</code>","text":"<p>Load only the simulation parameters from a .json file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Path to the .json file (can omit extension).</p> required <p>Returns:</p> Type Description <code>Dict[str, Any]</code> <p>Dictionary of simulation parameters.</p> Source code in <code>waterrocketpy/utils/loader.py</code> <pre><code>def load_simulation_params(path: Union[str, Path]) -&gt; Dict[str, Any]:\n    \"\"\"\n    Load only the simulation parameters from a .json file.\n\n    Args:\n        path: Path to the .json file (can omit extension).\n\n    Returns:\n        Dictionary of simulation parameters.\n    \"\"\"\n    path = Path(path)\n    if path.suffix == \"\":\n        path = path.with_suffix(\".json\")\n\n    if not path.exists():\n        raise FileNotFoundError(f\"No JSON file found at {path}\")\n\n    with open(path, \"r\") as f:\n        data = json.load(f)\n\n    return data.get(\"simulation_params\", {})\n</code></pre>"},{"location":"api/waterrocketpy/utils/saver/","title":"waterrocketpy.utils.saver","text":""},{"location":"api/waterrocketpy/utils/saver/#waterrocketpy.utils.saver.load_flight_data","title":"<code>load_flight_data(path)</code>","text":"<p>Load FlightData from a JSON file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Path to the JSON file.</p> required <p>Returns:</p> Type Description <code>FlightData</code> <p>Reconstructed FlightData object.</p> Source code in <code>waterrocketpy/utils/saver.py</code> <pre><code>def load_flight_data(path: Union[str, Path]) -&gt; FlightData:\n    \"\"\"\n    Load FlightData from a JSON file.\n\n    Args:\n        path: Path to the JSON file.\n\n    Returns:\n        Reconstructed FlightData object.\n    \"\"\"\n    path = Path(path).with_suffix(\".json\")\n    with open(path, \"r\") as f:\n        json_data = json.load(f)\n\n    # Extract only FlightData fields (ignore metadata)\n    fd_fields = FlightData.__dataclass_fields__.keys()\n    init_args = {\n        key: (\n            np.array(val)\n            if isinstance(\n                FlightData.__dataclass_fields__[key].type, type(np.ndarray)\n            )\n            else val\n        )\n        for key, val in json_data.items()\n        if key in fd_fields\n    }\n\n    return FlightData(**init_args)\n</code></pre>"},{"location":"api/waterrocketpy/utils/saver/#waterrocketpy.utils.saver.save_flight_data","title":"<code>save_flight_data(data, path, include_metadata=True)</code>","text":"<p>Save FlightData to JSON and NPZ formats.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>FlightData</code> <p>The FlightData object to save.</p> required <code>path</code> <code>Union[str, pathlib.Path]</code> <p>Base path (without extension) for saving files.</p> required <code>include_metadata</code> <code>bool</code> <p>If True, includes simulation parameters in the JSON file.</p> <code>True</code> Source code in <code>waterrocketpy/utils/saver.py</code> <pre><code>def save_flight_data(\n    data: FlightData, path: Union[str, Path], include_metadata: bool = True\n) -&gt; None:\n    \"\"\"\n    Save FlightData to JSON and NPZ formats.\n\n    Args:\n        data: The FlightData object to save.\n        path: Base path (without extension) for saving files.\n        include_metadata: If True, includes simulation parameters in the JSON file.\n    \"\"\"\n    path = Path(path)\n\n    # Convert arrays to lists for JSON serialization\n    json_data = {\n        key: val.tolist() if isinstance(val, np.ndarray) else val\n        for key, val in asdict(data).items()\n    }\n\n    # Add simulation parameters if available and requested\n    if include_metadata and hasattr(data, \"to_simulation_params\"):\n        try:\n            json_data[\"simulation_params\"] = data.to_simulation_params()\n        except Exception as e:\n            print(f\"Warning: Could not extract simulation parameters: {e}\")\n\n    # Save as JSON\n    json_file = path.with_suffix(\".json\")\n    with open(json_file, \"w\") as f:\n        json.dump(json_data, f, indent=2)\n\n    # Save as compressed NPZ\n    npz_file = path.with_suffix(\".npz\")\n    np.savez_compressed(\n        npz_file,\n        **{\n            key: val\n            for key, val in asdict(data).items()\n            if isinstance(val, np.ndarray)\n        },\n    )\n\n    print(f\"Saved FlightData to {json_file} and {npz_file}\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/flight_animation/","title":"waterrocketpy.visualization.flight_animation","text":""},{"location":"api/waterrocketpy/visualization/parameter_explorer/","title":"waterrocketpy.visualization.parameter_explorer","text":"<p>Water Rocket Parameter Exploration Tool</p> <p>This script provides comprehensive parameter exploration capabilities for water rocket simulations. Features: - Parameter sweeping with configurable ranges - Multi-parameter analysis with 2D plotting - Sensitivity analysis (derivatives) - Extensible design for adding new parameters and targets - Robust error handling and progress tracking</p>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ExplorationResult","title":"<code> ExplorationResult        </code>  <code>dataclass</code>","text":"<p>Results from parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>@dataclass\nclass ExplorationResult:\n    \"\"\"Results from parameter exploration.\"\"\"\n\n    parameter_names: List[str]\n    parameter_values: Dict[str, np.ndarray]\n    target_values: np.ndarray\n    target_name: str\n    target_unit: str\n    base_target_value: float\n    sensitivity_analysis: Dict[str, float]\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterConfig","title":"<code> ParameterConfig        </code>  <code>dataclass</code>","text":"<p>Configuration for a parameter to explore.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>@dataclass\nclass ParameterConfig:\n    \"\"\"Configuration for a parameter to explore.\"\"\"\n\n    name: str\n    base_value: float\n    min_factor: float = 0.5  # minimum as factor of base value\n    max_factor: float = 2.0  # maximum as factor of base value\n    num_points: int = 10  # number of points to sample\n    unit: str = \"\"  # unit for display\n\n    @property\n    def min_value(self) -&gt; float:\n        return self.base_value * self.min_factor\n\n    @property\n    def max_value(self) -&gt; float:\n        return self.base_value * self.max_factor\n\n    @property\n    def values(self) -&gt; np.ndarray:\n        return np.linspace(self.min_value, self.max_value, self.num_points)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer","title":"<code> ParameterExplorer        </code>","text":"<p>Main class for water rocket parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>class ParameterExplorer:\n    \"\"\"Main class for water rocket parameter exploration.\"\"\"\n\n    def __init__(self,verbose: bool = False):\n        self.verbose = verbose  # Enable verbose output for debugging\n        self.simulator = WaterRocketSimulator(verbose=self.verbose)\n\n\n        # Define available target extractors\n        self.target_extractors = {\n            \"apogee\": (\"max_altitude\", \"m\", \"Maximum Altitude\"),\n            \"max_velocity\": (\"max_velocity\", \"m/s\", \"Maximum Velocity\"),\n            \"flight_time\": (\"flight_time\", \"s\", \"Flight Time\"),\n            \"water_depletion_time\": (\n                \"water_depletion_time\",\n                \"s\",\n                \"Water Depletion Time\",\n            ),\n            \"air_depletion_time\": (\n                \"air_depletion_time\",\n                \"s\",\n                \"Air Depletion Time\",\n            ),\n        }\n\n        # Define parameter mappings - maps explorer parameter names to simulation parameter keys\n        # Format: 'explorer_name': ('sim_param_key', 'display_name', 'unit',\n        # default_range)\n        self.parameter_mappings = {\n            # Pressure and initial conditions\n            \"initial_pressure\": (\n                \"P0\",\n                \"Initial Pressure\",\n                \"Pa\",\n                {\"min_factor\": 0.3, \"max_factor\": 3.0},\n            ),\n            \"pressure\": (\n                \"P0\",\n                \"Initial Pressure\",\n                \"Pa\",\n                {\"min_factor\": 0.3, \"max_factor\": 3.0},\n            ),  # alias\n            # Water and mass parameters\n            \"water_fraction\": (\n                \"water_fraction\",\n                \"Water Fraction\",\n                \"-\",\n                {\"min_factor\": 0.3, \"max_factor\": 2.5},\n            ),\n            # Nozzle parameters\n            \"nozzle_area\": (\n                \"A_nozzle\",\n                \"Nozzle Area\",\n                \"m\u00b2\",\n                {\"min_factor\": 0.4, \"max_factor\": 3.0},\n            ),\n            \"nozzle_diameter\": (\n                \"A_nozzle\",\n                \"Nozzle Diameter\",\n                \"m\",\n                {\n                    \"min_factor\": 0.5,\n                    \"max_factor\": 2.5,\n                    \"convert_func\": self._diameter_to_area,\n                },\n            ),\n            \"nozzle_discharge_coefficient\": (\n                \"C_d\",\n                \"Nozzle Discharge Coefficient\",\n                \"-\",\n                {\"min_factor\": 0.5, \"max_factor\": 1.5},\n            ),\n            # Bottle parameters\n            \"bottle_volume\": (\n                \"V_bottle\",\n                \"Bottle Volume\",\n                \"m\u00b3\",\n                {\"min_factor\": 0.5, \"max_factor\": 2.0},\n            ),\n            # Mass parameters\n            \"empty_mass\": (\n                \"m_empty\",\n                \"Empty Mass\",\n                \"kg\",\n                {\"min_factor\": 0.5, \"max_factor\": 2.0},\n            ),\n            # Aerodynamic parameters\n            \"drag_coefficient\": (\n                \"C_drag\",\n                \"Drag Coefficient\",\n                \"-\",\n                {\"min_factor\": 0.3, \"max_factor\": 3.0},\n            ),\n            \"reference_area\": (\n                \"A_rocket\",\n                \"Reference Area\",\n                \"m\u00b2\",\n                {\"min_factor\": 0.5, \"max_factor\": 2.0},\n            ),\n            \"rocket_diameter\": (\n                \"A_rocket\",\n                \"Rocket Diameter\",\n                \"m\",\n                {\n                    \"min_factor\": 0.7,\n                    \"max_factor\": 1.5,\n                    \"convert_func\": self._diameter_to_area,\n                },\n            ),\n            # Liquid gas\n            \"liquid_gas_mass\": (\n                \"liquid_gas_mass\",\n                \"Liquid Gas Mass\",\n                \"kg\",\n                {\"min_factor\": 0.0, \"max_factor\": 10.0},\n            ),\n        }\n\n    def _diameter_to_area(self, diameter: float) -&gt; float:\n        \"\"\"Convert diameter to circular area.\"\"\"\n        return np.pi * (diameter / 2) ** 2\n\n    def _update_parameter(\n        self, params: Dict[str, Any], explorer_param_name: str, value: float\n    ):\n        \"\"\"Generic parameter updater using the parameter mappings.\"\"\"\n        if explorer_param_name not in self.parameter_mappings:\n            raise ValueError(f\"Unknown parameter: {explorer_param_name}\")\n\n        mapping = self.parameter_mappings[explorer_param_name]\n        sim_param_key = mapping[0]\n\n        # Apply conversion function if specified\n        if len(mapping) &gt; 4 and \"convert_func\" in mapping[4]:\n            convert_func = mapping[4][\"convert_func\"]\n            converted_value = convert_func(value)\n        else:\n            converted_value = value\n\n        # Apply parameter-specific constraints\n        if explorer_param_name == \"water_fraction\":\n            converted_value = np.clip(converted_value, 0.01, 0.99)\n        elif \"area\" in explorer_param_name.lower():\n            converted_value = max(\n                converted_value, 1e-6\n            )  # Prevent zero/negative areas\n        elif \"mass\" in explorer_param_name.lower():\n            converted_value = max(\n                converted_value, 0.0\n            )  # Prevent negative mass\n        elif \"pressure\" in explorer_param_name.lower():\n            converted_value = max(\n                converted_value, ATMOSPHERIC_PRESSURE\n            )  # Minimum atmospheric pressure\n\n        # Debug output\n        old_value = params.get(sim_param_key, \"NOT FOUND\")\n        if(self.verbose):\n            print(f\"Debug - Updating {explorer_param_name} -&gt; {sim_param_key}\")\n            print(f\"Debug - Old value: {old_value}\")\n            print(f\"Debug - New value: {converted_value}\") \n\n\n        params[sim_param_key] = converted_value\n\n    def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n        \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n        # Convert rocket to simulation parameters to get the base values\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        base_params = {}\n\n        print(\"Debug - Available simulation parameters:\")\n        for key, value in sim_params.items():\n            print(f\"  {key}: {value}\")\n\n        # Extract parameters based on our mappings\n        for (\n            explorer_param_name,\n            mapping_info,\n        ) in self.parameter_mappings.items():\n            sim_param_key = mapping_info[0]\n\n            if sim_param_key in sim_params:\n                value = sim_params[sim_param_key]\n\n                # Convert area back to diameter if needed\n                if (\n                    \"diameter\" in explorer_param_name\n                    and \"area\" in sim_param_key.lower()\n                ):\n                    # Convert area to diameter: A = \u03c0(d/2)\u00b2, so d = 2\u221a(A/\u03c0)\n                    value = 2 * np.sqrt(value / np.pi)\n\n                base_params[explorer_param_name] = value\n\n        print(\"\\nDebug - Extracted base parameters:\")\n        for key, value in base_params.items():\n            print(f\"  {key}: {value}\")\n\n        return base_params\n\n    def create_parameter_configs(\n        self,\n        base_params: Dict[str, float],\n        parameter_names: List[str],\n        custom_ranges: Dict[str, Dict] = None,\n    ) -&gt; Dict[str, ParameterConfig]:\n        \"\"\"Create parameter configurations for exploration.\"\"\"\n        configs = {}\n\n        for param_name in parameter_names:\n            if param_name not in base_params:\n                raise ValueError(\n                    f\"Parameter '{param_name}' not found in base parameters. Available: {list(base_params.keys())}\"\n                )\n\n            if param_name not in self.parameter_mappings:\n                raise ValueError(\n                    f\"Parameter '{param_name}' not defined in parameter mappings. Available: {list(self.parameter_mappings.keys())}\"\n                )\n\n            # Get mapping info\n            mapping = self.parameter_mappings[param_name]\n            sim_param_key, display_name, unit = mapping[:3]\n            default_range = mapping[4] if len(mapping) &gt; 4 else {}\n\n            # Apply custom ranges if provided\n            if custom_ranges and param_name in custom_ranges:\n                range_config = {**default_range, **custom_ranges[param_name]}\n            else:\n                range_config = default_range\n\n            configs[param_name] = ParameterConfig(\n                name=param_name,\n                base_value=base_params[param_name],\n                unit=unit,\n                **{\n                    k: v\n                    for k, v in range_config.items()\n                    if k != \"convert_func\"\n                },\n            )\n\n        return configs\n\n    def simulate_single_point(\n        self,\n        base_rocket,\n        param_values: Dict[str, float],\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; Optional[Any]:\n        \"\"\"Simulate a single parameter point.\"\"\"\n        try:\n            # Create a copy of the base rocket parameters\n            builder = RocketBuilder.from_dict(base_rocket.__dict__)\n            sim_params = builder.to_simulation_params()\n            if(self.verbose):\n                print(f\"Debug - Simulating with param_values: {param_values}\")\n                print(\n                    f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n                )\n\n            # Update parameters using the generic updater\n            for param_name, value in param_values.items():\n                self._update_parameter(sim_params, param_name, value)\n            if(self.verbose):\n                print(\n                    f\"Debug - Updated sim_params keys: {list(sim_params.keys())}\"\n                )\n\n            # Default simulation settings\n            if sim_settings is None:\n                sim_settings = {\n                    \"max_time\": 15.0,\n                    \"time_step\": 0.01,\n                    \"solver\": \"RK45\",\n                }\n\n            # Run simulation\n            flight_data = self.simulator.simulate(sim_params, sim_settings)\n            return flight_data\n\n        except Exception as e:\n            warnings.warn(\n                f\"Simulation failed for parameters {param_values}: {e}\"\n            )\n            print(f\"Debug - Exception details: {type(e).__name__}: {e}\")\n            import traceback\n\n            traceback.print_exc()\n            return None\n\n    def explore_single_parameter(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; ExplorationResult:\n        \"\"\"Explore a single parameter.\"\"\"\n        print(f\"Exploring parameter: {param_config.name}\")\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        # Explore parameter range\n        target_values = []\n        valid_param_values = []\n\n        for param_value in param_config.values:\n            flight_data = self.simulate_single_point(\n                base_rocket, {param_config.name: param_value}, sim_settings\n            )\n\n            if flight_data is not None:\n                target_values.append(getattr(flight_data, target_attr))\n                valid_param_values.append(param_value)\n            else:\n                target_values.append(np.nan)\n                valid_param_values.append(param_value)\n\n        # Calculate sensitivity (numerical derivative at base value)\n        sensitivity = self._calculate_sensitivity(\n            base_rocket, param_config, target, base_target_value, sim_settings\n        )\n\n        return ExplorationResult(\n            parameter_names=[param_config.name],\n            parameter_values={param_config.name: np.array(valid_param_values)},\n            target_values=np.array(target_values),\n            target_name=target_display,\n            target_unit=target_unit,\n            base_target_value=base_target_value,\n            sensitivity_analysis={param_config.name: sensitivity},\n        )\n\n    def explore_multiple_parameters(\n        self,\n        base_rocket,\n        param_configs: Dict[str, ParameterConfig],\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n        use_parallel: bool = True,\n    ) -&gt; List[ExplorationResult]:\n        \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n        print(\n            f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n        )\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        results = []\n        param_names = list(param_configs.keys())\n\n        # Generate all pairwise combinations\n        for param1_name, param2_name in combinations(param_names, 2):\n            print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n            param1_config = param_configs[param1_name]\n            param2_config = param_configs[param2_name]\n\n            # Create parameter grids\n            p1_values = param1_config.values\n            p2_values = param2_config.values\n            P1, P2 = np.meshgrid(p1_values, p2_values)\n\n            target_grid = np.full_like(P1, np.nan)\n\n            # Simulate all combinations\n            total_sims = P1.size\n            completed_sims = 0\n\n            for i in range(P1.shape[0]):\n                for j in range(P1.shape[1]):\n                    param_values = {\n                        param1_name: P1[i, j],\n                        param2_name: P2[i, j],\n                    }\n\n                    flight_data = self.simulate_single_point(\n                        base_rocket, param_values, sim_settings\n                    )\n\n                    if flight_data is not None:\n                        target_grid[i, j] = getattr(flight_data, target_attr)\n\n                    completed_sims += 1\n                    if completed_sims % 10 == 0:\n                        print(\n                            f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                        )\n\n            # Calculate sensitivities for both parameters\n            sensitivity1 = self._calculate_sensitivity(\n                base_rocket,\n                param1_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n            sensitivity2 = self._calculate_sensitivity(\n                base_rocket,\n                param2_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n\n            results.append(\n                ExplorationResult(\n                    parameter_names=[param1_name, param2_name],\n                    parameter_values={\n                        param1_name: p1_values,\n                        param2_name: p2_values,\n                    },\n                    target_values=target_grid,\n                    target_name=target_display,\n                    target_unit=target_unit,\n                    base_target_value=base_target_value,\n                    sensitivity_analysis={\n                        param1_name: sensitivity1,\n                        param2_name: sensitivity2,\n                    },\n                )\n            )\n\n        return results\n\n    def _calculate_sensitivity(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str,\n        base_target_value: float,\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; float:\n        \"\"\"Calculate sensitivity (numerical derivative) of target with respect to parameter.\"\"\"\n        target_attr, _, _ = self.target_extractors[target]\n\n        # Small perturbation (1% of base value)\n        delta = param_config.base_value * 0.01\n\n        # Simulate with positive perturbation\n        plus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value + delta},\n            sim_settings,\n        )\n\n        # Simulate with negative perturbation\n        minus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value - delta},\n            sim_settings,\n        )\n\n        if plus_flight_data is not None and minus_flight_data is not None:\n            plus_value = getattr(plus_flight_data, target_attr)\n            minus_value = getattr(minus_flight_data, target_attr)\n\n            # Central difference\n            sensitivity = (plus_value - minus_value) / (2 * delta)\n        else:\n            # Fallback to one-sided difference\n            if plus_flight_data is not None:\n                plus_value = getattr(plus_flight_data, target_attr)\n                sensitivity = (plus_value - base_target_value) / delta\n            elif minus_flight_data is not None:\n                minus_value = getattr(minus_flight_data, target_attr)\n                sensitivity = (base_target_value - minus_value) / delta\n            else:\n                sensitivity = 0.0\n\n        return sensitivity\n\n    def plot_results(\n        self, results: List[ExplorationResult], save_plots: bool = False\n    ):\n        \"\"\"Create plots for exploration results.\"\"\"\n\n        for i, result in enumerate(results):\n            if len(result.parameter_names) == 1:\n                self._plot_single_parameter(result, save_plots, i)\n            elif len(result.parameter_names) == 2:\n                self._plot_two_parameters(result, save_plots, i)\n\n    def _plot_single_parameter(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for single parameter exploration.\"\"\"\n        param_name = result.parameter_names[0]\n        param_values = result.parameter_values[param_name]\n\n        plt.figure(figsize=(10, 6))\n\n        # Remove NaN values for plotting\n        mask = ~np.isnan(result.target_values)\n        x_vals = param_values[mask]\n        y_vals = result.target_values[mask]\n\n        plt.plot(x_vals, y_vals, \"o-\", linewidth=2, markersize=6)\n        plt.axhline(\n            y=result.base_target_value,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Base Value\",\n        )\n\n        plt.xlabel(f'{param_name.replace(\"_\", \" \").title()}')\n        plt.ylabel(f\"{result.target_name} ({result.target_unit})\")\n        plt.title(\n            f'{result.target_name} vs {param_name.replace(\"_\", \" \").title()}'\n        )\n        plt.grid(True, alpha=0.3)\n        plt.legend()\n\n        # Add sensitivity annotation\n        sensitivity = result.sensitivity_analysis[param_name]\n        plt.text(\n            0.05,\n            0.95,\n            f\"Sensitivity: {sensitivity:.2e} {result.target_unit}/unit\",\n            transform=plt.gca().transAxes,\n            verticalalignment=\"top\",\n            bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.8),\n        )\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def _plot_two_parameters(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for two parameter exploration.\"\"\"\n        param1_name, param2_name = result.parameter_names\n        param1_values = result.parameter_values[param1_name]\n        param2_values = result.parameter_values[param2_name]\n\n        # Create 2D contour plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n\n        # Contour plot\n        P1, P2 = np.meshgrid(param1_values, param2_values)\n        contour = ax1.contour(\n            P1,\n            P2,\n            result.target_values,\n            levels=15,\n            colors=\"black\",\n            alpha=0.5,\n            linewidths=0.5,\n        )\n        contourf = ax1.contourf(\n            P1, P2, result.target_values, levels=20, cmap=\"viridis\", alpha=0.8\n        )\n        ax1.clabel(contour, inline=True, fontsize=8)\n\n        cbar1 = plt.colorbar(contourf, ax=ax1)\n        cbar1.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        ax1.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax1.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax1.set_title(f\"{result.target_name} Contour Map\")\n        ax1.grid(True, alpha=0.3)\n\n        # 3D surface plot\n        from mpl_toolkits.mplot3d import Axes3D\n\n        ax2 = fig.add_subplot(122, projection=\"3d\")\n\n        surface = ax2.plot_surface(\n            P1, P2, result.target_values, cmap=\"viridis\", alpha=0.8\n        )\n        ax2.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax2.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax2.set_zlabel(f\"{result.target_name} ({result.target_unit})\")\n        ax2.set_title(f\"{result.target_name} Surface\")\n\n        cbar2 = plt.colorbar(surface, ax=ax2, shrink=0.5)\n        cbar2.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param1_name}_{param2_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def get_available_parameters(self) -&gt; Dict[str, str]:\n        \"\"\"Get list of available parameters and their descriptions.\"\"\"\n        available = {}\n        for param_name, mapping in self.parameter_mappings.items():\n            sim_param_key, display_name, unit = mapping[:3]\n            available[param_name] = (\n                f\"{display_name} ({unit}) -&gt; {sim_param_key}\"\n            )\n        return available\n\n    def add_parameter_mapping(\n        self,\n        explorer_name: str,\n        sim_param_key: str,\n        display_name: str,\n        unit: str,\n        range_config: Dict = None,\n        convert_func: Callable = None,\n    ):\n        \"\"\"Add a new parameter mapping for exploration.\n\n        Args:\n            explorer_name: Name used in the explorer (e.g., 'nozzle_diameter')\n            sim_param_key: Key in simulation parameters (e.g., 'A_nozzle')\n            display_name: Human-readable name for plots\n            unit: Unit for display\n            range_config: Dictionary with 'min_factor', 'max_factor', etc.\n            convert_func: Optional function to convert explorer value to sim value\n        \"\"\"\n        mapping = [sim_param_key, display_name, unit]\n        if range_config or convert_func:\n            config = range_config or {}\n            if convert_func:\n                config[\"convert_func\"] = convert_func\n            mapping.append(config)\n\n        self.parameter_mappings[explorer_name] = tuple(mapping)\n\n\n\n\n    def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n        \"\"\"Print sensitivity analysis results.\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"SENSITIVITY ANALYSIS\")\n        print(\"=\" * 60)\n\n        all_sensitivities = {}\n\n        for result in results:\n            for param_name, sensitivity in result.sensitivity_analysis.items():\n                if param_name not in all_sensitivities:\n                    all_sensitivities[param_name] = []\n                all_sensitivities[param_name].append(abs(sensitivity))\n\n        # Average sensitivities and sort by magnitude\n        avg_sensitivities = {\n            name: np.mean(values) for name, values in all_sensitivities.items()\n        }\n        sorted_params = sorted(\n            avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n        )\n\n        print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            unit = results[0].target_unit\n            print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n        # Relative importance\n        max_sensitivity = (\n            max(avg_sensitivities.values()) if avg_sensitivities else 1\n        )\n\n        print(\n            f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n        )\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            relative = avg_sensitivity / max_sensitivity * 100\n            print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.add_parameter_mapping","title":"<code>add_parameter_mapping(self, explorer_name, sim_param_key, display_name, unit, range_config=None, convert_func=None)</code>","text":"<p>Add a new parameter mapping for exploration.</p> <p>Parameters:</p> Name Type Description Default <code>explorer_name</code> <code>str</code> <p>Name used in the explorer (e.g., 'nozzle_diameter')</p> required <code>sim_param_key</code> <code>str</code> <p>Key in simulation parameters (e.g., 'A_nozzle')</p> required <code>display_name</code> <code>str</code> <p>Human-readable name for plots</p> required <code>unit</code> <code>str</code> <p>Unit for display</p> required <code>range_config</code> <code>Dict</code> <p>Dictionary with 'min_factor', 'max_factor', etc.</p> <code>None</code> <code>convert_func</code> <code>Callable</code> <p>Optional function to convert explorer value to sim value</p> <code>None</code> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def add_parameter_mapping(\n    self,\n    explorer_name: str,\n    sim_param_key: str,\n    display_name: str,\n    unit: str,\n    range_config: Dict = None,\n    convert_func: Callable = None,\n):\n    \"\"\"Add a new parameter mapping for exploration.\n\n    Args:\n        explorer_name: Name used in the explorer (e.g., 'nozzle_diameter')\n        sim_param_key: Key in simulation parameters (e.g., 'A_nozzle')\n        display_name: Human-readable name for plots\n        unit: Unit for display\n        range_config: Dictionary with 'min_factor', 'max_factor', etc.\n        convert_func: Optional function to convert explorer value to sim value\n    \"\"\"\n    mapping = [sim_param_key, display_name, unit]\n    if range_config or convert_func:\n        config = range_config or {}\n        if convert_func:\n            config[\"convert_func\"] = convert_func\n        mapping.append(config)\n\n    self.parameter_mappings[explorer_name] = tuple(mapping)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.create_parameter_configs","title":"<code>create_parameter_configs(self, base_params, parameter_names, custom_ranges=None)</code>","text":"<p>Create parameter configurations for exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def create_parameter_configs(\n    self,\n    base_params: Dict[str, float],\n    parameter_names: List[str],\n    custom_ranges: Dict[str, Dict] = None,\n) -&gt; Dict[str, ParameterConfig]:\n    \"\"\"Create parameter configurations for exploration.\"\"\"\n    configs = {}\n\n    for param_name in parameter_names:\n        if param_name not in base_params:\n            raise ValueError(\n                f\"Parameter '{param_name}' not found in base parameters. Available: {list(base_params.keys())}\"\n            )\n\n        if param_name not in self.parameter_mappings:\n            raise ValueError(\n                f\"Parameter '{param_name}' not defined in parameter mappings. Available: {list(self.parameter_mappings.keys())}\"\n            )\n\n        # Get mapping info\n        mapping = self.parameter_mappings[param_name]\n        sim_param_key, display_name, unit = mapping[:3]\n        default_range = mapping[4] if len(mapping) &gt; 4 else {}\n\n        # Apply custom ranges if provided\n        if custom_ranges and param_name in custom_ranges:\n            range_config = {**default_range, **custom_ranges[param_name]}\n        else:\n            range_config = default_range\n\n        configs[param_name] = ParameterConfig(\n            name=param_name,\n            base_value=base_params[param_name],\n            unit=unit,\n            **{\n                k: v\n                for k, v in range_config.items()\n                if k != \"convert_func\"\n            },\n        )\n\n    return configs\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.explore_multiple_parameters","title":"<code>explore_multiple_parameters(self, base_rocket, param_configs, target='apogee', sim_settings=None, use_parallel=True)</code>","text":"<p>Explore multiple parameters with pairwise combinations.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def explore_multiple_parameters(\n    self,\n    base_rocket,\n    param_configs: Dict[str, ParameterConfig],\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n    use_parallel: bool = True,\n) -&gt; List[ExplorationResult]:\n    \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n    print(\n        f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n    )\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    results = []\n    param_names = list(param_configs.keys())\n\n    # Generate all pairwise combinations\n    for param1_name, param2_name in combinations(param_names, 2):\n        print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n        param1_config = param_configs[param1_name]\n        param2_config = param_configs[param2_name]\n\n        # Create parameter grids\n        p1_values = param1_config.values\n        p2_values = param2_config.values\n        P1, P2 = np.meshgrid(p1_values, p2_values)\n\n        target_grid = np.full_like(P1, np.nan)\n\n        # Simulate all combinations\n        total_sims = P1.size\n        completed_sims = 0\n\n        for i in range(P1.shape[0]):\n            for j in range(P1.shape[1]):\n                param_values = {\n                    param1_name: P1[i, j],\n                    param2_name: P2[i, j],\n                }\n\n                flight_data = self.simulate_single_point(\n                    base_rocket, param_values, sim_settings\n                )\n\n                if flight_data is not None:\n                    target_grid[i, j] = getattr(flight_data, target_attr)\n\n                completed_sims += 1\n                if completed_sims % 10 == 0:\n                    print(\n                        f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                    )\n\n        # Calculate sensitivities for both parameters\n        sensitivity1 = self._calculate_sensitivity(\n            base_rocket,\n            param1_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n        sensitivity2 = self._calculate_sensitivity(\n            base_rocket,\n            param2_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n\n        results.append(\n            ExplorationResult(\n                parameter_names=[param1_name, param2_name],\n                parameter_values={\n                    param1_name: p1_values,\n                    param2_name: p2_values,\n                },\n                target_values=target_grid,\n                target_name=target_display,\n                target_unit=target_unit,\n                base_target_value=base_target_value,\n                sensitivity_analysis={\n                    param1_name: sensitivity1,\n                    param2_name: sensitivity2,\n                },\n            )\n        )\n\n    return results\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.explore_single_parameter","title":"<code>explore_single_parameter(self, base_rocket, param_config, target='apogee', sim_settings=None)</code>","text":"<p>Explore a single parameter.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def explore_single_parameter(\n    self,\n    base_rocket,\n    param_config: ParameterConfig,\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n) -&gt; ExplorationResult:\n    \"\"\"Explore a single parameter.\"\"\"\n    print(f\"Exploring parameter: {param_config.name}\")\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    # Explore parameter range\n    target_values = []\n    valid_param_values = []\n\n    for param_value in param_config.values:\n        flight_data = self.simulate_single_point(\n            base_rocket, {param_config.name: param_value}, sim_settings\n        )\n\n        if flight_data is not None:\n            target_values.append(getattr(flight_data, target_attr))\n            valid_param_values.append(param_value)\n        else:\n            target_values.append(np.nan)\n            valid_param_values.append(param_value)\n\n    # Calculate sensitivity (numerical derivative at base value)\n    sensitivity = self._calculate_sensitivity(\n        base_rocket, param_config, target, base_target_value, sim_settings\n    )\n\n    return ExplorationResult(\n        parameter_names=[param_config.name],\n        parameter_values={param_config.name: np.array(valid_param_values)},\n        target_values=np.array(target_values),\n        target_name=target_display,\n        target_unit=target_unit,\n        base_target_value=base_target_value,\n        sensitivity_analysis={param_config.name: sensitivity},\n    )\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.extract_base_parameters","title":"<code>extract_base_parameters(self, rocket)</code>","text":"<p>Extract base parameter values from a rocket configuration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n    \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n    # Convert rocket to simulation parameters to get the base values\n    builder = RocketBuilder.from_dict(rocket.__dict__)\n    sim_params = builder.to_simulation_params()\n\n    base_params = {}\n\n    print(\"Debug - Available simulation parameters:\")\n    for key, value in sim_params.items():\n        print(f\"  {key}: {value}\")\n\n    # Extract parameters based on our mappings\n    for (\n        explorer_param_name,\n        mapping_info,\n    ) in self.parameter_mappings.items():\n        sim_param_key = mapping_info[0]\n\n        if sim_param_key in sim_params:\n            value = sim_params[sim_param_key]\n\n            # Convert area back to diameter if needed\n            if (\n                \"diameter\" in explorer_param_name\n                and \"area\" in sim_param_key.lower()\n            ):\n                # Convert area to diameter: A = \u03c0(d/2)\u00b2, so d = 2\u221a(A/\u03c0)\n                value = 2 * np.sqrt(value / np.pi)\n\n            base_params[explorer_param_name] = value\n\n    print(\"\\nDebug - Extracted base parameters:\")\n    for key, value in base_params.items():\n        print(f\"  {key}: {value}\")\n\n    return base_params\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.get_available_parameters","title":"<code>get_available_parameters(self)</code>","text":"<p>Get list of available parameters and their descriptions.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def get_available_parameters(self) -&gt; Dict[str, str]:\n    \"\"\"Get list of available parameters and their descriptions.\"\"\"\n    available = {}\n    for param_name, mapping in self.parameter_mappings.items():\n        sim_param_key, display_name, unit = mapping[:3]\n        available[param_name] = (\n            f\"{display_name} ({unit}) -&gt; {sim_param_key}\"\n        )\n    return available\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.plot_results","title":"<code>plot_results(self, results, save_plots=False)</code>","text":"<p>Create plots for exploration results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def plot_results(\n    self, results: List[ExplorationResult], save_plots: bool = False\n):\n    \"\"\"Create plots for exploration results.\"\"\"\n\n    for i, result in enumerate(results):\n        if len(result.parameter_names) == 1:\n            self._plot_single_parameter(result, save_plots, i)\n        elif len(result.parameter_names) == 2:\n            self._plot_two_parameters(result, save_plots, i)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.print_sensitivity_analysis","title":"<code>print_sensitivity_analysis(self, results)</code>","text":"<p>Print sensitivity analysis results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n    \"\"\"Print sensitivity analysis results.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"SENSITIVITY ANALYSIS\")\n    print(\"=\" * 60)\n\n    all_sensitivities = {}\n\n    for result in results:\n        for param_name, sensitivity in result.sensitivity_analysis.items():\n            if param_name not in all_sensitivities:\n                all_sensitivities[param_name] = []\n            all_sensitivities[param_name].append(abs(sensitivity))\n\n    # Average sensitivities and sort by magnitude\n    avg_sensitivities = {\n        name: np.mean(values) for name, values in all_sensitivities.items()\n    }\n    sorted_params = sorted(\n        avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n    )\n\n    print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        unit = results[0].target_unit\n        print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n    # Relative importance\n    max_sensitivity = (\n        max(avg_sensitivities.values()) if avg_sensitivities else 1\n    )\n\n    print(\n        f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n    )\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        relative = avg_sensitivity / max_sensitivity * 100\n        print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.ParameterExplorer.simulate_single_point","title":"<code>simulate_single_point(self, base_rocket, param_values, sim_settings=None)</code>","text":"<p>Simulate a single parameter point.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def simulate_single_point(\n    self,\n    base_rocket,\n    param_values: Dict[str, float],\n    sim_settings: Dict[str, Any] = None,\n) -&gt; Optional[Any]:\n    \"\"\"Simulate a single parameter point.\"\"\"\n    try:\n        # Create a copy of the base rocket parameters\n        builder = RocketBuilder.from_dict(base_rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n        if(self.verbose):\n            print(f\"Debug - Simulating with param_values: {param_values}\")\n            print(\n                f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n            )\n\n        # Update parameters using the generic updater\n        for param_name, value in param_values.items():\n            self._update_parameter(sim_params, param_name, value)\n        if(self.verbose):\n            print(\n                f\"Debug - Updated sim_params keys: {list(sim_params.keys())}\"\n            )\n\n        # Default simulation settings\n        if sim_settings is None:\n            sim_settings = {\n                \"max_time\": 15.0,\n                \"time_step\": 0.01,\n                \"solver\": \"RK45\",\n            }\n\n        # Run simulation\n        flight_data = self.simulator.simulate(sim_params, sim_settings)\n        return flight_data\n\n    except Exception as e:\n        warnings.warn(\n            f\"Simulation failed for parameters {param_values}: {e}\"\n        )\n        print(f\"Debug - Exception details: {type(e).__name__}: {e}\")\n        import traceback\n\n        traceback.print_exc()\n        return None\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer/#waterrocketpy.visualization.parameter_explorer.main","title":"<code>main()</code>","text":"<p>Example usage of the parameter explorer.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer.py</code> <pre><code>def main():\n    \"\"\"Example usage of the parameter explorer.\"\"\"\n\n    print(\"=== Water Rocket Parameter Explorer ===\\n\")\n\n    # Create base rocket configuration\n    print(\"1. Creating base rocket configuration...\")\n    base_rocket = create_standard_rocket()\n    print(f\"   Base rocket: {base_rocket.name}\")\n\n    # Initialize explorer\n    explorer = ParameterExplorer()\n\n    # Extract base parameters\n    base_params = explorer.extract_base_parameters(base_rocket)\n    print(\"\\n2. Base parameters:\")\n    for name, value in base_params.items():\n        print(f\"   {name}: {value}\")\n\n    # Define parameters to explore - now using correct parameter names\n    parameters_to_explore = [\n        \"initial_pressure\",\n        \"water_fraction\",\n        \"nozzle_diameter\",\n    ]\n    target_metric = \"apogee\"\n\n    print(f\"\\n3. Available parameters:\")\n    available_params = explorer.get_available_parameters()\n    for name, description in available_params.items():\n        print(f\"   {name}: {description}\")\n\n    print(f\"\\n4. Exploring parameters: {parameters_to_explore}\")\n    print(f\"   Target metric: {target_metric}\")\n\n    # Create parameter configurations\n    param_configs = explorer.create_parameter_configs(\n        base_params,\n        parameters_to_explore,\n        custom_ranges={\n            \"initial_pressure\": {\n                \"min_factor\": 0.4,\n                \"max_factor\": 2.5,\n                \"num_points\": 8,\n            },\n            \"water_fraction\": {\n                \"min_factor\": 0.5,\n                \"max_factor\": 1.8,\n                \"num_points\": 8,\n            },\n            \"nozzle_diameter\": {\n                \"min_factor\": 0.6,\n                \"max_factor\": 2.0,\n                \"num_points\": 8,\n            },\n        },\n    )\n\n    # Run exploration\n    print(\"\\n5. Running parameter exploration...\")\n    results = explorer.explore_multiple_parameters(\n        base_rocket,\n        param_configs,\n        target=target_metric,\n        sim_settings={\"max_time\": 20.0, \"time_step\": 0.01},\n    )\n\n    # Display results\n    print(f\"\\n6. Generated {len(results)} result sets\")\n\n    # Create plots\n    print(\"\\n7. Creating plots...\")\n    explorer.plot_results(results)\n\n    # Print sensitivity analysis\n    explorer.print_sensitivity_analysis(results)\n\n    print(\"\\nExploration complete!\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/","title":"waterrocketpy.visualization.parameter_explorer_debugging","text":"<p>Water Rocket Parameter Exploration Tool</p> <p>This script provides comprehensive parameter exploration capabilities for water rocket simulations. Features: - Parameter sweeping with configurable ranges - Multi-parameter analysis with 2D plotting - Sensitivity analysis (derivatives) - Extensible design for adding new parameters and targets - Robust error handling and progress tracking</p>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ExplorationResult","title":"<code> ExplorationResult        </code>  <code>dataclass</code>","text":"<p>Results from parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>@dataclass\nclass ExplorationResult:\n    \"\"\"Results from parameter exploration.\"\"\"\n\n    parameter_names: List[str]\n    parameter_values: Dict[str, np.ndarray]\n    target_values: np.ndarray\n    target_name: str\n    target_unit: str\n    base_target_value: float\n    sensitivity_analysis: Dict[str, float]\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterConfig","title":"<code> ParameterConfig        </code>  <code>dataclass</code>","text":"<p>Configuration for a parameter to explore.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>@dataclass\nclass ParameterConfig:\n    \"\"\"Configuration for a parameter to explore.\"\"\"\n\n    name: str\n    base_value: float\n    min_factor: float = 0.5  # minimum as factor of base value\n    max_factor: float = 2.0  # maximum as factor of base value\n    num_points: int = 10  # number of points to sample\n    unit: str = \"\"  # unit for display\n\n    @property\n    def min_value(self) -&gt; float:\n        return self.base_value * self.min_factor\n\n    @property\n    def max_value(self) -&gt; float:\n        return self.base_value * self.max_factor\n\n    @property\n    def values(self) -&gt; np.ndarray:\n        return np.linspace(self.min_value, self.max_value, self.num_points)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer","title":"<code> ParameterExplorer        </code>","text":"<p>Main class for water rocket parameter exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>class ParameterExplorer:\n    \"\"\"Main class for water rocket parameter exploration.\"\"\"\n\n    def __init__(self):\n        self.simulator = WaterRocketSimulator()\n\n        # Define available target extractors\n        self.target_extractors = {\n            \"apogee\": (\"max_altitude\", \"m\", \"Maximum Altitude\"),\n            \"max_velocity\": (\"max_velocity\", \"m/s\", \"Maximum Velocity\"),\n            \"flight_time\": (\"flight_time\", \"s\", \"Flight Time\"),\n            \"water_depletion_time\": (\n                \"water_depletion_time\",\n                \"s\",\n                \"Water Depletion Time\",\n            ),\n            \"air_depletion_time\": (\n                \"air_depletion_time\",\n                \"s\",\n                \"Air Depletion Time\",\n            ),\n        }\n\n        # Define parameter updaters - functions that modify rocket_params\n        self.parameter_updaters = {\n            \"pressure\": self._update_pressure,\n            \"water_fraction\": self._update_water_fraction,\n            \"nozzle_diameter\": self._update_nozzle_diameter,\n            \"bottle_volume\": self._update_bottle_volume,\n            \"bottle_diameter\": self._update_bottle_diameter,\n            \"empty_mass\": self._update_empty_mass,\n            \"drag_coefficient\": self._update_drag_coefficient,\n        }\n\n        # Map parameter names to simulation parameter names\n        self.param_to_sim_mapping = {\n            \"pressure\": \"initial_pressure\",\n            \"water_fraction\": \"water_fraction\",\n            \"nozzle_diameter\": \"nozzle_diameter\",\n            \"bottle_volume\": \"bottle_volume\",\n            \"bottle_diameter\": \"bottle_diameter\",\n            \"empty_mass\": \"empty_mass\",\n            \"drag_coefficient\": \"drag_coefficient\",\n        }\n\n    def _get_sim_param_name(self, param_name: str) -&gt; str:\n        \"\"\"Get the simulation parameter name for a given parameter.\"\"\"\n        return self.param_to_sim_mapping.get(param_name, param_name)\n\n    def _update_pressure(self, params: Dict, value: float):\n        \"\"\"Update initial pressure.\"\"\"\n        params[\"initial_pressure\"] = value\n\n    def _update_water_fraction(self, params: Dict, value: float):\n        \"\"\"Update water fraction.\"\"\"\n        params[\"water_fraction\"] = np.clip(\n            value, 0.01, 0.99\n        )  # Keep reasonable bounds\n\n    def _update_nozzle_diameter(self, params: Dict, value: float):\n        \"\"\"Update nozzle diameter.\"\"\"\n        params[\"nozzle_diameter\"] = value\n\n    def _update_bottle_volume(self, params: Dict, value: float):\n        \"\"\"Update bottle volume.\"\"\"\n        params[\"bottle_volume\"] = value\n\n    def _update_bottle_diameter(self, params: Dict, value: float):\n        \"\"\"Update bottle diameter.\"\"\"\n        params[\"bottle_diameter\"] = value\n\n    def _update_empty_mass(self, params: Dict, value: float):\n        \"\"\"Update empty mass.\"\"\"\n        params[\"empty_mass\"] = value\n\n    def _update_drag_coefficient(self, params: Dict, value: float):\n        \"\"\"Update drag coefficient.\"\"\"\n        params[\"drag_coefficient\"] = value\n\n    def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n        \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n        # Convert rocket to simulation parameters to get the base values\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        print(\"Debug - Available simulation parameters:\")\n        for key, value in sim_params.items():\n            print(f\"  {key}: {value}\")\n\n        base_params = {}\n\n        # Map simulation parameters to our parameter names\n        param_mapping = {\n            \"pressure\": \"initial_pressure\",\n            \"water_fraction\": \"water_fraction\",\n            \"nozzle_diameter\": \"nozzle_diameter\",\n            \"bottle_volume\": \"bottle_volume\",\n            \"bottle_diameter\": \"bottle_diameter\",\n            \"empty_mass\": \"empty_mass\",\n            \"drag_coefficient\": \"drag_coefficient\",\n        }\n\n        for param_name, sim_param_name in param_mapping.items():\n            if sim_param_name in sim_params:\n                base_params[param_name] = sim_params[sim_param_name]\n                print(f\"  Found {param_name} = {sim_params[sim_param_name]}\")\n            else:\n                # Provide reasonable defaults for missing parameters\n                defaults = {\n                    \"pressure\": 8 * ATMOSPHERIC_PRESSURE,\n                    \"water_fraction\": 0.33,\n                    \"nozzle_diameter\": 0.015,\n                    \"bottle_volume\": 0.002,\n                    \"bottle_diameter\": 0.1,\n                    \"empty_mass\": 0.25,\n                    \"drag_coefficient\": 0.5,\n                }\n                base_params[param_name] = defaults.get(param_name, 1.0)\n                print(\n                    f\"  Using default for {param_name} = {base_params[param_name]}\"\n                )\n\n        return base_params\n\n    def create_parameter_configs(\n        self,\n        base_params: Dict[str, float],\n        parameter_names: List[str],\n        custom_ranges: Dict[str, Dict] = None,\n    ) -&gt; Dict[str, ParameterConfig]:\n        \"\"\"Create parameter configurations for exploration.\"\"\"\n        configs = {}\n\n        # Default units and ranges\n        param_defaults = {\n            \"pressure\": {\"unit\": \"Pa\", \"min_factor\": 0.3, \"max_factor\": 3.0},\n            \"water_fraction\": {\n                \"unit\": \"-\",\n                \"min_factor\": 0.3,\n                \"max_factor\": 3.0,\n            },\n            \"nozzle_diameter\": {\n                \"unit\": \"m\",\n                \"min_factor\": 0.5,\n                \"max_factor\": 2.5,\n            },\n            \"bottle_volume\": {\n                \"unit\": \"m\u00b3\",\n                \"min_factor\": 0.5,\n                \"max_factor\": 2.0,\n            },\n            \"bottle_diameter\": {\n                \"unit\": \"m\",\n                \"min_factor\": 0.7,\n                \"max_factor\": 1.5,\n            },\n            \"empty_mass\": {\"unit\": \"kg\", \"min_factor\": 0.5, \"max_factor\": 2.0},\n            \"drag_coefficient\": {\n                \"unit\": \"-\",\n                \"min_factor\": 0.3,\n                \"max_factor\": 3.0,\n            },\n        }\n\n        for param_name in parameter_names:\n            if param_name not in base_params:\n                raise ValueError(\n                    f\"Parameter '{param_name}' not found in base parameters\"\n                )\n\n            # Get default settings\n            defaults = param_defaults.get(\n                param_name, {\"unit\": \"\", \"min_factor\": 0.5, \"max_factor\": 2.0}\n            )\n\n            # Apply custom ranges if provided\n            if custom_ranges and param_name in custom_ranges:\n                defaults.update(custom_ranges[param_name])\n\n            configs[param_name] = ParameterConfig(\n                name=param_name, base_value=base_params[param_name], **defaults\n            )\n\n        return configs\n\n    def simulate_single_point(\n        self,\n        base_rocket,\n        param_values: Dict[str, float],\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; Optional[Any]:\n        \"\"\"Simulate a single parameter point.\"\"\"\n        try:\n            # Create a copy of the base rocket parameters\n            builder = RocketBuilder.from_dict(base_rocket.__dict__)\n            sim_params = builder.to_simulation_params()\n\n            print(f\"Debug - Simulating with param_values: {param_values}\")\n            print(\n                f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n            )\n\n            # Update parameters\n            for param_name, value in param_values.items():\n                if param_name in self.parameter_updaters:\n                    print(f\"Debug - Updating {param_name} to {value}\")\n                    old_value = sim_params.get(\n                        self._get_sim_param_name(param_name), \"NOT FOUND\"\n                    )\n                    print(f\"Debug - Old value: {old_value}\")\n\n                    self.parameter_updaters[param_name](sim_params, value)\n\n                    new_value = sim_params.get(\n                        self._get_sim_param_name(param_name), \"NOT FOUND\"\n                    )\n                    print(f\"Debug - New value: {new_value}\")\n                else:\n                    print(\n                        f\"Warning: No updater found for parameter {param_name}\"\n                    )\n\n            # Default simulation settings\n            if sim_settings is None:\n                sim_settings = {\n                    \"max_time\": 15.0,\n                    \"time_step\": 0.01,\n                    \"solver\": \"RK45\",\n                }\n\n            # Run simulation\n            flight_data = self.simulator.simulate(sim_params, sim_settings)\n            return flight_data\n\n        except Exception as e:\n            print(f\"Error in simulate_single_point: {e}\")\n            import traceback\n\n            traceback.print_exc()\n            warnings.warn(\n                f\"Simulation failed for parameters {param_values}: {e}\"\n            )\n            return None\n\n    def explore_single_parameter(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; ExplorationResult:\n        \"\"\"Explore a single parameter.\"\"\"\n        print(f\"Exploring parameter: {param_config.name}\")\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        # Explore parameter range\n        target_values = []\n        valid_param_values = []\n\n        for param_value in param_config.values:\n            flight_data = self.simulate_single_point(\n                base_rocket, {param_config.name: param_value}, sim_settings\n            )\n\n            if flight_data is not None:\n                target_values.append(getattr(flight_data, target_attr))\n                valid_param_values.append(param_value)\n            else:\n                target_values.append(np.nan)\n                valid_param_values.append(param_value)\n\n        # Calculate sensitivity (numerical derivative at base value)\n        sensitivity = self._calculate_sensitivity(\n            base_rocket, param_config, target, base_target_value, sim_settings\n        )\n\n        return ExplorationResult(\n            parameter_names=[param_config.name],\n            parameter_values={param_config.name: np.array(valid_param_values)},\n            target_values=np.array(target_values),\n            target_name=target_display,\n            target_unit=target_unit,\n            base_target_value=base_target_value,\n            sensitivity_analysis={param_config.name: sensitivity},\n        )\n\n    def explore_multiple_parameters(\n        self,\n        base_rocket,\n        param_configs: Dict[str, ParameterConfig],\n        target: str = \"apogee\",\n        sim_settings: Dict[str, Any] = None,\n        use_parallel: bool = True,\n    ) -&gt; List[ExplorationResult]:\n        \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n        print(\n            f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n        )\n\n        target_attr, target_unit, target_display = self.target_extractors[\n            target\n        ]\n\n        # Get base target value\n        base_flight_data = self.simulate_single_point(\n            base_rocket, {}, sim_settings\n        )\n        if base_flight_data is None:\n            raise RuntimeError(\"Base simulation failed\")\n        base_target_value = getattr(base_flight_data, target_attr)\n\n        results = []\n        param_names = list(param_configs.keys())\n\n        # Generate all pairwise combinations\n        for param1_name, param2_name in combinations(param_names, 2):\n            print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n            param1_config = param_configs[param1_name]\n            param2_config = param_configs[param2_name]\n\n            # Create parameter grids\n            p1_values = param1_config.values\n            p2_values = param2_config.values\n            P1, P2 = np.meshgrid(p1_values, p2_values)\n\n            target_grid = np.full_like(P1, np.nan)\n\n            # Simulate all combinations\n            total_sims = P1.size\n            completed_sims = 0\n\n            for i in range(P1.shape[0]):\n                for j in range(P1.shape[1]):\n                    param_values = {\n                        param1_name: P1[i, j],\n                        param2_name: P2[i, j],\n                    }\n\n                    flight_data = self.simulate_single_point(\n                        base_rocket, param_values, sim_settings\n                    )\n\n                    if flight_data is not None:\n                        target_grid[i, j] = getattr(flight_data, target_attr)\n\n                    completed_sims += 1\n                    if completed_sims % 10 == 0:\n                        print(\n                            f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                        )\n\n            # Calculate sensitivities for both parameters\n            sensitivity1 = self._calculate_sensitivity(\n                base_rocket,\n                param1_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n            sensitivity2 = self._calculate_sensitivity(\n                base_rocket,\n                param2_config,\n                target,\n                base_target_value,\n                sim_settings,\n            )\n\n            results.append(\n                ExplorationResult(\n                    parameter_names=[param1_name, param2_name],\n                    parameter_values={\n                        param1_name: p1_values,\n                        param2_name: p2_values,\n                    },\n                    target_values=target_grid,\n                    target_name=target_display,\n                    target_unit=target_unit,\n                    base_target_value=base_target_value,\n                    sensitivity_analysis={\n                        param1_name: sensitivity1,\n                        param2_name: sensitivity2,\n                    },\n                )\n            )\n\n        return results\n\n    def _calculate_sensitivity(\n        self,\n        base_rocket,\n        param_config: ParameterConfig,\n        target: str,\n        base_target_value: float,\n        sim_settings: Dict[str, Any] = None,\n    ) -&gt; float:\n        \"\"\"Calculate sensitivity (numerical derivative) of target with respect to parameter.\"\"\"\n        target_attr, _, _ = self.target_extractors[target]\n\n        # Small perturbation (1% of base value)\n        delta = param_config.base_value * 0.01\n\n        # Simulate with positive perturbation\n        plus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value + delta},\n            sim_settings,\n        )\n\n        # Simulate with negative perturbation\n        minus_flight_data = self.simulate_single_point(\n            base_rocket,\n            {param_config.name: param_config.base_value - delta},\n            sim_settings,\n        )\n\n        if plus_flight_data is not None and minus_flight_data is not None:\n            plus_value = getattr(plus_flight_data, target_attr)\n            minus_value = getattr(minus_flight_data, target_attr)\n\n            # Central difference\n            sensitivity = (plus_value - minus_value) / (2 * delta)\n        else:\n            # Fallback to one-sided difference\n            if plus_flight_data is not None:\n                plus_value = getattr(plus_flight_data, target_attr)\n                sensitivity = (plus_value - base_target_value) / delta\n            elif minus_flight_data is not None:\n                minus_value = getattr(minus_flight_data, target_attr)\n                sensitivity = (base_target_value - minus_value) / delta\n            else:\n                sensitivity = 0.0\n\n        return sensitivity\n\n    def plot_results(\n        self, results: List[ExplorationResult], save_plots: bool = False\n    ):\n        \"\"\"Create plots for exploration results.\"\"\"\n\n        for i, result in enumerate(results):\n            if len(result.parameter_names) == 1:\n                self._plot_single_parameter(result, save_plots, i)\n            elif len(result.parameter_names) == 2:\n                self._plot_two_parameters(result, save_plots, i)\n\n    def _plot_single_parameter(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for single parameter exploration.\"\"\"\n        param_name = result.parameter_names[0]\n        param_values = result.parameter_values[param_name]\n\n        plt.figure(figsize=(10, 6))\n\n        # Remove NaN values for plotting\n        mask = ~np.isnan(result.target_values)\n        x_vals = param_values[mask]\n        y_vals = result.target_values[mask]\n\n        plt.plot(x_vals, y_vals, \"o-\", linewidth=2, markersize=6)\n        plt.axhline(\n            y=result.base_target_value,\n            color=\"red\",\n            linestyle=\"--\",\n            alpha=0.7,\n            label=\"Base Value\",\n        )\n\n        plt.xlabel(f'{param_name.replace(\"_\", \" \").title()}')\n        plt.ylabel(f\"{result.target_name} ({result.target_unit})\")\n        plt.title(\n            f'{result.target_name} vs {param_name.replace(\"_\", \" \").title()}'\n        )\n        plt.grid(True, alpha=0.3)\n        plt.legend()\n\n        # Add sensitivity annotation\n        sensitivity = result.sensitivity_analysis[param_name]\n        plt.text(\n            0.05,\n            0.95,\n            f\"Sensitivity: {sensitivity:.2e} {result.target_unit}/unit\",\n            transform=plt.gca().transAxes,\n            verticalalignment=\"top\",\n            bbox=dict(boxstyle=\"round\", facecolor=\"wheat\", alpha=0.8),\n        )\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def _plot_two_parameters(\n        self, result: ExplorationResult, save_plots: bool, plot_idx: int\n    ):\n        \"\"\"Plot results for two parameter exploration.\"\"\"\n        param1_name, param2_name = result.parameter_names\n        param1_values = result.parameter_values[param1_name]\n        param2_values = result.parameter_values[param2_name]\n\n        # Create 2D contour plot\n        fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))\n\n        # Contour plot\n        P1, P2 = np.meshgrid(param1_values, param2_values)\n        contour = ax1.contour(\n            P1,\n            P2,\n            result.target_values,\n            levels=15,\n            colors=\"black\",\n            alpha=0.5,\n            linewidths=0.5,\n        )\n        contourf = ax1.contourf(\n            P1, P2, result.target_values, levels=20, cmap=\"viridis\", alpha=0.8\n        )\n        ax1.clabel(contour, inline=True, fontsize=8)\n\n        cbar1 = plt.colorbar(contourf, ax=ax1)\n        cbar1.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        ax1.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax1.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax1.set_title(f\"{result.target_name} Contour Map\")\n        ax1.grid(True, alpha=0.3)\n\n        # 3D surface plot\n        from mpl_toolkits.mplot3d import Axes3D\n\n        ax2 = fig.add_subplot(122, projection=\"3d\")\n\n        surface = ax2.plot_surface(\n            P1, P2, result.target_values, cmap=\"viridis\", alpha=0.8\n        )\n        ax2.set_xlabel(f'{param1_name.replace(\"_\", \" \").title()}')\n        ax2.set_ylabel(f'{param2_name.replace(\"_\", \" \").title()}')\n        ax2.set_zlabel(f\"{result.target_name} ({result.target_unit})\")\n        ax2.set_title(f\"{result.target_name} Surface\")\n\n        cbar2 = plt.colorbar(surface, ax=ax2, shrink=0.5)\n        cbar2.set_label(f\"{result.target_name} ({result.target_unit})\")\n\n        plt.tight_layout()\n\n        if save_plots:\n            plt.savefig(\n                f\"parameter_exploration_{plot_idx}_{param1_name}_{param2_name}.png\",\n                dpi=300,\n                bbox_inches=\"tight\",\n            )\n\n        plt.show()\n\n    def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n        \"\"\"Print sensitivity analysis results.\"\"\"\n        print(\"\\n\" + \"=\" * 60)\n        print(\"SENSITIVITY ANALYSIS\")\n        print(\"=\" * 60)\n\n        all_sensitivities = {}\n\n        for result in results:\n            for param_name, sensitivity in result.sensitivity_analysis.items():\n                if param_name not in all_sensitivities:\n                    all_sensitivities[param_name] = []\n                all_sensitivities[param_name].append(abs(sensitivity))\n\n        # Average sensitivities and sort by magnitude\n        avg_sensitivities = {\n            name: np.mean(values) for name, values in all_sensitivities.items()\n        }\n        sorted_params = sorted(\n            avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n        )\n\n        print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            unit = results[0].target_unit\n            print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n        # Relative importance\n        max_sensitivity = (\n            max(avg_sensitivities.values()) if avg_sensitivities else 1\n        )\n\n        print(\n            f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n        )\n        print(\"-\" * 50)\n\n        for param_name, avg_sensitivity in sorted_params:\n            relative = avg_sensitivity / max_sensitivity * 100\n            print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.create_parameter_configs","title":"<code>create_parameter_configs(self, base_params, parameter_names, custom_ranges=None)</code>","text":"<p>Create parameter configurations for exploration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def create_parameter_configs(\n    self,\n    base_params: Dict[str, float],\n    parameter_names: List[str],\n    custom_ranges: Dict[str, Dict] = None,\n) -&gt; Dict[str, ParameterConfig]:\n    \"\"\"Create parameter configurations for exploration.\"\"\"\n    configs = {}\n\n    # Default units and ranges\n    param_defaults = {\n        \"pressure\": {\"unit\": \"Pa\", \"min_factor\": 0.3, \"max_factor\": 3.0},\n        \"water_fraction\": {\n            \"unit\": \"-\",\n            \"min_factor\": 0.3,\n            \"max_factor\": 3.0,\n        },\n        \"nozzle_diameter\": {\n            \"unit\": \"m\",\n            \"min_factor\": 0.5,\n            \"max_factor\": 2.5,\n        },\n        \"bottle_volume\": {\n            \"unit\": \"m\u00b3\",\n            \"min_factor\": 0.5,\n            \"max_factor\": 2.0,\n        },\n        \"bottle_diameter\": {\n            \"unit\": \"m\",\n            \"min_factor\": 0.7,\n            \"max_factor\": 1.5,\n        },\n        \"empty_mass\": {\"unit\": \"kg\", \"min_factor\": 0.5, \"max_factor\": 2.0},\n        \"drag_coefficient\": {\n            \"unit\": \"-\",\n            \"min_factor\": 0.3,\n            \"max_factor\": 3.0,\n        },\n    }\n\n    for param_name in parameter_names:\n        if param_name not in base_params:\n            raise ValueError(\n                f\"Parameter '{param_name}' not found in base parameters\"\n            )\n\n        # Get default settings\n        defaults = param_defaults.get(\n            param_name, {\"unit\": \"\", \"min_factor\": 0.5, \"max_factor\": 2.0}\n        )\n\n        # Apply custom ranges if provided\n        if custom_ranges and param_name in custom_ranges:\n            defaults.update(custom_ranges[param_name])\n\n        configs[param_name] = ParameterConfig(\n            name=param_name, base_value=base_params[param_name], **defaults\n        )\n\n    return configs\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.explore_multiple_parameters","title":"<code>explore_multiple_parameters(self, base_rocket, param_configs, target='apogee', sim_settings=None, use_parallel=True)</code>","text":"<p>Explore multiple parameters with pairwise combinations.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def explore_multiple_parameters(\n    self,\n    base_rocket,\n    param_configs: Dict[str, ParameterConfig],\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n    use_parallel: bool = True,\n) -&gt; List[ExplorationResult]:\n    \"\"\"Explore multiple parameters with pairwise combinations.\"\"\"\n\n    print(\n        f\"Exploring {len(param_configs)} parameters: {list(param_configs.keys())}\"\n    )\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    results = []\n    param_names = list(param_configs.keys())\n\n    # Generate all pairwise combinations\n    for param1_name, param2_name in combinations(param_names, 2):\n        print(f\"  Exploring pair: {param1_name} vs {param2_name}\")\n\n        param1_config = param_configs[param1_name]\n        param2_config = param_configs[param2_name]\n\n        # Create parameter grids\n        p1_values = param1_config.values\n        p2_values = param2_config.values\n        P1, P2 = np.meshgrid(p1_values, p2_values)\n\n        target_grid = np.full_like(P1, np.nan)\n\n        # Simulate all combinations\n        total_sims = P1.size\n        completed_sims = 0\n\n        for i in range(P1.shape[0]):\n            for j in range(P1.shape[1]):\n                param_values = {\n                    param1_name: P1[i, j],\n                    param2_name: P2[i, j],\n                }\n\n                flight_data = self.simulate_single_point(\n                    base_rocket, param_values, sim_settings\n                )\n\n                if flight_data is not None:\n                    target_grid[i, j] = getattr(flight_data, target_attr)\n\n                completed_sims += 1\n                if completed_sims % 10 == 0:\n                    print(\n                        f\"    Progress: {completed_sims}/{total_sims} ({100*completed_sims/total_sims:.1f}%)\"\n                    )\n\n        # Calculate sensitivities for both parameters\n        sensitivity1 = self._calculate_sensitivity(\n            base_rocket,\n            param1_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n        sensitivity2 = self._calculate_sensitivity(\n            base_rocket,\n            param2_config,\n            target,\n            base_target_value,\n            sim_settings,\n        )\n\n        results.append(\n            ExplorationResult(\n                parameter_names=[param1_name, param2_name],\n                parameter_values={\n                    param1_name: p1_values,\n                    param2_name: p2_values,\n                },\n                target_values=target_grid,\n                target_name=target_display,\n                target_unit=target_unit,\n                base_target_value=base_target_value,\n                sensitivity_analysis={\n                    param1_name: sensitivity1,\n                    param2_name: sensitivity2,\n                },\n            )\n        )\n\n    return results\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.explore_single_parameter","title":"<code>explore_single_parameter(self, base_rocket, param_config, target='apogee', sim_settings=None)</code>","text":"<p>Explore a single parameter.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def explore_single_parameter(\n    self,\n    base_rocket,\n    param_config: ParameterConfig,\n    target: str = \"apogee\",\n    sim_settings: Dict[str, Any] = None,\n) -&gt; ExplorationResult:\n    \"\"\"Explore a single parameter.\"\"\"\n    print(f\"Exploring parameter: {param_config.name}\")\n\n    target_attr, target_unit, target_display = self.target_extractors[\n        target\n    ]\n\n    # Get base target value\n    base_flight_data = self.simulate_single_point(\n        base_rocket, {}, sim_settings\n    )\n    if base_flight_data is None:\n        raise RuntimeError(\"Base simulation failed\")\n    base_target_value = getattr(base_flight_data, target_attr)\n\n    # Explore parameter range\n    target_values = []\n    valid_param_values = []\n\n    for param_value in param_config.values:\n        flight_data = self.simulate_single_point(\n            base_rocket, {param_config.name: param_value}, sim_settings\n        )\n\n        if flight_data is not None:\n            target_values.append(getattr(flight_data, target_attr))\n            valid_param_values.append(param_value)\n        else:\n            target_values.append(np.nan)\n            valid_param_values.append(param_value)\n\n    # Calculate sensitivity (numerical derivative at base value)\n    sensitivity = self._calculate_sensitivity(\n        base_rocket, param_config, target, base_target_value, sim_settings\n    )\n\n    return ExplorationResult(\n        parameter_names=[param_config.name],\n        parameter_values={param_config.name: np.array(valid_param_values)},\n        target_values=np.array(target_values),\n        target_name=target_display,\n        target_unit=target_unit,\n        base_target_value=base_target_value,\n        sensitivity_analysis={param_config.name: sensitivity},\n    )\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.extract_base_parameters","title":"<code>extract_base_parameters(self, rocket)</code>","text":"<p>Extract base parameter values from a rocket configuration.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def extract_base_parameters(self, rocket) -&gt; Dict[str, float]:\n    \"\"\"Extract base parameter values from a rocket configuration.\"\"\"\n    # Convert rocket to simulation parameters to get the base values\n    builder = RocketBuilder.from_dict(rocket.__dict__)\n    sim_params = builder.to_simulation_params()\n\n    print(\"Debug - Available simulation parameters:\")\n    for key, value in sim_params.items():\n        print(f\"  {key}: {value}\")\n\n    base_params = {}\n\n    # Map simulation parameters to our parameter names\n    param_mapping = {\n        \"pressure\": \"initial_pressure\",\n        \"water_fraction\": \"water_fraction\",\n        \"nozzle_diameter\": \"nozzle_diameter\",\n        \"bottle_volume\": \"bottle_volume\",\n        \"bottle_diameter\": \"bottle_diameter\",\n        \"empty_mass\": \"empty_mass\",\n        \"drag_coefficient\": \"drag_coefficient\",\n    }\n\n    for param_name, sim_param_name in param_mapping.items():\n        if sim_param_name in sim_params:\n            base_params[param_name] = sim_params[sim_param_name]\n            print(f\"  Found {param_name} = {sim_params[sim_param_name]}\")\n        else:\n            # Provide reasonable defaults for missing parameters\n            defaults = {\n                \"pressure\": 8 * ATMOSPHERIC_PRESSURE,\n                \"water_fraction\": 0.33,\n                \"nozzle_diameter\": 0.015,\n                \"bottle_volume\": 0.002,\n                \"bottle_diameter\": 0.1,\n                \"empty_mass\": 0.25,\n                \"drag_coefficient\": 0.5,\n            }\n            base_params[param_name] = defaults.get(param_name, 1.0)\n            print(\n                f\"  Using default for {param_name} = {base_params[param_name]}\"\n            )\n\n    return base_params\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.plot_results","title":"<code>plot_results(self, results, save_plots=False)</code>","text":"<p>Create plots for exploration results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def plot_results(\n    self, results: List[ExplorationResult], save_plots: bool = False\n):\n    \"\"\"Create plots for exploration results.\"\"\"\n\n    for i, result in enumerate(results):\n        if len(result.parameter_names) == 1:\n            self._plot_single_parameter(result, save_plots, i)\n        elif len(result.parameter_names) == 2:\n            self._plot_two_parameters(result, save_plots, i)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.print_sensitivity_analysis","title":"<code>print_sensitivity_analysis(self, results)</code>","text":"<p>Print sensitivity analysis results.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def print_sensitivity_analysis(self, results: List[ExplorationResult]):\n    \"\"\"Print sensitivity analysis results.\"\"\"\n    print(\"\\n\" + \"=\" * 60)\n    print(\"SENSITIVITY ANALYSIS\")\n    print(\"=\" * 60)\n\n    all_sensitivities = {}\n\n    for result in results:\n        for param_name, sensitivity in result.sensitivity_analysis.items():\n            if param_name not in all_sensitivities:\n                all_sensitivities[param_name] = []\n            all_sensitivities[param_name].append(abs(sensitivity))\n\n    # Average sensitivities and sort by magnitude\n    avg_sensitivities = {\n        name: np.mean(values) for name, values in all_sensitivities.items()\n    }\n    sorted_params = sorted(\n        avg_sensitivities.items(), key=lambda x: x[1], reverse=True\n    )\n\n    print(f\"\\nParameter Sensitivities (for {results[0].target_name}):\")\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        unit = results[0].target_unit\n        print(f\"{param_name:20s}: {avg_sensitivity:12.2e} {unit}/unit\")\n\n    # Relative importance\n    max_sensitivity = (\n        max(avg_sensitivities.values()) if avg_sensitivities else 1\n    )\n\n    print(\n        f\"\\nRelative Importance (normalized to most sensitive parameter):\"\n    )\n    print(\"-\" * 50)\n\n    for param_name, avg_sensitivity in sorted_params:\n        relative = avg_sensitivity / max_sensitivity * 100\n        print(f\"{param_name:20s}: {relative:6.1f}%\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.ParameterExplorer.simulate_single_point","title":"<code>simulate_single_point(self, base_rocket, param_values, sim_settings=None)</code>","text":"<p>Simulate a single parameter point.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def simulate_single_point(\n    self,\n    base_rocket,\n    param_values: Dict[str, float],\n    sim_settings: Dict[str, Any] = None,\n) -&gt; Optional[Any]:\n    \"\"\"Simulate a single parameter point.\"\"\"\n    try:\n        # Create a copy of the base rocket parameters\n        builder = RocketBuilder.from_dict(base_rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        print(f\"Debug - Simulating with param_values: {param_values}\")\n        print(\n            f\"Debug - Original sim_params keys: {list(sim_params.keys())}\"\n        )\n\n        # Update parameters\n        for param_name, value in param_values.items():\n            if param_name in self.parameter_updaters:\n                print(f\"Debug - Updating {param_name} to {value}\")\n                old_value = sim_params.get(\n                    self._get_sim_param_name(param_name), \"NOT FOUND\"\n                )\n                print(f\"Debug - Old value: {old_value}\")\n\n                self.parameter_updaters[param_name](sim_params, value)\n\n                new_value = sim_params.get(\n                    self._get_sim_param_name(param_name), \"NOT FOUND\"\n                )\n                print(f\"Debug - New value: {new_value}\")\n            else:\n                print(\n                    f\"Warning: No updater found for parameter {param_name}\"\n                )\n\n        # Default simulation settings\n        if sim_settings is None:\n            sim_settings = {\n                \"max_time\": 15.0,\n                \"time_step\": 0.01,\n                \"solver\": \"RK45\",\n            }\n\n        # Run simulation\n        flight_data = self.simulator.simulate(sim_params, sim_settings)\n        return flight_data\n\n    except Exception as e:\n        print(f\"Error in simulate_single_point: {e}\")\n        import traceback\n\n        traceback.print_exc()\n        warnings.warn(\n            f\"Simulation failed for parameters {param_values}: {e}\"\n        )\n        return None\n</code></pre>"},{"location":"api/waterrocketpy/visualization/parameter_explorer_debugging/#waterrocketpy.visualization.parameter_explorer_debugging.main","title":"<code>main()</code>","text":"<p>Example usage of the parameter explorer.</p> Source code in <code>waterrocketpy/visualization/parameter_explorer_debugging.py</code> <pre><code>def main():\n    \"\"\"Example usage of the parameter explorer.\"\"\"\n\n    print(\"=== Water Rocket Parameter Explorer ===\\n\")\n\n    # Create base rocket configuration\n    print(\"1. Creating base rocket configuration...\")\n    base_rocket = create_standard_rocket()\n    print(f\"   Base rocket: {base_rocket.name}\")\n\n    # Initialize explorer\n    explorer = ParameterExplorer()\n\n    # Extract base parameters\n    base_params = explorer.extract_base_parameters(base_rocket)\n    print(\"\\n2. Base parameters:\")\n    for name, value in base_params.items():\n        print(f\"   {name}: {value}\")\n\n    # Test parameter updates with debug info\n    print(\"\\n2.5. Testing parameter updates...\")\n    test_params = {\"pressure\": base_params[\"pressure\"] * 2.0}\n    test_flight = explorer.simulate_single_point(base_rocket, test_params)\n    if test_flight:\n        print(\n            f\"   Test simulation successful - apogee: {test_flight.max_altitude:.2f} m\"\n        )\n    else:\n        print(\"   Test simulation failed!\")\n\n    # Define parameters to explore\n    parameters_to_explore = [\"pressure\", \"water_fraction\", \"nozzle_diameter\"]\n    target_metric = \"apogee\"\n\n    print(f\"\\n3. Exploring parameters: {parameters_to_explore}\")\n    print(f\"   Target metric: {target_metric}\")\n\n    # Create parameter configurations\n    param_configs = explorer.create_parameter_configs(\n        base_params,\n        parameters_to_explore,\n        custom_ranges={\n            \"pressure\": {\n                \"min_factor\": 0.4,\n                \"max_factor\": 2.5,\n                \"num_points\": 5,\n            },\n            \"water_fraction\": {\n                \"min_factor\": 0.5,\n                \"max_factor\": 2.0,\n                \"num_points\": 5,\n            },\n            \"nozzle_diameter\": {\n                \"min_factor\": 0.6,\n                \"max_factor\": 2.0,\n                \"num_points\": 5,\n            },\n        },\n    )\n\n    # First, let's test individual parameters\n    print(\"\\n4. Testing individual parameter effects...\")\n    for param_name, param_config in param_configs.items():\n        print(f\"\\n   Testing {param_name}:\")\n        print(f\"   Base value: {param_config.base_value}\")\n        print(\n            f\"   Range: {param_config.min_value:.6f} to {param_config.max_value:.6f}\"\n        )\n\n        # Test minimum value\n        min_flight = explorer.simulate_single_point(\n            base_rocket, {param_name: param_config.min_value}\n        )\n        if min_flight:\n            print(\n                f\"   Min {param_name} ({param_config.min_value:.6f}): apogee = {min_flight.max_altitude:.2f} m\"\n            )\n\n        # Test maximum value\n        max_flight = explorer.simulate_single_point(\n            base_rocket, {param_name: param_config.max_value}\n        )\n        if max_flight:\n            print(\n                f\"   Max {param_name} ({param_config.max_value:.6f}): apogee = {max_flight.max_altitude:.2f} m\"\n            )\n\n    # Run exploration\n    print(\"\\n5. Running parameter exploration...\")\n    results = explorer.explore_multiple_parameters(\n        base_rocket,\n        param_configs,\n        target=target_metric,\n        sim_settings={\"max_time\": 20.0, \"time_step\": 0.01},\n    )\n\n    # Display results\n    print(f\"\\n6. Generated {len(results)} result sets\")\n\n    # Create plots\n    print(\"\\n7. Creating plots...\")\n    explorer.plot_results(results)\n\n    # Print sensitivity analysis\n    explorer.print_sensitivity_analysis(results)\n\n    print(\"\\nExploration complete!\")\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/","title":"waterrocketpy.visualization.plot_flight_data","text":"<p>Comprehensive flight data visualization script for water rocket simulation. Creates multiple organized plots showing all aspects of the rocket's flight performance.</p>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.add_phase_backgrounds","title":"<code>add_phase_backgrounds(ax, phases, alpha=0.1)</code>","text":"<p>Add colored backgrounds to distinguish flight phases.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def add_phase_backgrounds(ax, phases, alpha=0.1):\n    \"\"\"Add colored backgrounds to distinguish flight phases.\"\"\"\n    colors = ['lightblue', 'lightgreen', 'lightyellow', 'lightcoral']\n    labels = ['Water Phase', 'Air Phase', 'Coasting Up', 'Descent']\n\n    # Get axis limits\n    ylim = ax.get_ylim()\n    height = ylim[1] - ylim[0]\n\n    times = [0, phases['water_end'], phases['air_end'], \n             phases['apogee_time'], phases['flight_end']]\n\n    for i in range(len(times)-1):\n        if times[i+1] &gt; times[i]:  # Only add if phase exists\n            width = times[i+1] - times[i]\n            if width &gt; 0:\n                rect = patches.Rectangle(\n                    (times[i], ylim[0]), width, height,\n                    linewidth=0, edgecolor='none',\n                    facecolor=colors[min(i, len(colors)-1)],\n                    alpha=alpha, zorder=0\n                )\n                ax.add_patch(rect)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.create_summary_table","title":"<code>create_summary_table(flight_data, phases)</code>","text":"<p>Create a summary table of key flight parameters.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def create_summary_table(flight_data, phases):\n    \"\"\"Create a summary table of key flight parameters.\"\"\"\n    summary_data = {\n        'Flight Performance': {\n            'Maximum Altitude': f\"{flight_data.max_altitude:.2f} m\",\n            'Maximum Velocity': f\"{flight_data.max_velocity:.2f} m/s\",\n            'Total Flight Time': f\"{flight_data.flight_time:.2f} s\",\n            'Time to Apogee': f\"{phases['apogee_time']:.2f} s\"\n        },\n        'Phase Durations': {\n            'Water Phase': f\"{phases['water_end']:.2f} s\",\n            'Air Phase': f\"{phases['air_end'] - phases['water_end']:.2f} s\" if phases['air_end'] &gt; phases['water_end'] else \"0.00 s\",\n            'Coasting Phase': f\"{phases['flight_end'] - phases['air_end']:.2f} s\" if phases['flight_end'] &gt; phases['air_end'] else f\"{phases['flight_end'] - phases['water_end']:.2f} s\"\n        },\n        'Initial Conditions': {\n            'Initial Water Mass': f\"{flight_data.water_mass[0]*1000:.1f} g\",\n            'Initial Air Mass': f\"{flight_data.air_mass[0]*1000:.1f} g\",\n            'Initial Pressure': f\"{flight_data.pressure[0]/1e5:.2f} bar\",\n            'Initial Temperature': f\"{flight_data.air_temperature[0]:.1f} K\"\n        }\n    }\n\n    return summary_data\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.identify_flight_phases","title":"<code>identify_flight_phases(flight_data)</code>","text":"<p>Identify the different phases of flight for visualization.</p> <p>Returns:</p> Type Description <code>dict</code> <p>Phase boundaries and information</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def identify_flight_phases(flight_data):\n    \"\"\"\n    Identify the different phases of flight for visualization.\n\n    Returns:\n        dict: Phase boundaries and information\n    \"\"\"\n    phases = {\n        'water_end': flight_data.water_depletion_time,\n        'air_end': flight_data.air_depletion_time,\n        'flight_end': flight_data.flight_time\n    }\n\n    # Find apogee (maximum altitude)\n    apogee_idx = np.argmax(flight_data.altitude)\n    phases['apogee_time'] = flight_data.time[apogee_idx]\n    phases['apogee_altitude'] = flight_data.max_altitude\n\n    return phases\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.main","title":"<code>main()</code>","text":"<p>Main function to run simulation and create all plots.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def main():\n    \"\"\"Main function to run simulation and create all plots.\"\"\"\n    print(\"Water Rocket Flight Data Visualization\")\n    print(\"=\" * 50)\n\n    # Setup plotting style\n    setup_plot_style()\n\n    try:\n        # Create and run simulation\n        print(\"1. Creating standard rocket...\")\n        rocket = create_standard_rocket()\n        print(f\"   \u2713 Rocket created: {rocket.name}\")\n\n        print(\"2. Setting up simulation...\")\n        builder = RocketBuilder.from_dict(rocket.__dict__)\n        sim_params = builder.to_simulation_params()\n\n        simulator = WaterRocketSimulator()\n        sim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\n        print(\"3. Running simulation...\")\n        flight_data = simulator.simulate(sim_params, sim_settings)\n        print(f\"   \u2713 Simulation completed! {len(flight_data.time)} data points generated\")\n\n        # Identify flight phases\n        print(\"4. Analyzing flight phases...\")\n        phases = identify_flight_phases(flight_data)\n\n        # Print summary\n        print_flight_summary(flight_data, phases)\n\n        # Create all plots\n        print(\"5. Generating plots...\")\n\n        figs = []\n\n        print(\"   - Trajectory and velocity plots...\")\n        figs.append(plot_trajectory_and_velocity(flight_data, phases))\n\n        print(\"   - Forces and acceleration plots...\")\n        figs.append(plot_forces_and_acceleration(flight_data, phases))\n\n        print(\"   - Propellant and pressure plots...\")\n        figs.append(plot_propellant_and_pressure(flight_data, phases))\n\n        print(\"   - Exhaust properties plots...\")\n        figs.append(plot_exhaust_properties(flight_data, phases))\n\n        print(\"   - Air exit conditions plots...\")\n        figs.append(plot_air_exit_conditions(flight_data, phases))\n\n        # Show all plots\n        print(\"6. Displaying plots...\")\n        plt.show()\n\n        print(\"\u2713 All plots generated successfully!\")\n\n    except Exception as e:\n        print(f\"\u2717 Error: {e}\")\n        import traceback\n        traceback.print_exc()\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_air_exit_conditions","title":"<code>plot_air_exit_conditions(flight_data, phases)</code>","text":"<p>Plot air and water exit conditions and internal bottle air properties.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_air_exit_conditions(flight_data, phases):\n    \"\"\"Plot air and water exit conditions and internal bottle air properties.\"\"\"\n    fig, (ax1, ax2, ax3) = plt.subplots(3, 1, figsize=(12, 9))\n\n    # Time masks\n    air_phase_mask = (flight_data.time &gt;= phases['water_end']) &amp; (flight_data.time &lt;= phases['air_end'])\n    water_phase_mask = (flight_data.time &gt;= 0) &amp; (flight_data.time &lt;= phases['water_end'])\n    combine_mask = air_phase_mask | water_phase_mask\n\n    if not np.any(air_phase_mask):\n        ax1.text(0.5, 0.5, 'No air phase detected', ha='center', va='center', transform=ax1.transAxes)\n        ax2.text(0.5, 0.5, 'No air phase detected', ha='center', va='center', transform=ax2.transAxes)\n        ax3.text(0.5, 0.5, 'No air phase detected', ha='center', va='center', transform=ax3.transAxes)\n    else:\n        thrust_time = flight_data.time[combine_mask]\n\n        # === 1. PRESSURE ===\n        air_exit_pressure = np.nan_to_num(flight_data.air_exit_pressure[combine_mask], ATMOSPHERIC_PRESSURE) / 1e5\n        internal_pressure = flight_data.pressure[combine_mask] / 1e5\n\n        ax1.plot(thrust_time, air_exit_pressure, color='purple', linewidth=2, label='Air exit pressure')\n        ax1.plot(thrust_time, internal_pressure, color='blue', linestyle='--', linewidth=2, label='Internal pressure')\n        ax1.axhline(ATMOSPHERIC_PRESSURE / 1e5, color='gray', linestyle=':', alpha=0.7, label='Atmospheric pressure')\n        ax1.set_ylabel('Pressure (bar)')\n        ax1.set_title('Air Exit and Internal Conditions')\n        ax1.grid(True, alpha=0.3)\n        ax1.legend()\n\n        # === 2. TEMPERATURE ===\n        air_exit_temp = np.nan_to_num(flight_data.air_exit_temperature[combine_mask], INITIAL_TEMPERATURE)\n        internal_temp = flight_data.air_temperature[combine_mask]\n\n        ax2.plot(thrust_time, air_exit_temp, color='orange', linewidth=2, label='Air exit temperature')\n        ax2.plot(thrust_time, internal_temp, color='red', linestyle='--', linewidth=2, label='Internal temperature')\n        ax2.axhline(INITIAL_TEMPERATURE, color='gray', linestyle=':', alpha=0.7, label='Initial temperature')\n        ax2.set_ylabel('Temperature (K)')\n        ax2.grid(True, alpha=0.3)\n        ax2.legend()\n\n        # === 3. EXHAUST VELOCITY ===\n        water_velocity = np.nan_to_num(flight_data.water_exhaust_speed[combine_mask], 0.0)\n        air_velocity = np.nan_to_num(flight_data.air_exhaust_speed[combine_mask], 0.0)\n\n        ax3.plot(thrust_time, water_velocity, color='blue', linewidth=2, label='Water exhaust velocity')\n        ax3.plot(thrust_time, air_velocity, color='green', linewidth=2, label='Air exhaust velocity')\n        ax3.set_xlabel('Time (s)')\n        ax3.set_ylabel('Exhaust Velocity (m/s)')\n        ax3.grid(True, alpha=0.3)\n        ax3.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_exhaust_properties","title":"<code>plot_exhaust_properties(flight_data, phases)</code>","text":"<p>Plot exhaust velocities and mass flow rates.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_exhaust_properties(flight_data, phases):\n    \"\"\"Plot exhaust velocities and mass flow rates.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Exhaust velocities\n    # Handle None values by replacing with 0\n    water_exhaust = np.nan_to_num(flight_data.water_exhaust_speed, 0)\n    air_exhaust = np.nan_to_num(flight_data.air_exhaust_speed, 0)\n\n    ax1.plot(flight_data.time, water_exhaust, 'b-', linewidth=2, label='Water exhaust speed')\n    ax1.plot(flight_data.time, air_exhaust, 'g-', linewidth=2, label='Air exhaust speed')\n\n    add_phase_backgrounds(ax1, phases)\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax1.set_ylabel('Exhaust Speed (m/s)')\n    ax1.set_title('Exhaust Velocities')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n\n    # Mass flow rates\n    water_flow = np.nan_to_num(flight_data.water_mass_flow_rate, 0) * 1000  # Convert to g/s\n    air_flow = np.nan_to_num(flight_data.air_mass_flow_rate, 0) * 1000\n\n    ax2.plot(flight_data.time, -water_flow, 'b-', linewidth=2, label='Water flow rate')  # Negative because it's outflow\n    ax2.plot(flight_data.time, -air_flow, 'g-', linewidth=2, label='Air flow rate')\n\n    add_phase_backgrounds(ax2, phases)\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Mass Flow Rate (g/s)')\n    ax2.set_title('Propellant Mass Flow Rates')\n    ax2.grid(True, alpha=0.3)\n    ax2.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_forces_and_acceleration","title":"<code>plot_forces_and_acceleration(flight_data, phases)</code>","text":"<p>Plot forces and acceleration.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_forces_and_acceleration(flight_data, phases):\n    \"\"\"Plot forces and acceleration.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Forces plot\n    ax1.plot(flight_data.time, flight_data.thrust, 'g-', linewidth=2, label='Thrust')\n    ax1.plot(flight_data.time, flight_data.drag, 'r-', linewidth=2, label='Drag')\n\n    # Calculate weight (assuming constant during powered flight)\n    # Weight changes as propellant is expelled\n    total_mass = flight_data.water_mass + flight_data.air_mass + 0.15  # Assuming 0.15kg empty mass\n    weight = total_mass * 9.81\n    ax1.plot(flight_data.time, weight, 'k--', linewidth=1.5, label='Weight', alpha=0.7)\n\n    add_phase_backgrounds(ax1, phases)\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax1.set_ylabel('Force (N)')\n    ax1.set_title('Forces Acting on Rocket')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n    ax1.set_yscale('log')\n\n    # Acceleration plot\n    ax2.plot(flight_data.time, flight_data.acceleration, 'purple', linewidth=2, label='Acceleration')\n    add_phase_backgrounds(ax2, phases)\n\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n    ax2.axhline(0, color='black', linestyle='-', alpha=0.3)\n    ax2.axhline(-9.81, color='gray', linestyle=':', alpha=0.7, label='Gravity')\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Acceleration (m/s\u00b2)')\n    ax2.set_title('Rocket Acceleration')\n    ax2.grid(True, alpha=0.3)\n    ax2.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_propellant_and_pressure","title":"<code>plot_propellant_and_pressure(flight_data, phases)</code>","text":"<p>Plot propellant masses and pressure.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_propellant_and_pressure(flight_data, phases):\n    \"\"\"Plot propellant masses and pressure.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Propellant masses\n    ax1.plot(flight_data.time, flight_data.water_mass * 1000, 'b-', linewidth=2, label='Water mass')\n    ax1.plot(flight_data.time, flight_data.air_mass * 1000, 'g-', linewidth=2, label='Air mass')\n    ax1.plot(flight_data.time, flight_data.liquid_gas_mass * 1000, 'orange', linewidth=2, label='Liquid gas mass')\n\n    add_phase_backgrounds(ax1, phases)\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax1.set_ylabel('Mass (g)')\n    ax1.set_title('Propellant Masses')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n\n    # Pressure and temperature\n    ax2_temp = ax2.twinx()\n\n    # Pressure (convert to bar for readability)\n    pressure_bar = flight_data.pressure / 1e5\n    line1 = ax2.plot(flight_data.time, pressure_bar, 'r-', linewidth=2, label='Pressure')\n    ax2.axhline(ATMOSPHERIC_PRESSURE / 1e5, color='red', linestyle=':', alpha=0.7, label='Atmospheric')\n\n    # Temperature\n    line2 = ax2_temp.plot(flight_data.time, flight_data.air_temperature, 'orange', linewidth=2, label='Temperature')\n    ax2_temp.axhline(INITIAL_TEMPERATURE, color='orange', linestyle=':', alpha=0.7, label='Initial temp')\n\n    add_phase_backgrounds(ax2, phases)\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Pressure (bar)', color='r')\n    ax2_temp.set_ylabel('Temperature (K)', color='orange')\n    ax2.set_title('Pressure and Temperature')\n    ax2.grid(True, alpha=0.3)\n\n    # Combine legends\n    lines1, labels1 = ax2.get_legend_handles_labels()\n    lines2, labels2 = ax2_temp.get_legend_handles_labels()\n    ax2.legend(lines1 + lines2, labels1 + labels2, loc='upper right')\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.plot_trajectory_and_velocity","title":"<code>plot_trajectory_and_velocity(flight_data, phases)</code>","text":"<p>Plot altitude and velocity vs time.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def plot_trajectory_and_velocity(flight_data, phases):\n    \"\"\"Plot altitude and velocity vs time.\"\"\"\n    fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))\n\n    # Altitude plot\n    ax1.plot(flight_data.time, flight_data.altitude, 'b-', linewidth=2, label='Altitude')\n    add_phase_backgrounds(ax1, phases)\n\n    # Mark key events\n    ax1.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7, label='Water depleted')\n    ax1.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7, label='Air depleted')\n    ax1.axvline(phases['apogee_time'], color='green', linestyle='--', alpha=0.7, label='Apogee')\n\n    ax1.set_ylabel('Altitude (m)')\n    ax1.set_title('Rocket Trajectory')\n    ax1.grid(True, alpha=0.3)\n    ax1.legend()\n\n    # Velocity plot\n    ax2.plot(flight_data.time, flight_data.velocity, 'r-', linewidth=2, label='Velocity')\n    add_phase_backgrounds(ax2, phases)\n\n    # Mark key events\n    ax2.axvline(phases['water_end'], color='red', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['air_end'], color='orange', linestyle='--', alpha=0.7)\n    ax2.axvline(phases['apogee_time'], color='green', linestyle='--', alpha=0.7)\n    ax2.axhline(0, color='black', linestyle='-', alpha=0.3)\n\n    ax2.set_xlabel('Time (s)')\n    ax2.set_ylabel('Velocity (m/s)')\n    ax2.set_title('Rocket Velocity')\n    ax2.grid(True, alpha=0.3)\n    ax2.legend()\n\n    plt.tight_layout()\n    return fig\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.print_flight_summary","title":"<code>print_flight_summary(flight_data, phases)</code>","text":"<p>Print a comprehensive flight summary.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def print_flight_summary(flight_data, phases):\n    \"\"\"Print a comprehensive flight summary.\"\"\"\n    print(\"\\n\" + \"=\"*60)\n    print(\"WATER ROCKET FLIGHT ANALYSIS SUMMARY\")\n    print(\"=\"*60)\n\n    summary = create_summary_table(flight_data, phases)\n\n    for category, values in summary.items():\n        print(f\"\\n{category}:\")\n        print(\"-\" * len(category))\n        for key, value in values.items():\n            print(f\"  {key:&lt;25}: {value}\")\n\n    print(\"\\n\" + \"=\"*60)\n</code></pre>"},{"location":"api/waterrocketpy/visualization/plot_flight_data/#waterrocketpy.visualization.plot_flight_data.setup_plot_style","title":"<code>setup_plot_style()</code>","text":"<p>Configure matplotlib for professional-looking plots.</p> Source code in <code>waterrocketpy/visualization/plot_flight_data.py</code> <pre><code>def setup_plot_style():\n    \"\"\"Configure matplotlib for professional-looking plots.\"\"\"\n    plt.style.use('seaborn-v0_8')\n    plt.rcParams.update({\n        'figure.figsize': (16, 12),\n        'font.size': 10,\n        'axes.titlesize': 12,\n        'axes.labelsize': 11,\n        'xtick.labelsize': 9,\n        'ytick.labelsize': 9,\n        'legend.fontsize': 9,\n        'lines.linewidth': 1.5,\n        'grid.alpha': 0.3\n    })\n</code></pre>"},{"location":"examples/advanced_optimization_example/","title":"Advanced optimization example","text":"In\u00a0[1]: Copied! <pre>import time\nimport numpy as np\nfrom waterrocketpy.optimization.water_rocket_optimizer import (\n    WaterRocketOptimizer,\n    optimize_for_altitude,\n    optimize_for_velocity,\n    optimize_for_flight_time,\n)\n</pre> import time import numpy as np from waterrocketpy.optimization.water_rocket_optimizer import (     WaterRocketOptimizer,     optimize_for_altitude,     optimize_for_velocity,     optimize_for_flight_time, ) In\u00a0[2]: Copied! <pre>def print_results(result, test_name):\n    \"\"\"Print optimization results in a nice format.\"\"\"\n    print(f\"\\n{'='*60}\")\n    print(f\"RESULTS FOR: {test_name}\")\n    print(f\"{'='*60}\")\n    print(f\"Success: {result['success']}\")\n    print(f\"Target: {result['target']}\")\n    print(f\"Best value: {result['best_value']:.4f}\")\n    print(f\"Evaluations: {result['n_evaluations']}\")\n\n    print(\"\\nOptimal Parameters:\")\n    for param, value in result[\"best_params\"].items():\n        if param == \"p_max_bar\":\n            print(f\"  {param:20}: {value:8.2f} bar\")\n        elif param in [\"L_body\", \"d_body\"]:\n            print(f\"  {param:20}: {value:8.4f} m ({value*100:6.2f} cm)\")\n        elif param == \"nozzle_diameter\":\n            print(f\"  {param:20}: {value:8.4f} m ({value*1000:6.2f} mm)\")\n        elif param == \"water_fraction\":\n            print(f\"  {param:20}: {value:8.4f} ({value*100:6.2f}%)\")\n        else:\n            print(f\"  {param:20}: {value:8.4f}\")\n\n    if result[\"best_flight_data\"] is not None:\n        fd = result[\"best_flight_data\"]\n        print(\"\\nFlight Performance:\")\n        print(f\"  Max Altitude        : {fd.max_altitude:8.4f} m\")\n        print(f\"  Max Velocity        : {fd.max_velocity:8.4f} m/s\")\n        print(f\"  Flight Time         : {fd.flight_time:8.4f} s\")\n        print(f\"  Water Depletion Time: {fd.water_depletion_time:8.4f} s\")\n</pre> def print_results(result, test_name):     \"\"\"Print optimization results in a nice format.\"\"\"     print(f\"\\n{'='*60}\")     print(f\"RESULTS FOR: {test_name}\")     print(f\"{'='*60}\")     print(f\"Success: {result['success']}\")     print(f\"Target: {result['target']}\")     print(f\"Best value: {result['best_value']:.4f}\")     print(f\"Evaluations: {result['n_evaluations']}\")      print(\"\\nOptimal Parameters:\")     for param, value in result[\"best_params\"].items():         if param == \"p_max_bar\":             print(f\"  {param:20}: {value:8.2f} bar\")         elif param in [\"L_body\", \"d_body\"]:             print(f\"  {param:20}: {value:8.4f} m ({value*100:6.2f} cm)\")         elif param == \"nozzle_diameter\":             print(f\"  {param:20}: {value:8.4f} m ({value*1000:6.2f} mm)\")         elif param == \"water_fraction\":             print(f\"  {param:20}: {value:8.4f} ({value*100:6.2f}%)\")         else:             print(f\"  {param:20}: {value:8.4f}\")      if result[\"best_flight_data\"] is not None:         fd = result[\"best_flight_data\"]         print(\"\\nFlight Performance:\")         print(f\"  Max Altitude        : {fd.max_altitude:8.4f} m\")         print(f\"  Max Velocity        : {fd.max_velocity:8.4f} m/s\")         print(f\"  Flight Time         : {fd.flight_time:8.4f} s\")         print(f\"  Water Depletion Time: {fd.water_depletion_time:8.4f} s\") In\u00a0[3]: Copied! <pre>print(\"Velocity optimization with custom bounds\")\n\n# Define tighter bounds around typical values\ncustom_bounds = [\n    (0.20, 0.30),    # L_body: 20-30 cm\n    (0.085, 0.095),  # d_body: 8.5-9.5 cm (around 2L bottle)\n    (7.0, 9.0),      # p_max_bar: 7-9 bar\n    (0.009, 0.012),  # nozzle_diameter: 9-12 mm\n    (0.25, 0.40),    # water_fraction: 25-40%\n]\n\nprint(\"Custom bounds:\")\nparam_names = ['L_body (m)', 'd_body (m)', 'p_max (bar)', 'nozzle_dia (m)', 'water_frac']\nfor i, (param_name, (min_val, max_val)) in enumerate(zip(param_names, custom_bounds)):\n    print(f\"  {param_name:15}: [{min_val:6.3f}, {max_val:6.3f}]\")\n\nstart_time = time.time()\n\nresult_velocity = optimize_for_velocity(\n    bounds=custom_bounds,\n    method=\"differential_evolution\",\n    maxiter=25,\n    popsize=10,\n    seed=123,\n)\n\nelapsed_time = time.time() - start_time\nprint(f\"\\nOptimization completed in {elapsed_time:.2f} seconds\")\n\nprint_results(result_velocity, \"Custom Bounds Velocity Optimization\")\n</pre> print(\"Velocity optimization with custom bounds\")  # Define tighter bounds around typical values custom_bounds = [     (0.20, 0.30),    # L_body: 20-30 cm     (0.085, 0.095),  # d_body: 8.5-9.5 cm (around 2L bottle)     (7.0, 9.0),      # p_max_bar: 7-9 bar     (0.009, 0.012),  # nozzle_diameter: 9-12 mm     (0.25, 0.40),    # water_fraction: 25-40% ]  print(\"Custom bounds:\") param_names = ['L_body (m)', 'd_body (m)', 'p_max (bar)', 'nozzle_dia (m)', 'water_frac'] for i, (param_name, (min_val, max_val)) in enumerate(zip(param_names, custom_bounds)):     print(f\"  {param_name:15}: [{min_val:6.3f}, {max_val:6.3f}]\")  start_time = time.time()  result_velocity = optimize_for_velocity(     bounds=custom_bounds,     method=\"differential_evolution\",     maxiter=25,     popsize=10,     seed=123, )  elapsed_time = time.time() - start_time print(f\"\\nOptimization completed in {elapsed_time:.2f} seconds\")  print_results(result_velocity, \"Custom Bounds Velocity Optimization\") <pre>Velocity optimization with custom bounds\nCustom bounds:\n  L_body (m)     : [ 0.200,  0.300]\n  d_body (m)     : [ 0.085,  0.095]\n  p_max (bar)    : [ 7.000,  9.000]\n  nozzle_dia (m) : [ 0.009,  0.012]\n  water_frac     : [ 0.250,  0.400]\nStarting optimization for max_velocity using differential_evolution\nParameter bounds: [(0.2, 0.3), (0.085, 0.095), (7.0, 9.0), (0.009, 0.012), (0.25, 0.4)]\nNew best max_velocity: 43.1361 at evaluation 1\n  Params: L_body=0.220, d_body=0.088, p_max=7.2bar, nozzle_d=0.0109, water_frac=0.380\nNew best max_velocity: 43.8598 at evaluation 2\n  Params: L_body=0.205, d_body=0.089, p_max=7.5bar, nozzle_d=0.0108, water_frac=0.285\n</pre> <pre>New best max_velocity: 44.9703 at evaluation 3\n  Params: L_body=0.223, d_body=0.093, p_max=8.8bar, nozzle_d=0.0091, water_frac=0.399\nNew best max_velocity: 45.1061 at evaluation 4\n  Params: L_body=0.247, d_body=0.090, p_max=8.0bar, nozzle_d=0.0101, water_frac=0.385\nNew best max_velocity: 47.0032 at evaluation 5\n  Params: L_body=0.290, d_body=0.090, p_max=7.9bar, nozzle_d=0.0109, water_frac=0.325\n</pre> <pre>New best max_velocity: 47.9715 at evaluation 6\n  Params: L_body=0.273, d_body=0.085, p_max=8.4bar, nozzle_d=0.0113, water_frac=0.254\n</pre> <pre>New best max_velocity: 48.1689 at evaluation 17\n  Params: L_body=0.279, d_body=0.092, p_max=8.7bar, nozzle_d=0.0105, water_frac=0.342\n</pre> <pre>New best max_velocity: 48.5003 at evaluation 21\n  Params: L_body=0.252, d_body=0.086, p_max=8.8bar, nozzle_d=0.0116, water_frac=0.261\n</pre> <pre>New best max_velocity: 49.2145 at evaluation 34\n  Params: L_body=0.294, d_body=0.092, p_max=8.9bar, nozzle_d=0.0111, water_frac=0.264\n</pre> <pre>New best max_velocity: 49.2683 at evaluation 91\n  Params: L_body=0.286, d_body=0.090, p_max=8.7bar, nozzle_d=0.0114, water_frac=0.326\n</pre> <pre>New best max_velocity: 49.3114 at evaluation 98\n  Params: L_body=0.292, d_body=0.094, p_max=8.7bar, nozzle_d=0.0115, water_frac=0.290\ndifferential_evolution step 1: f(x)= -49.31138280857241\n</pre> <pre>New best max_velocity: 49.6391 at evaluation 110\n  Params: L_body=0.298, d_body=0.089, p_max=8.6bar, nozzle_d=0.0120, water_frac=0.306\n</pre> <pre>differential_evolution step 2: f(x)= -49.63908917289738\n</pre> <pre>New best max_velocity: 49.7768 at evaluation 168\n  Params: L_body=0.283, d_body=0.091, p_max=8.9bar, nozzle_d=0.0120, water_frac=0.341\n</pre> <pre>differential_evolution step 3: f(x)= -49.7768361037334\nNew best max_velocity: 50.1259 at evaluation 201\n  Params: L_body=0.299, d_body=0.093, p_max=8.9bar, nozzle_d=0.0120, water_frac=0.332\n</pre> <pre>differential_evolution step 4: f(x)= -50.12586612133661\n</pre> <pre>New best max_velocity: 50.1771 at evaluation 254\n  Params: L_body=0.295, d_body=0.086, p_max=8.9bar, nozzle_d=0.0117, water_frac=0.315\n</pre> <pre>differential_evolution step 5: f(x)= -50.177091069850064\n</pre> <pre>differential_evolution step 6: f(x)= -50.177091069850064\n</pre> <pre>New best max_velocity: 50.2426 at evaluation 358\n  Params: L_body=0.297, d_body=0.085, p_max=8.8bar, nozzle_d=0.0119, water_frac=0.311\n</pre> <pre>New best max_velocity: 50.2632 at evaluation 368\n  Params: L_body=0.299, d_body=0.089, p_max=8.9bar, nozzle_d=0.0119, water_frac=0.331\n</pre> <pre>differential_evolution step 7: f(x)= -50.26317455348622\n</pre> <pre>New best max_velocity: 50.3238 at evaluation 437\n  Params: L_body=0.299, d_body=0.086, p_max=8.9bar, nozzle_d=0.0118, water_frac=0.317\n</pre> <pre>New best max_velocity: 50.3527 at evaluation 443\n  Params: L_body=0.296, d_body=0.086, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.343\n</pre> <pre>differential_evolution step 8: f(x)= -50.35270295469536\n</pre> <pre>differential_evolution step 9: f(x)= -50.35270295469536\nPolishing solution with 'L-BFGS-B'\nNew best max_velocity: 50.3527 at evaluation 502\n  Params: L_body=0.296, d_body=0.086, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.343\n</pre> <pre>New best max_velocity: 50.3527 at evaluation 505\n  Params: L_body=0.296, d_body=0.086, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.343\n</pre> <pre>New best max_velocity: 50.5614 at evaluation 513\n  Params: L_body=0.298, d_body=0.086, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.308\nNew best max_velocity: 50.5614 at evaluation 514\n  Params: L_body=0.298, d_body=0.086, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.308\n</pre> <pre>New best max_velocity: 50.5614 at evaluation 517\n  Params: L_body=0.298, d_body=0.086, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.308\nNew best max_velocity: 50.6156 at evaluation 519\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.301\n</pre> <pre>New best max_velocity: 50.6156 at evaluation 520\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.301\n</pre> <pre>New best max_velocity: 50.6331 at evaluation 525\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.305\n</pre> <pre>New best max_velocity: 50.6331 at evaluation 528\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.305\n</pre> <pre>New best max_velocity: 50.6417 at evaluation 531\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.308\n</pre> <pre>New best max_velocity: 50.6417 at evaluation 536\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.308\nNew best max_velocity: 50.6428 at evaluation 537\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.309\n</pre> <pre>New best max_velocity: 50.6428 at evaluation 542\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.309\nNew best max_velocity: 50.6432 at evaluation 543\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.311\n</pre> <pre>New best max_velocity: 50.6433 at evaluation 549\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.311\n</pre> <pre>New best max_velocity: 50.6433 at evaluation 638\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.311\n</pre> <pre>New best max_velocity: 50.6433 at evaluation 644\n  Params: L_body=0.300, d_body=0.085, p_max=9.0bar, nozzle_d=0.0120, water_frac=0.311\n</pre> <pre>\nOptimization completed!\nBest max_velocity: 50.6433\nBest parameters:\n  L_body: 0.3000\n  d_body: 0.0850\n  p_max_bar: 9.0000\n  nozzle_diameter: 0.0120\n  water_fraction: 0.3106\n\nOptimization completed in 57.57 seconds\n\n============================================================\nRESULTS FOR: Custom Bounds Velocity Optimization\n============================================================\nSuccess: True\nTarget: max_velocity\nBest value: 50.6433\nEvaluations: 662\n\nOptimal Parameters:\n  L_body              :   0.3000 m ( 30.00 cm)\n  d_body              :   0.0850 m (  8.50 cm)\n  p_max_bar           :     9.00 bar\n  nozzle_diameter     :   0.0120 m ( 12.00 mm)\n  water_fraction      :   0.3106 ( 31.06%)\n\nFlight Performance:\n  Max Altitude        :  95.4715 m\n  Max Velocity        :  50.6433 m/s\n  Flight Time         :   8.9409 s\n  Water Depletion Time:   0.1410 s\n</pre> In\u00a0[4]: Copied! <pre>print(\"Advanced optimization with custom settings\")\n\n# Create optimizer with custom simulation settings\noptimizer = WaterRocketOptimizer(\n    L_cone=0.08,  # Fixed nose cone length\n    material_name=\"PET\",  # Fixed material\n    simulation_settings={\n        \"max_time\": 40,    # Longer simulation time\n        \"time_step\": 0.01, # High precision\n        \"solver\": \"RK45\",\n    },\n)\n\n# Use default bounds but modify pressure range\nbounds = optimizer.get_default_bounds()\nbounds[2] = (5.0, 11.0)  # Wider pressure range: 5-11 bar\n\nprint(\"Modified bounds (pressure range widened):\")\nbound_names = ['L_body', 'd_body', 'p_max_bar', 'nozzle_diameter', 'water_fraction']\nfor name, (min_val, max_val) in zip(bound_names, bounds):\n    print(f\"  {name:15}: [{min_val:6.3f}, {max_val:6.3f}]\")\n\nstart_time = time.time()\n\nresult_advanced = optimizer.optimize(\n    bounds=bounds,\n    target=\"max_altitude\",\n    method=\"differential_evolution\",\n    maxiter=30,\n    popsize=12,\n    atol=1e-6,  # Higher accuracy\n    seed=456,\n)\n\nelapsed_time = time.time() - start_time\nprint(f\"\\nOptimization completed in {elapsed_time:.2f} seconds\")\n\nprint_results(result_advanced, \"Advanced Custom Settings\")\n</pre> print(\"Advanced optimization with custom settings\")  # Create optimizer with custom simulation settings optimizer = WaterRocketOptimizer(     L_cone=0.08,  # Fixed nose cone length     material_name=\"PET\",  # Fixed material     simulation_settings={         \"max_time\": 40,    # Longer simulation time         \"time_step\": 0.01, # High precision         \"solver\": \"RK45\",     }, )  # Use default bounds but modify pressure range bounds = optimizer.get_default_bounds() bounds[2] = (5.0, 11.0)  # Wider pressure range: 5-11 bar  print(\"Modified bounds (pressure range widened):\") bound_names = ['L_body', 'd_body', 'p_max_bar', 'nozzle_diameter', 'water_fraction'] for name, (min_val, max_val) in zip(bound_names, bounds):     print(f\"  {name:15}: [{min_val:6.3f}, {max_val:6.3f}]\")  start_time = time.time()  result_advanced = optimizer.optimize(     bounds=bounds,     target=\"max_altitude\",     method=\"differential_evolution\",     maxiter=30,     popsize=12,     atol=1e-6,  # Higher accuracy     seed=456, )  elapsed_time = time.time() - start_time print(f\"\\nOptimization completed in {elapsed_time:.2f} seconds\")  print_results(result_advanced, \"Advanced Custom Settings\") <pre>Advanced optimization with custom settings\nModified bounds (pressure range widened):\n  L_body         : [ 0.100,  0.500]\n  d_body         : [ 0.050,  0.120]\n  p_max_bar      : [ 5.000, 11.000]\n  nozzle_diameter: [ 0.005,  0.025]\n  water_fraction : [ 0.100,  0.800]\nStarting optimization for max_altitude using differential_evolution\nParameter bounds: [(0.1, 0.5), (0.05, 0.12), (5.0, 11.0), (0.005, 0.025), (0.1, 0.8)]\nNew best max_altitude: 88.5795 at evaluation 1\n  Params: L_body=0.448, d_body=0.105, p_max=8.0bar, nozzle_d=0.0063, water_frac=0.309\n</pre> <pre>New best max_altitude: 105.1120 at evaluation 4\n  Params: L_body=0.412, d_body=0.120, p_max=7.7bar, nozzle_d=0.0235, water_frac=0.284\nNew best max_altitude: 119.1762 at evaluation 6\n  Params: L_body=0.395, d_body=0.106, p_max=10.0bar, nozzle_d=0.0188, water_frac=0.288\n</pre> <pre>New best max_altitude: 120.2927 at evaluation 31\n  Params: L_body=0.405, d_body=0.114, p_max=10.6bar, nozzle_d=0.0130, water_frac=0.226\n</pre> <pre>New best max_altitude: 126.0110 at evaluation 102\n  Params: L_body=0.451, d_body=0.104, p_max=10.7bar, nozzle_d=0.0148, water_frac=0.257\n</pre> <pre>differential_evolution step 1: f(x)= -126.01103420643302\n</pre> <pre>New best max_altitude: 130.2868 at evaluation 145\n  Params: L_body=0.475, d_body=0.112, p_max=10.3bar, nozzle_d=0.0209, water_frac=0.323\n</pre> <pre>New best max_altitude: 131.8183 at evaluation 151\n  Params: L_body=0.425, d_body=0.114, p_max=11.0bar, nozzle_d=0.0215, water_frac=0.308\n</pre> <pre>differential_evolution step 2: f(x)= -131.8182601015532\n</pre> <pre>New best max_altitude: 134.4667 at evaluation 204\n  Params: L_body=0.466, d_body=0.115, p_max=10.9bar, nozzle_d=0.0182, water_frac=0.317\n</pre> <pre>differential_evolution step 3: f(x)= -134.46674875982038\n</pre> <pre>differential_evolution step 4: f(x)= -134.46674875982038\n</pre> <pre>differential_evolution step 5: f(x)= -134.46674875982038\n</pre> <pre>differential_evolution step 6: f(x)= -134.46674875982038\n</pre> <pre>New best max_altitude: 134.7840 at evaluation 451\n  Params: L_body=0.475, d_body=0.117, p_max=10.9bar, nozzle_d=0.0162, water_frac=0.309\n</pre> <pre>New best max_altitude: 134.9157 at evaluation 455\n  Params: L_body=0.490, d_body=0.111, p_max=10.9bar, nozzle_d=0.0200, water_frac=0.287\n</pre> <pre>differential_evolution step 7: f(x)= -134.9156928899953\n</pre> <pre>New best max_altitude: 135.4686 at evaluation 492\n  Params: L_body=0.488, d_body=0.119, p_max=10.9bar, nozzle_d=0.0160, water_frac=0.305\n</pre> <pre>New best max_altitude: 135.7309 at evaluation 497\n  Params: L_body=0.486, d_body=0.119, p_max=10.8bar, nozzle_d=0.0226, water_frac=0.270\n</pre> <pre>New best max_altitude: 136.0299 at evaluation 520\n  Params: L_body=0.478, d_body=0.116, p_max=10.8bar, nozzle_d=0.0231, water_frac=0.324\n</pre> <pre>differential_evolution step 8: f(x)= -136.02992687080754\n</pre> <pre>New best max_altitude: 136.5369 at evaluation 557\n  Params: L_body=0.488, d_body=0.119, p_max=10.9bar, nozzle_d=0.0187, water_frac=0.305\n</pre> <pre>differential_evolution step 9: f(x)= -136.53689268388354\n</pre> <pre>New best max_altitude: 136.7114 at evaluation 649\n  Params: L_body=0.496, d_body=0.118, p_max=11.0bar, nozzle_d=0.0179, water_frac=0.278\n</pre> <pre>differential_evolution step 10: f(x)= -136.71139397806107\n</pre> <pre>New best max_altitude: 138.3182 at evaluation 709\n  Params: L_body=0.491, d_body=0.119, p_max=10.9bar, nozzle_d=0.0246, water_frac=0.314\n</pre> <pre>differential_evolution step 11: f(x)= -138.31820052344364\n</pre> <pre>differential_evolution step 12: f(x)= -138.31820052344364\n</pre> <pre>New best max_altitude: 138.5136 at evaluation 799\n  Params: L_body=0.499, d_body=0.120, p_max=10.8bar, nozzle_d=0.0246, water_frac=0.332\n</pre> <pre>differential_evolution step 13: f(x)= -138.5135749996961\n</pre> <pre>differential_evolution step 14: f(x)= -138.5135749996961\n</pre> <pre>differential_evolution step 15: f(x)= -138.5135749996961\n</pre> <pre>differential_evolution step 16: f(x)= -138.5135749996961\n</pre> <pre>New best max_altitude: 138.8521 at evaluation 1080\n  Params: L_body=0.493, d_body=0.119, p_max=11.0bar, nozzle_d=0.0231, water_frac=0.310\ndifferential_evolution step 17: f(x)= -138.8521101467835\nNew best max_altitude: 138.9940 at evaluation 1081\n  Params: L_body=0.493, d_body=0.120, p_max=11.0bar, nozzle_d=0.0228, water_frac=0.320\n</pre> <pre>differential_evolution step 18: f(x)= -138.9939743694284\n</pre> <pre>differential_evolution step 19: f(x)= -138.9939743694284\n</pre> <pre>differential_evolution step 20: f(x)= -138.9939743694284\n</pre> <pre>differential_evolution step 21: f(x)= -138.9939743694284\n</pre> <pre>differential_evolution step 22: f(x)= -138.9939743694284\n</pre> <pre>differential_evolution step 23: f(x)= -138.9939743694284\n</pre> <pre>New best max_altitude: 139.1643 at evaluation 1474\n  Params: L_body=0.497, d_body=0.120, p_max=10.9bar, nozzle_d=0.0247, water_frac=0.320\n</pre> <pre>differential_evolution step 24: f(x)= -139.1642872135296\n</pre> <pre>differential_evolution step 25: f(x)= -139.1642872135296\n</pre> <pre>New best max_altitude: 139.4352 at evaluation 1600\n  Params: L_body=0.499, d_body=0.120, p_max=11.0bar, nozzle_d=0.0244, water_frac=0.316\n</pre> <pre>differential_evolution step 26: f(x)= -139.4351797044659\nPolishing solution with 'L-BFGS-B'\nNew best max_altitude: 139.4352 at evaluation 1622\n  Params: L_body=0.499, d_body=0.120, p_max=11.0bar, nozzle_d=0.0244, water_frac=0.316\n</pre> <pre>New best max_altitude: 139.4352 at evaluation 1623\n  Params: L_body=0.499, d_body=0.120, p_max=11.0bar, nozzle_d=0.0244, water_frac=0.316\n</pre> <pre>New best max_altitude: 139.4402 at evaluation 1633\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0244, water_frac=0.320\nNew best max_altitude: 139.4402 at evaluation 1634\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0244, water_frac=0.320\n</pre> <pre>New best max_altitude: 139.4402 at evaluation 1635\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0244, water_frac=0.320\n</pre> <pre>New best max_altitude: 139.6431 at evaluation 1639\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>New best max_altitude: 139.6431 at evaluation 1642\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>New best max_altitude: 139.7929 at evaluation 1645\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.316\n</pre> <pre>New best max_altitude: 139.7929 at evaluation 1648\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.316\n</pre> <pre>New best max_altitude: 139.8723 at evaluation 1651\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.314\n</pre> <pre>New best max_altitude: 139.8723 at evaluation 1656\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.314\nNew best max_altitude: 139.8821 at evaluation 1657\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.317\n</pre> <pre>New best max_altitude: 139.8821 at evaluation 1662\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.317\nNew best max_altitude: 139.8856 at evaluation 1663\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>New best max_altitude: 139.8856 at evaluation 1668\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\nNew best max_altitude: 139.8856 at evaluation 1669\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>New best max_altitude: 139.8856 at evaluation 1699\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>New best max_altitude: 139.8856 at evaluation 1705\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>New best max_altitude: 139.8856 at evaluation 1717\n  Params: L_body=0.500, d_body=0.120, p_max=11.0bar, nozzle_d=0.0250, water_frac=0.319\n</pre> <pre>\nOptimization completed!\nBest max_altitude: 139.8856\nBest parameters:\n  L_body: 0.5000\n  d_body: 0.1200\n  p_max_bar: 11.0000\n  nozzle_diameter: 0.0250\n  water_fraction: 0.3189\n\nOptimization completed in 168.56 seconds\n\n============================================================\nRESULTS FOR: Advanced Custom Settings\n============================================================\nSuccess: True\nTarget: max_altitude\nBest value: 139.8856\nEvaluations: 1722\n\nOptimal Parameters:\n  L_body              :   0.5000 m ( 50.00 cm)\n  d_body              :   0.1200 m ( 12.00 cm)\n  p_max_bar           :    11.00 bar\n  nozzle_diameter     :   0.0250 m ( 25.00 mm)\n  water_fraction      :   0.3189 ( 31.89%)\n\nFlight Performance:\n  Max Altitude        : 139.8856 m\n  Max Velocity        :  59.3378 m/s\n  Flight Time         :  10.7734 s\n  Water Depletion Time:   0.0992 s\n</pre> In\u00a0[5]: Copied! <pre>print(\"Flight time optimization using minimize method\")\n\n# Starting point based on reasonable rocket dimensions\ninitial_guess = [0.25, 0.088, 8.0, 0.01, 0.3]\n\nprint(\"Initial guess:\")\nguess_names = ['L_body (m)', 'd_body (m)', 'p_max (bar)', 'nozzle_dia (m)', 'water_frac']\nfor name, value in zip(guess_names, initial_guess):\n    print(f\"  {name:15}: {value:8.4f}\")\n\nstart_time = time.time()\n\nresult_minimize = optimize_for_flight_time(\n    method=\"minimize\",\n    x0=initial_guess,\n    options={\"maxiter\": 50, \"disp\": True},\n)\n\nelapsed_time = time.time() - start_time\nprint(f\"\\nOptimization completed in {elapsed_time:.2f} seconds\")\n\nprint_results(result_minimize, \"Flight Time Optimization (Minimize)\")\n</pre> print(\"Flight time optimization using minimize method\")  # Starting point based on reasonable rocket dimensions initial_guess = [0.25, 0.088, 8.0, 0.01, 0.3]  print(\"Initial guess:\") guess_names = ['L_body (m)', 'd_body (m)', 'p_max (bar)', 'nozzle_dia (m)', 'water_frac'] for name, value in zip(guess_names, initial_guess):     print(f\"  {name:15}: {value:8.4f}\")  start_time = time.time()  result_minimize = optimize_for_flight_time(     method=\"minimize\",     x0=initial_guess,     options={\"maxiter\": 50, \"disp\": True}, )  elapsed_time = time.time() - start_time print(f\"\\nOptimization completed in {elapsed_time:.2f} seconds\")  print_results(result_minimize, \"Flight Time Optimization (Minimize)\") <pre>Flight time optimization using minimize method\nInitial guess:\n  L_body (m)     :   0.2500\n  d_body (m)     :   0.0880\n  p_max (bar)    :   8.0000\n  nozzle_dia (m) :   0.0100\n  water_frac     :   0.3000\nStarting optimization for flight_time using minimize\nParameter bounds: [(0.1, 0.5), (0.05, 0.12), (2.0, 12.0), (0.005, 0.025), (0.1, 0.8)]\nNew best flight_time: 8.3092 at evaluation 1\n  Params: L_body=0.250, d_body=0.088, p_max=8.0bar, nozzle_d=0.0100, water_frac=0.300\nNew best flight_time: 8.3092 at evaluation 2\n  Params: L_body=0.250, d_body=0.088, p_max=8.0bar, nozzle_d=0.0100, water_frac=0.300\n</pre> <pre>New best flight_time: 8.3092 at evaluation 3\n  Params: L_body=0.250, d_body=0.088, p_max=8.0bar, nozzle_d=0.0100, water_frac=0.300\n</pre> <pre>New best flight_time: 20.0000 at evaluation 7\n  Params: L_body=0.500, d_body=0.120, p_max=8.0bar, nozzle_d=0.0050, water_frac=0.800\n</pre> <pre>\nOptimization completed!\nBest flight_time: 20.0000\nBest parameters:\n  L_body: 0.5000\n  d_body: 0.1200\n  p_max_bar: 7.9980\n  nozzle_diameter: 0.0050\n  water_fraction: 0.8000\n\nOptimization completed in 1.93 seconds\n\n============================================================\nRESULTS FOR: Flight Time Optimization (Minimize)\n============================================================\nSuccess: True\nTarget: flight_time\nBest value: 20.0000\nEvaluations: 12\n\nOptimal Parameters:\n  L_body              :   0.5000 m ( 50.00 cm)\n  d_body              :   0.1200 m ( 12.00 cm)\n  p_max_bar           :     8.00 bar\n  nozzle_diameter     :   0.0050 m (  5.00 mm)\n  water_fraction      :   0.8000 ( 80.00%)\n\nFlight Performance:\n  Max Altitude        :   0.0000 m\n  Max Velocity        :   0.0000 m/s\n  Flight Time         :  20.0000 s\n  Water Depletion Time:   0.0000 s\n</pre> In\u00a0[6]: Copied! <pre>print(\"Comparing different optimization targets\")\n\n# Use the same bounds and settings for fair comparison\ncommon_bounds = [\n    (0.15, 0.35),   # L_body: 15-35 cm\n    (0.07, 0.10),   # d_body: 7-10 cm\n    (6.0, 10.0),    # p_max_bar: 6-10 bar\n    (0.008, 0.015), # nozzle_diameter: 8-15 mm\n    (0.25, 0.45),   # water_fraction: 25-45%\n]\n\ncommon_settings = {\n    \"method\": \"differential_evolution\",\n    \"maxiter\": 20,\n    \"popsize\": 8,\n    \"seed\": 789,\n}\n\nprint(\"Common bounds for all targets:\")\nfor i, (name, (min_val, max_val)) in enumerate(zip(param_names, common_bounds)):\n    print(f\"  {name:15}: [{min_val:6.3f}, {max_val:6.3f}]\")\n\nresults = {}\n\nprint(\"\\nOptimizing for altitude...\")\nresults[\"altitude\"] = optimize_for_altitude(\n    bounds=common_bounds, **common_settings\n)\n\nprint(\"Optimizing for velocity...\")\nresults[\"velocity\"] = optimize_for_velocity(\n    bounds=common_bounds, **common_settings\n)\n\nprint(\"Optimizing for flight time...\")\nresults[\"flight_time\"] = optimize_for_flight_time(\n    bounds=common_bounds, **common_settings\n)\n</pre> print(\"Comparing different optimization targets\")  # Use the same bounds and settings for fair comparison common_bounds = [     (0.15, 0.35),   # L_body: 15-35 cm     (0.07, 0.10),   # d_body: 7-10 cm     (6.0, 10.0),    # p_max_bar: 6-10 bar     (0.008, 0.015), # nozzle_diameter: 8-15 mm     (0.25, 0.45),   # water_fraction: 25-45% ]  common_settings = {     \"method\": \"differential_evolution\",     \"maxiter\": 20,     \"popsize\": 8,     \"seed\": 789, }  print(\"Common bounds for all targets:\") for i, (name, (min_val, max_val)) in enumerate(zip(param_names, common_bounds)):     print(f\"  {name:15}: [{min_val:6.3f}, {max_val:6.3f}]\")  results = {}  print(\"\\nOptimizing for altitude...\") results[\"altitude\"] = optimize_for_altitude(     bounds=common_bounds, **common_settings )  print(\"Optimizing for velocity...\") results[\"velocity\"] = optimize_for_velocity(     bounds=common_bounds, **common_settings )  print(\"Optimizing for flight time...\") results[\"flight_time\"] = optimize_for_flight_time(     bounds=common_bounds, **common_settings ) <pre>Comparing different optimization targets\nCommon bounds for all targets:\n  L_body (m)     : [ 0.150,  0.350]\n  d_body (m)     : [ 0.070,  0.100]\n  p_max (bar)    : [ 6.000, 10.000]\n  nozzle_dia (m) : [ 0.008,  0.015]\n  water_frac     : [ 0.250,  0.450]\n\nOptimizing for altitude...\nStarting optimization for max_altitude using differential_evolution\nParameter bounds: [(0.15, 0.35), (0.07, 0.1), (6.0, 10.0), (0.008, 0.015), (0.25, 0.45)]\nNew best max_altitude: 80.6665 at evaluation 1\n  Params: L_body=0.305, d_body=0.087, p_max=7.7bar, nozzle_d=0.0114, water_frac=0.438\n</pre> <pre>New best max_altitude: 91.8359 at evaluation 6\n  Params: L_body=0.260, d_body=0.092, p_max=9.0bar, nozzle_d=0.0137, water_frac=0.300\n</pre> <pre>New best max_altitude: 95.0675 at evaluation 10\n  Params: L_body=0.322, d_body=0.088, p_max=9.2bar, nozzle_d=0.0116, water_frac=0.434\n</pre> <pre>New best max_altitude: 98.9362 at evaluation 13\n  Params: L_body=0.292, d_body=0.100, p_max=9.2bar, nozzle_d=0.0146, water_frac=0.267\n</pre> <pre>New best max_altitude: 100.8080 at evaluation 24\n  Params: L_body=0.305, d_body=0.079, p_max=9.9bar, nozzle_d=0.0140, water_frac=0.319\n</pre> <pre>New best max_altitude: 104.2058 at evaluation 46\n  Params: L_body=0.341, d_body=0.089, p_max=9.5bar, nozzle_d=0.0112, water_frac=0.283\n</pre> <pre>New best max_altitude: 105.7046 at evaluation 80\n  Params: L_body=0.328, d_body=0.091, p_max=9.9bar, nozzle_d=0.0103, water_frac=0.279\ndifferential_evolution step 1: f(x)= -105.70464913716332\n</pre> <pre>New best max_altitude: 107.8668 at evaluation 107\n  Params: L_body=0.347, d_body=0.092, p_max=10.0bar, nozzle_d=0.0091, water_frac=0.297\n</pre> <pre>differential_evolution step 2: f(x)= -107.86681984569766\n</pre> <pre>New best max_altitude: 107.9415 at evaluation 129\n  Params: L_body=0.347, d_body=0.090, p_max=10.0bar, nozzle_d=0.0097, water_frac=0.302\n</pre> <pre>New best max_altitude: 108.5182 at evaluation 148\n  Params: L_body=0.347, d_body=0.091, p_max=10.0bar, nozzle_d=0.0102, water_frac=0.309\n</pre> <pre>differential_evolution step 3: f(x)= -108.51819773653989\n</pre> <pre>New best max_altitude: 109.6017 at evaluation 172\n  Params: L_body=0.348, d_body=0.095, p_max=9.8bar, nozzle_d=0.0133, water_frac=0.291\n</pre> <pre>differential_evolution step 4: f(x)= -109.60171466569778\n</pre> <pre>New best max_altitude: 110.0063 at evaluation 240\n  Params: L_body=0.346, d_body=0.098, p_max=9.7bar, nozzle_d=0.0148, water_frac=0.325\ndifferential_evolution step 5: f(x)= -110.00634827593872\n</pre> <pre>New best max_altitude: 110.3884 at evaluation 265\n  Params: L_body=0.347, d_body=0.100, p_max=9.8bar, nozzle_d=0.0143, water_frac=0.278\n</pre> <pre>differential_evolution step 6: f(x)= -110.38838657123794\n</pre> <pre>differential_evolution step 7: f(x)= -110.38838657123794\nNew best max_altitude: 111.2281 at evaluation 321\n  Params: L_body=0.347, d_body=0.099, p_max=9.9bar, nozzle_d=0.0141, water_frac=0.331\n</pre> <pre>differential_evolution step 8: f(x)= -111.22806454445373\nNew best max_altitude: 111.9194 at evaluation 361\n  Params: L_body=0.347, d_body=0.099, p_max=9.9bar, nozzle_d=0.0149, water_frac=0.324\n</pre> <pre>differential_evolution step 9: f(x)= -111.91940968715096\n</pre> <pre>differential_evolution step 10: f(x)= -111.91940968715096\n</pre> <pre>New best max_altitude: 111.9496 at evaluation 459\n  Params: L_body=0.347, d_body=0.099, p_max=10.0bar, nozzle_d=0.0136, water_frac=0.340\n</pre> <pre>differential_evolution step 11: f(x)= -111.94961521919137\nNew best max_altitude: 112.2448 at evaluation 481\n  Params: L_body=0.348, d_body=0.099, p_max=10.0bar, nozzle_d=0.0142, water_frac=0.340\n</pre> <pre>differential_evolution step 12: f(x)= -112.24477330429282\n</pre> <pre>New best max_altitude: 112.3127 at evaluation 536\n  Params: L_body=0.347, d_body=0.099, p_max=10.0bar, nozzle_d=0.0147, water_frac=0.309\n</pre> <pre>differential_evolution step 13: f(x)= -112.31273656662886\n</pre> <pre>New best max_altitude: 112.4148 at evaluation 577\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0148, water_frac=0.347\n</pre> <pre>differential_evolution step 14: f(x)= -112.4147906484272\n</pre> <pre>differential_evolution step 15: f(x)= -112.4147906484272\nNew best max_altitude: 112.4185 at evaluation 641\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0143, water_frac=0.328\n</pre> <pre>differential_evolution step 16: f(x)= -112.4185362523242\n</pre> <pre>differential_evolution step 17: f(x)= -112.4185362523242\nPolishing solution with 'L-BFGS-B'\nNew best max_altitude: 112.4185 at evaluation 722\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0143, water_frac=0.328\nNew best max_altitude: 112.4185 at evaluation 723\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0143, water_frac=0.328\n</pre> <pre>New best max_altitude: 112.4185 at evaluation 725\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0143, water_frac=0.328\n</pre> <pre>New best max_altitude: 112.5554 at evaluation 733\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0145, water_frac=0.311\nNew best max_altitude: 112.5554 at evaluation 734\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0145, water_frac=0.311\nNew best max_altitude: 112.5554 at evaluation 735\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0145, water_frac=0.311\n</pre> <pre>New best max_altitude: 112.5554 at evaluation 737\n  Params: L_body=0.349, d_body=0.100, p_max=10.0bar, nozzle_d=0.0145, water_frac=0.311\nNew best max_altitude: 112.9007 at evaluation 739\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.317\n</pre> <pre>New best max_altitude: 112.9007 at evaluation 742\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.317\n</pre> <pre>New best max_altitude: 112.9323 at evaluation 745\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>New best max_altitude: 112.9323 at evaluation 748\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>New best max_altitude: 113.0651 at evaluation 751\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.329\n</pre> <pre>New best max_altitude: 113.0898 at evaluation 757\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.326\n</pre> <pre>New best max_altitude: 113.1028 at evaluation 763\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.321\n</pre> <pre>New best max_altitude: 113.1028 at evaluation 769\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>New best max_altitude: 113.1028 at evaluation 774\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>New best max_altitude: 113.1028 at evaluation 793\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>New best max_altitude: 113.1028 at evaluation 811\n  Params: L_body=0.350, d_body=0.100, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>\nOptimization completed!\nBest max_altitude: 113.1028\nBest parameters:\n  L_body: 0.3500\n  d_body: 0.1000\n  p_max_bar: 10.0000\n  nozzle_diameter: 0.0150\n  water_fraction: 0.3204\nOptimizing for velocity...\nStarting optimization for max_velocity using differential_evolution\nParameter bounds: [(0.15, 0.35), (0.07, 0.1), (6.0, 10.0), (0.008, 0.015), (0.25, 0.45)]\nNew best max_velocity: 44.6989 at evaluation 1\n  Params: L_body=0.305, d_body=0.087, p_max=7.7bar, nozzle_d=0.0114, water_frac=0.438\n</pre> <pre>New best max_velocity: 50.3795 at evaluation 6\n  Params: L_body=0.260, d_body=0.092, p_max=9.0bar, nozzle_d=0.0137, water_frac=0.300\n</pre> <pre>New best max_velocity: 51.4356 at evaluation 13\n  Params: L_body=0.292, d_body=0.100, p_max=9.2bar, nozzle_d=0.0146, water_frac=0.267\n</pre> <pre>New best max_velocity: 53.3564 at evaluation 24\n  Params: L_body=0.305, d_body=0.079, p_max=9.9bar, nozzle_d=0.0140, water_frac=0.319\n</pre> <pre>New best max_velocity: 53.5319 at evaluation 64\n  Params: L_body=0.327, d_body=0.086, p_max=9.8bar, nozzle_d=0.0140, water_frac=0.298\n</pre> <pre>differential_evolution step 1: f(x)= -53.5319260722355\nNew best max_velocity: 53.7087 at evaluation 81\n  Params: L_body=0.344, d_body=0.091, p_max=9.8bar, nozzle_d=0.0141, water_frac=0.298\n</pre> <pre>differential_evolution step 2: f(x)= -53.70870263261544\n</pre> <pre>differential_evolution step 3: f(x)= -53.70870263261544\n</pre> <pre>New best max_velocity: 53.7351 at evaluation 175\n  Params: L_body=0.334, d_body=0.071, p_max=9.8bar, nozzle_d=0.0138, water_frac=0.311\n</pre> <pre>differential_evolution step 4: f(x)= -53.735086322818084\n</pre> <pre>New best max_velocity: 54.1104 at evaluation 224\n  Params: L_body=0.344, d_body=0.072, p_max=9.9bar, nozzle_d=0.0149, water_frac=0.365\n</pre> <pre>differential_evolution step 5: f(x)= -54.11037537655638\n</pre> <pre>New best max_velocity: 54.1261 at evaluation 244\n  Params: L_body=0.347, d_body=0.070, p_max=9.8bar, nozzle_d=0.0149, water_frac=0.305\n</pre> <pre>New best max_velocity: 54.3321 at evaluation 251\n  Params: L_body=0.345, d_body=0.072, p_max=9.9bar, nozzle_d=0.0149, water_frac=0.319\n</pre> <pre>differential_evolution step 6: f(x)= -54.33205112740322\n</pre> <pre>differential_evolution step 7: f(x)= -54.33205112740322\n</pre> <pre>New best max_velocity: 54.3798 at evaluation 354\n  Params: L_body=0.337, d_body=0.073, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.327\n</pre> <pre>differential_evolution step 8: f(x)= -54.379776449977136\n</pre> <pre>differential_evolution step 9: f(x)= -54.379776449977136\n</pre> <pre>differential_evolution step 10: f(x)= -54.379776449977136\n</pre> <pre>New best max_velocity: 54.4292 at evaluation 470\n  Params: L_body=0.345, d_body=0.071, p_max=9.9bar, nozzle_d=0.0150, water_frac=0.333\n</pre> <pre>New best max_velocity: 54.4864 at evaluation 474\n  Params: L_body=0.345, d_body=0.072, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.319\n</pre> <pre>differential_evolution step 11: f(x)= -54.48642350526417\nPolishing solution with 'L-BFGS-B'\nNew best max_velocity: 54.4864 at evaluation 482\n  Params: L_body=0.345, d_body=0.072, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.319\n</pre> <pre>New best max_velocity: 54.4864 at evaluation 485\n  Params: L_body=0.345, d_body=0.072, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.319\n</pre> <pre>New best max_velocity: 54.5086 at evaluation 493\n  Params: L_body=0.345, d_body=0.074, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.330\nNew best max_velocity: 54.5086 at evaluation 494\n  Params: L_body=0.345, d_body=0.074, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.330\n</pre> <pre>New best max_velocity: 54.5086 at evaluation 497\n  Params: L_body=0.345, d_body=0.074, p_max=10.0bar, nozzle_d=0.0149, water_frac=0.330\n</pre> <pre>New best max_velocity: 54.6100 at evaluation 505\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\nNew best max_velocity: 54.6100 at evaluation 506\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6167 at evaluation 511\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.326\n</pre> <pre>New best max_velocity: 54.6167 at evaluation 514\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.326\n</pre> <pre>New best max_velocity: 54.6173 at evaluation 517\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6173 at evaluation 520\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6183 at evaluation 523\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\nNew best max_velocity: 54.6183 at evaluation 525\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6183 at evaluation 526\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6223 at evaluation 529\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\nNew best max_velocity: 54.6223 at evaluation 531\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6223 at evaluation 532\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.325\n</pre> <pre>New best max_velocity: 54.6352 at evaluation 535\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.322\nNew best max_velocity: 54.6352 at evaluation 537\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.322\n</pre> <pre>New best max_velocity: 54.6464 at evaluation 541\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\nNew best max_velocity: 54.6464 at evaluation 543\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.320\n</pre> <pre>New best max_velocity: 54.6670 at evaluation 547\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.316\nNew best max_velocity: 54.6670 at evaluation 549\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.316\n</pre> <pre>New best max_velocity: 54.6685 at evaluation 553\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.316\nNew best max_velocity: 54.6685 at evaluation 555\n  Params: L_body=0.350, d_body=0.074, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.316\n</pre> <pre>New best max_velocity: 54.6733 at evaluation 559\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.318\nNew best max_velocity: 54.6733 at evaluation 561\n  Params: L_body=0.350, d_body=0.075, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.318\n</pre> <pre>New best max_velocity: 54.6777 at evaluation 571\n  Params: L_body=0.350, d_body=0.076, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.321\nNew best max_velocity: 54.6777 at evaluation 573\n  Params: L_body=0.350, d_body=0.076, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.321\n</pre> <pre>New best max_velocity: 54.6777 at evaluation 613\n  Params: L_body=0.350, d_body=0.076, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.321\n</pre> <pre>New best max_velocity: 54.6777 at evaluation 630\n  Params: L_body=0.350, d_body=0.076, p_max=10.0bar, nozzle_d=0.0150, water_frac=0.321\n</pre> <pre>\nOptimization completed!\nBest max_velocity: 54.6777\nBest parameters:\n  L_body: 0.3500\n  d_body: 0.0762\n  p_max_bar: 10.0000\n  nozzle_diameter: 0.0150\n  water_fraction: 0.3209\nOptimizing for flight time...\nStarting optimization for flight_time using differential_evolution\nParameter bounds: [(0.15, 0.35), (0.07, 0.1), (6.0, 10.0), (0.008, 0.015), (0.25, 0.45)]\nNew best flight_time: 8.3140 at evaluation 1\n  Params: L_body=0.305, d_body=0.087, p_max=7.7bar, nozzle_d=0.0114, water_frac=0.438\n</pre> <pre>New best flight_time: 8.7497 at evaluation 6\n  Params: L_body=0.260, d_body=0.092, p_max=9.0bar, nozzle_d=0.0137, water_frac=0.300\n</pre> <pre>New best flight_time: 8.9937 at evaluation 10\n  Params: L_body=0.322, d_body=0.088, p_max=9.2bar, nozzle_d=0.0116, water_frac=0.434\n</pre> <pre>New best flight_time: 9.0815 at evaluation 13\n  Params: L_body=0.292, d_body=0.100, p_max=9.2bar, nozzle_d=0.0146, water_frac=0.267\n</pre> <pre>New best flight_time: 9.1516 at evaluation 24\n  Params: L_body=0.305, d_body=0.079, p_max=9.9bar, nozzle_d=0.0140, water_frac=0.319\n</pre> <pre>New best flight_time: 9.2383 at evaluation 38\n  Params: L_body=0.347, d_body=0.093, p_max=8.7bar, nozzle_d=0.0084, water_frac=0.315\n</pre> <pre>New best flight_time: 9.3988 at evaluation 51\n  Params: L_body=0.325, d_body=0.096, p_max=9.8bar, nozzle_d=0.0107, water_frac=0.259\n</pre> <pre>New best flight_time: 9.4720 at evaluation 58\n  Params: L_body=0.330, d_body=0.092, p_max=9.8bar, nozzle_d=0.0110, water_frac=0.304\nNew best flight_time: 9.4793 at evaluation 60\n  Params: L_body=0.334, d_body=0.089, p_max=9.8bar, nozzle_d=0.0112, water_frac=0.338\n</pre> <pre>differential_evolution step 1: f(x)= -9.479256162499592\n</pre> <pre>New best flight_time: 9.5915 at evaluation 118\n  Params: L_body=0.337, d_body=0.093, p_max=10.0bar, nozzle_d=0.0106, water_frac=0.339\ndifferential_evolution step 2: f(x)= -9.591477251880296\n</pre> <pre>New best flight_time: 9.6262 at evaluation 142\n  Params: L_body=0.348, d_body=0.097, p_max=9.9bar, nozzle_d=0.0135, water_frac=0.299\n</pre> <pre>differential_evolution step 3: f(x)= -9.626215880630067\nNew best flight_time: 9.6626 at evaluation 161\n  Params: L_body=0.348, d_body=0.097, p_max=9.9bar, nozzle_d=0.0114, water_frac=0.339\n</pre> <pre>differential_evolution step 4: f(x)= -9.66258342809863\n</pre> <pre>differential_evolution step 5: f(x)= -9.66258342809863\n</pre> <pre>New best flight_time: 9.6753 at evaluation 267\n  Params: L_body=0.350, d_body=0.100, p_max=9.8bar, nozzle_d=0.0116, water_frac=0.309\n</pre> <pre>differential_evolution step 6: f(x)= -9.675343257234163\n</pre> <pre>differential_evolution step 7: f(x)= -9.675343257234163\n</pre> <pre>New best flight_time: 9.6835 at evaluation 334\n  Params: L_body=0.349, d_body=0.096, p_max=9.9bar, nozzle_d=0.0092, water_frac=0.346\n</pre> <pre>differential_evolution step 8: f(x)= -9.683450084206491\n</pre> <pre>New best flight_time: 9.6964 at evaluation 370\n  Params: L_body=0.347, d_body=0.097, p_max=9.9bar, nozzle_d=0.0091, water_frac=0.347\n</pre> <pre>New best flight_time: 9.7203 at evaluation 375\n  Params: L_body=0.349, d_body=0.097, p_max=10.0bar, nozzle_d=0.0088, water_frac=0.315\n</pre> <pre>differential_evolution step 9: f(x)= -9.720277174510226\n</pre> <pre>New best flight_time: 9.7306 at evaluation 434\n  Params: L_body=0.348, d_body=0.097, p_max=10.0bar, nozzle_d=0.0089, water_frac=0.310\n</pre> <pre>differential_evolution step 10: f(x)= -9.730596378797376\n</pre> <pre>differential_evolution step 11: f(x)= -9.730596378797376\nPolishing solution with 'L-BFGS-B'\nNew best flight_time: 9.7306 at evaluation 482\n  Params: L_body=0.348, d_body=0.097, p_max=10.0bar, nozzle_d=0.0089, water_frac=0.310\nNew best flight_time: 9.7306 at evaluation 483\n  Params: L_body=0.348, d_body=0.097, p_max=10.0bar, nozzle_d=0.0089, water_frac=0.310\n</pre> <pre>New best flight_time: 9.7428 at evaluation 493\n  Params: L_body=0.348, d_body=0.097, p_max=10.0bar, nozzle_d=0.0088, water_frac=0.323\nNew best flight_time: 9.7428 at evaluation 494\n  Params: L_body=0.348, d_body=0.097, p_max=10.0bar, nozzle_d=0.0088, water_frac=0.323\nNew best flight_time: 9.7428 at evaluation 495\n  Params: L_body=0.348, d_body=0.097, p_max=10.0bar, nozzle_d=0.0088, water_frac=0.323\n</pre> <pre>New best flight_time: 9.7467 at evaluation 505\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.332\nNew best flight_time: 9.7467 at evaluation 506\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.332\nNew best flight_time: 9.7467 at evaluation 507\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.332\n</pre> <pre>New best flight_time: 9.7477 at evaluation 511\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.340\nNew best flight_time: 9.7477 at evaluation 512\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.340\nNew best flight_time: 9.7477 at evaluation 513\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.340\n</pre> <pre>New best flight_time: 9.7478 at evaluation 523\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7478 at evaluation 526\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7478 at evaluation 528\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7481 at evaluation 547\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7481 at evaluation 548\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7481 at evaluation 549\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7483 at evaluation 553\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7483 at evaluation 554\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7483 at evaluation 555\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7484 at evaluation 565\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7484 at evaluation 566\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7484 at evaluation 567\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7495 at evaluation 571\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7495 at evaluation 572\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7495 at evaluation 573\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7495 at evaluation 577\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7495 at evaluation 578\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7495 at evaluation 579\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7495 at evaluation 583\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7495 at evaluation 584\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7495 at evaluation 585\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 589\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 590\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 591\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 631\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 632\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 633\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 637\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 638\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 639\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 649\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 650\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 651\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 655\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 656\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 657\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 669\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 674\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 675\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 687\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 693\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 697\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 698\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\nNew best flight_time: 9.7498 at evaluation 699\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>New best flight_time: 9.7498 at evaluation 785\n  Params: L_body=0.349, d_body=0.098, p_max=10.0bar, nozzle_d=0.0087, water_frac=0.344\n</pre> <pre>\nOptimization completed!\nBest flight_time: 9.7498\nBest parameters:\n  L_body: 0.3487\n  d_body: 0.0979\n  p_max_bar: 9.9959\n  nozzle_diameter: 0.0087\n  water_fraction: 0.3442\n</pre> In\u00a0[7]: Copied! <pre># Print comparison table\nprint(f\"\\n{'='*80}\")\nprint(\"COMPARISON OF DIFFERENT TARGETS\")\nprint(f\"{'='*80}\")\n\nprint(\n    f\"{'Target':&lt;12} {'Best Value':&lt;12} {'L_body(cm)':&lt;10} {'d_body(cm)':&lt;10} \"\n    f\"{'P(bar)':&lt;8} {'Nozzle(mm)':&lt;10} {'Water%':&lt;8}\"\n)\nprint(\"-\" * 80)\n\nfor target, result in results.items():\n    params = result[\"best_params\"]\n    print(\n        f\"{target:&lt;12} {result['best_value']:&lt;12.4f} \"\n        f\"{params['L_body']*100:&lt;10.2f} {params['d_body']*100:&lt;10.2f} \"\n        f\"{params['p_max_bar']:&lt;8.2f} {params['nozzle_diameter']*1000:&lt;10.2f} \"\n        f\"{params['water_fraction']*100:&lt;8.1f}\"\n    )\n</pre> # Print comparison table print(f\"\\n{'='*80}\") print(\"COMPARISON OF DIFFERENT TARGETS\") print(f\"{'='*80}\")  print(     f\"{'Target':&lt;12} {'Best Value':&lt;12} {'L_body(cm)':&lt;10} {'d_body(cm)':&lt;10} \"     f\"{'P(bar)':&lt;8} {'Nozzle(mm)':&lt;10} {'Water%':&lt;8}\" ) print(\"-\" * 80)  for target, result in results.items():     params = result[\"best_params\"]     print(         f\"{target:&lt;12} {result['best_value']:&lt;12.4f} \"         f\"{params['L_body']*100:&lt;10.2f} {params['d_body']*100:&lt;10.2f} \"         f\"{params['p_max_bar']:&lt;8.2f} {params['nozzle_diameter']*1000:&lt;10.2f} \"         f\"{params['water_fraction']*100:&lt;8.1f}\"     ) <pre>\n================================================================================\nCOMPARISON OF DIFFERENT TARGETS\n================================================================================\nTarget       Best Value   L_body(cm) d_body(cm) P(bar)   Nozzle(mm) Water%  \n--------------------------------------------------------------------------------\naltitude     113.1028     35.00      10.00      10.00    15.00      32.0    \nvelocity     54.6777      35.00      7.62       10.00    15.00      32.1    \nflight_time  9.7498       34.87      9.79       10.00    8.66       34.4    \n</pre> In\u00a0[8]: Copied! <pre>print(f\"\\n{'='*80}\")\nprint(\"CROSS-PERFORMANCE ANALYSIS\")\nprint(f\"{'='*80}\")\nprint(\n    f\"{'Optimized For':&lt;15} {'Altitude(m)':&lt;12} {'Velocity(m/s)':&lt;13} {'Flight Time(s)':&lt;14}\"\n)\nprint(\"-\" * 80)\n\nfor target, result in results.items():\n    if result[\"best_flight_data\"] is not None:\n        fd = result[\"best_flight_data\"]\n        print(\n            f\"{target:&lt;15} {fd.max_altitude:&lt;12.4f} {fd.max_velocity:&lt;13.4f} {fd.flight_time:&lt;14.4f}\"\n        )\n\nprint(\"\\n\ud83d\udcca Key Observations:\")\nprint(\"\u2022 Different targets lead to different optimal configurations\")\nprint(\"\u2022 There are trade-offs between altitude, velocity, and flight time\")\nprint(\"\u2022 Custom bounds help focus the search on realistic parameter ranges\")\nprint(\"\u2022 The minimize method can be faster for gradient-based optimization\")\n</pre> print(f\"\\n{'='*80}\") print(\"CROSS-PERFORMANCE ANALYSIS\") print(f\"{'='*80}\") print(     f\"{'Optimized For':&lt;15} {'Altitude(m)':&lt;12} {'Velocity(m/s)':&lt;13} {'Flight Time(s)':&lt;14}\" ) print(\"-\" * 80)  for target, result in results.items():     if result[\"best_flight_data\"] is not None:         fd = result[\"best_flight_data\"]         print(             f\"{target:&lt;15} {fd.max_altitude:&lt;12.4f} {fd.max_velocity:&lt;13.4f} {fd.flight_time:&lt;14.4f}\"         )  print(\"\\n\ud83d\udcca Key Observations:\") print(\"\u2022 Different targets lead to different optimal configurations\") print(\"\u2022 There are trade-offs between altitude, velocity, and flight time\") print(\"\u2022 Custom bounds help focus the search on realistic parameter ranges\") print(\"\u2022 The minimize method can be faster for gradient-based optimization\") <pre>\n================================================================================\nCROSS-PERFORMANCE ANALYSIS\n================================================================================\nOptimized For   Altitude(m)  Velocity(m/s) Flight Time(s)\n--------------------------------------------------------------------------------\naltitude        113.1028     54.1999       9.7232        \nvelocity        105.6734     54.6777       9.3610        \nflight_time     108.3814     47.9386       9.7498        \n\n\ud83d\udcca Key Observations:\n\u2022 Different targets lead to different optimal configurations\n\u2022 There are trade-offs between altitude, velocity, and flight time\n\u2022 Custom bounds help focus the search on realistic parameter ranges\n\u2022 The minimize method can be faster for gradient-based optimization\n</pre>"},{"location":"examples/advanced_optimization_example/#advanced-water-rocket-optimization-examples","title":"Advanced Water Rocket Optimization Examples\u00b6","text":"<p>This notebook demonstrates advanced usage of the water rocket optimizer including:</p> <ul> <li>Custom parameter bounds</li> <li>Different optimization targets (altitude, velocity, flight time)</li> <li>Custom optimizer settings</li> <li>Comparison of optimization strategies</li> </ul>"},{"location":"examples/advanced_optimization_example/#helper-function-for-results-display","title":"Helper Function for Results Display\u00b6","text":""},{"location":"examples/advanced_optimization_example/#1-custom-bounds-for-velocity-optimization","title":"1. Custom Bounds for Velocity Optimization\u00b6","text":"<p>Define custom parameter bounds around typical bottle rocket dimensions and optimize for maximum velocity.</p>"},{"location":"examples/advanced_optimization_example/#2-advanced-custom-optimizer-settings","title":"2. Advanced Custom Optimizer Settings\u00b6","text":"<p>Use the <code>WaterRocketOptimizer</code> class directly for more control over simulation settings and optimization parameters.</p>"},{"location":"examples/advanced_optimization_example/#3-flight-time-optimization-with-minimize-method","title":"3. Flight Time Optimization with Minimize Method\u00b6","text":"<p>Use the <code>minimize</code> method with a good initial guess for gradient-based optimization.</p>"},{"location":"examples/advanced_optimization_example/#4-comparison-of-different-optimization-targets","title":"4. Comparison of Different Optimization Targets\u00b6","text":"<p>Compare optimization results for altitude, velocity, and flight time using identical bounds and settings.</p>"},{"location":"examples/advanced_optimization_example/#comparison-table","title":"Comparison Table\u00b6","text":""},{"location":"examples/advanced_optimization_example/#5-performance-analysis","title":"5. Performance Analysis\u00b6","text":"<p>Analyze how each optimized configuration performs across all metrics.</p>"},{"location":"examples/advanced_optimization_example/#summary","title":"Summary\u00b6","text":"<p>This notebook demonstrated advanced optimization techniques:</p> <ol> <li>Custom Bounds: Restrict parameter ranges to realistic values</li> <li>Custom Settings: Use the <code>WaterRocketOptimizer</code> class for fine control</li> <li>Different Methods: Compare <code>differential_evolution</code> vs <code>minimize</code></li> <li>Multi-Objective Analysis: Compare different optimization targets</li> <li>Performance Trade-offs: Understand the relationships between parameters</li> </ol>"},{"location":"examples/advanced_optimization_example/#next-steps","title":"Next Steps\u00b6","text":"<ul> <li>Experiment with different bound ranges</li> <li>Try different optimization algorithms</li> <li>Add constraints for specific design requirements</li> <li>Implement multi-objective optimization</li> </ul>"},{"location":"examples/bare_minimum/","title":"Bare minimum","text":"In\u00a0[1]: Copied! <pre>\"\"\"\nMinimal script to show how the water rocket simulation works.\n\"\"\"\n\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder,RocketConfiguration,create_standard_rocket\n\n#Build\nrocket = create_standard_rocket()\nrocket_sim_params = rocket.to_simulation_params() #Eport to simulation Parameters\n#Simulate\nsimulator = WaterRocketSimulator()\nflight_data = simulator.simulate(rocket_sim_params)\n\nprint(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\")\n</pre> \"\"\" Minimal script to show how the water rocket simulation works. \"\"\"  from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import RocketBuilder,RocketConfiguration,create_standard_rocket  #Build rocket = create_standard_rocket() rocket_sim_params = rocket.to_simulation_params() #Eport to simulation Parameters #Simulate simulator = WaterRocketSimulator() flight_data = simulator.simulate(rocket_sim_params)  print(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\") <pre>Starting water expulsion phase...\nWater depleted at t=0.123s, starting air expulsion phase...\nAir depleted at t=0.199s, starting coasting phase...\nMaximum altitude: 61.45 m\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre> <pre>Smart Rocket Configuration:\n  Volume: 0.001521 m\u00b3\n  Empty Mass: 0.175 kg\n  Drag Coefficient: 0.239\n  Description: Built using build_from_dimensions\nStarting water expulsion phase...\nWater depleted at t=0.186s, starting air expulsion phase...\nAir depleted at t=0.321s, starting coasting phase...\nMaximum altitude: 81.59 m\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/batch_comparison/","title":"Batch comparison","text":"In\u00a0[1]: Copied! <pre>import matplotlib.pyplot as plt\nimport waterrocketpy.rocket.builder \nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import create_competition_rocket,create_high_pressure_rocket,create_standard_rocket\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.core.physics_engine import PhysicsEngine\nimport matplotlib.pyplot as plt\n# Simulate multiple rocket configurations\nrockets = {\n    \"Standard\": create_standard_rocket(),\n    \"High Pressure\": create_competition_rocket(),\n    \"Competition\": create_high_pressure_rocket()\n}\n\nresults = {}\nfor name, rocket in rockets.items():\n    # Run simulation\n    simulator = WaterRocketSimulator(physics_engine=PhysicsEngine())\n    flight_data = simulator.simulate(rocket.to_simulation_params())\n    results[name] = flight_data\n\n# Compare altitudes\nplt.figure(figsize=(12, 8))\n\nplt.subplot(2, 2, 1)\nfor name, data in results.items():\n    plt.plot(data.time, data.altitude, label=name, linewidth=2)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Altitude (m)\")\nplt.title(\"Altitude Comparison\")\nplt.legend()\nplt.grid(True)\n\nplt.subplot(2, 2, 2)\nfor name, data in results.items():\n    plt.plot(data.time, data.velocity, label=name, linewidth=2)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Velocity (m/s)\")\nplt.title(\"Velocity Comparison\")\nplt.legend()\nplt.grid(True)\n\nplt.subplot(2, 2, 3)\nfor name, data in results.items():\n    plt.plot(data.time, data.pressure/1e5, label=name, linewidth=2)\nplt.xlabel(\"Time (s)\")\nplt.ylabel(\"Pressure (bar)\")\nplt.title(\"Pressure Comparison\")\nplt.legend()\nplt.grid(True)\n\nplt.subplot(2, 2, 4)\n# Performance summary\nnames = list(results.keys())\naltitudes = [data.max_altitude for data in results.values()]\nvelocities = [data.max_velocity for data in results.values()]\n\nx = range(len(names))\nwidth = 0.35\nplt.bar([i - width/2 for i in x], altitudes, width, label='Max Altitude (m)', alpha=0.8)\nplt.bar([i + width/2 for i in x], [v/10 for v in velocities], width, label='Max Velocity (m/s \u00d7 10)', alpha=0.8)\nplt.xlabel(\"Rocket Configuration\")\nplt.ylabel(\"Performance\")\nplt.title(\"Performance Summary\")\nplt.xticks(x, names, rotation=45)\nplt.legend()\n\nplt.tight_layout()\nplt.show()\n</pre> import matplotlib.pyplot as plt import waterrocketpy.rocket.builder  from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import create_competition_rocket,create_high_pressure_rocket,create_standard_rocket from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.core.physics_engine import PhysicsEngine import matplotlib.pyplot as plt # Simulate multiple rocket configurations rockets = {     \"Standard\": create_standard_rocket(),     \"High Pressure\": create_competition_rocket(),     \"Competition\": create_high_pressure_rocket() }  results = {} for name, rocket in rockets.items():     # Run simulation     simulator = WaterRocketSimulator(physics_engine=PhysicsEngine())     flight_data = simulator.simulate(rocket.to_simulation_params())     results[name] = flight_data  # Compare altitudes plt.figure(figsize=(12, 8))  plt.subplot(2, 2, 1) for name, data in results.items():     plt.plot(data.time, data.altitude, label=name, linewidth=2) plt.xlabel(\"Time (s)\") plt.ylabel(\"Altitude (m)\") plt.title(\"Altitude Comparison\") plt.legend() plt.grid(True)  plt.subplot(2, 2, 2) for name, data in results.items():     plt.plot(data.time, data.velocity, label=name, linewidth=2) plt.xlabel(\"Time (s)\") plt.ylabel(\"Velocity (m/s)\") plt.title(\"Velocity Comparison\") plt.legend() plt.grid(True)  plt.subplot(2, 2, 3) for name, data in results.items():     plt.plot(data.time, data.pressure/1e5, label=name, linewidth=2) plt.xlabel(\"Time (s)\") plt.ylabel(\"Pressure (bar)\") plt.title(\"Pressure Comparison\") plt.legend() plt.grid(True)  plt.subplot(2, 2, 4) # Performance summary names = list(results.keys()) altitudes = [data.max_altitude for data in results.values()] velocities = [data.max_velocity for data in results.values()]  x = range(len(names)) width = 0.35 plt.bar([i - width/2 for i in x], altitudes, width, label='Max Altitude (m)', alpha=0.8) plt.bar([i + width/2 for i in x], [v/10 for v in velocities], width, label='Max Velocity (m/s \u00d7 10)', alpha=0.8) plt.xlabel(\"Rocket Configuration\") plt.ylabel(\"Performance\") plt.title(\"Performance Summary\") plt.xticks(x, names, rotation=45) plt.legend()  plt.tight_layout() plt.show() <pre>Starting water expulsion phase...\nWater depleted at t=0.123s, starting air expulsion phase...\nAir depleted at t=0.199s, starting coasting phase...\nStarting water expulsion phase...\nWater depleted at t=0.144s, starting air expulsion phase...\nAir depleted at t=0.251s, starting coasting phase...\nStarting water expulsion phase...\nWater depleted at t=0.019s, starting air expulsion phase...\nAir depleted at t=0.053s, starting coasting phase...\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/build_from_dimensions_example/","title":"Build from dimensions example","text":"In\u00a0[1]: Copied! <pre># Import the required modules\nimport sys\nimport numpy as np\nfrom waterrocketpy.rocket.builder import RocketBuilder\nfrom waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE\nimport matplotlib.pyplot as plt\n\n# Optional ---  import for pandas (prettier table formatting)\n# i dont want to force users to install pandas so:\ntry:\n    import pandas as pd\n    HAS_PANDAS = True\nexcept ImportError:\n    HAS_PANDAS = False\n    print(\"Pandas not available - using simple table formatting\")\n    print(\"   To install: pip install waterrocketpy[extra] or pip install pandas\")\n# End Optimal ---\n\ndef format_table(data, headers=None):\n    \"\"\"Format data as a table with or without pandas\"\"\"\n    if HAS_PANDAS and isinstance(data, dict):\n        df = pd.DataFrame(data)\n        return df.to_string(index=False)\n    else:\n        # Simple table formatting without pandas\n        if isinstance(data, dict):\n            headers = list(data.keys())\n            rows = list(zip(*data.values()))\n        else:\n            rows = data\n        \n        # Calculate column widths\n        if headers:\n            col_widths = [len(str(h)) for h in headers]\n            for row in rows:\n                for i, cell in enumerate(row):\n                    col_widths[i] = max(col_widths[i], len(str(cell)))\n        else:\n            col_widths = [max(len(str(cell)) for cell in row) for row in zip(*rows)]\n        \n        # Format table\n        result = []\n        if headers:\n            header_row = \"  \".join(str(h).ljust(w) for h, w in zip(headers, col_widths))\n            result.append(header_row)\n            result.append(\"  \".join(\"-\" * w for w in col_widths))\n        \n        for row in rows:\n            formatted_row = \"  \".join(str(cell).ljust(w) for cell, w in zip(row, col_widths))\n            result.append(formatted_row)\n        \n        return \"\\n\".join(result)\n\nprint(\"\\nWaterRocketPy build_from_dimensions Example\")\nprint(\"==========================================\")\n</pre> # Import the required modules import sys import numpy as np from waterrocketpy.rocket.builder import RocketBuilder from waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE import matplotlib.pyplot as plt  # Optional ---  import for pandas (prettier table formatting) # i dont want to force users to install pandas so: try:     import pandas as pd     HAS_PANDAS = True except ImportError:     HAS_PANDAS = False     print(\"Pandas not available - using simple table formatting\")     print(\"   To install: pip install waterrocketpy[extra] or pip install pandas\") # End Optimal ---  def format_table(data, headers=None):     \"\"\"Format data as a table with or without pandas\"\"\"     if HAS_PANDAS and isinstance(data, dict):         df = pd.DataFrame(data)         return df.to_string(index=False)     else:         # Simple table formatting without pandas         if isinstance(data, dict):             headers = list(data.keys())             rows = list(zip(*data.values()))         else:             rows = data                  # Calculate column widths         if headers:             col_widths = [len(str(h)) for h in headers]             for row in rows:                 for i, cell in enumerate(row):                     col_widths[i] = max(col_widths[i], len(str(cell)))         else:             col_widths = [max(len(str(cell)) for cell in row) for row in zip(*rows)]                  # Format table         result = []         if headers:             header_row = \"  \".join(str(h).ljust(w) for h, w in zip(headers, col_widths))             result.append(header_row)             result.append(\"  \".join(\"-\" * w for w in col_widths))                  for row in rows:             formatted_row = \"  \".join(str(cell).ljust(w) for cell, w in zip(row, col_widths))             result.append(formatted_row)                  return \"\\n\".join(result)  print(\"\\nWaterRocketPy build_from_dimensions Example\") print(\"==========================================\") <pre>Pandas not available - using simple table formatting\n   To install: pip install waterrocketpy[extra] or pip install pandas\n\nWaterRocketPy build_from_dimensions Example\n==========================================\n</pre> In\u00a0[2]: Copied! <pre># Manual approach - you have to calculate everything yourself!\nmanual_builder = RocketBuilder()\n\n# You would need to manually calculate:\n# - Bottle volume from dimensions\n# - Empty mass from material properties\n# - Drag coefficient from complex aerodynamics\n# - Reference area from geometry\n# - Ensure all parameters are consistent\n\nmanual_config = (manual_builder\n    .set_bottle(volume=0.00138, diameter=0.088)  # Guessed volume!\n    .set_nozzle(diameter=0.01)\n    .set_mass(empty_mass=0.085, water_fraction=0.3)  # Guessed mass!\n    .set_aerodynamics(drag_coefficient=0.5)  # Guessed drag!\n    .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)\n    .set_metadata(\"Manual Rocket\", \"Built with manual parameter guessing\")\n    .build()\n)\n\nprint(\"Manual Rocket Configuration:\")\nprint(f\"  Volume: {manual_config.bottle_volume:.6f} m\u00b3\")\nprint(f\"  Empty Mass: {manual_config.empty_mass:.3f} kg\")\nprint(f\"  Drag Coefficient: {manual_config.drag_coefficient:.3f}\")\nprint(f\"  Description: {manual_config.description}\")\nprint()\n</pre> # Manual approach - you have to calculate everything yourself! manual_builder = RocketBuilder()  # You would need to manually calculate: # - Bottle volume from dimensions # - Empty mass from material properties # - Drag coefficient from complex aerodynamics # - Reference area from geometry # - Ensure all parameters are consistent  manual_config = (manual_builder     .set_bottle(volume=0.00138, diameter=0.088)  # Guessed volume!     .set_nozzle(diameter=0.01)     .set_mass(empty_mass=0.085, water_fraction=0.3)  # Guessed mass!     .set_aerodynamics(drag_coefficient=0.5)  # Guessed drag!     .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)     .set_metadata(\"Manual Rocket\", \"Built with manual parameter guessing\")     .build() )  print(\"Manual Rocket Configuration:\") print(f\"  Volume: {manual_config.bottle_volume:.6f} m\u00b3\") print(f\"  Empty Mass: {manual_config.empty_mass:.3f} kg\") print(f\"  Drag Coefficient: {manual_config.drag_coefficient:.3f}\") print(f\"  Description: {manual_config.description}\") print() <pre>Manual Rocket Configuration:\n  Volume: 0.001380 m\u00b3\n  Empty Mass: 0.085 kg\n  Drag Coefficient: 0.500\n  Description: Built with manual parameter guessing\n\n</pre> In\u00a0[3]: Copied! <pre># Smart approach - specify dimensions, let the function calculate everything!\nsmart_builder = RocketBuilder()\n\nsmart_config = (smart_builder\n    .build_from_dimensions(\n        L_body=0.25,           # 25 cm body length\n        L_cone=0.08,           # 8 cm nose cone length  \n        d_body=0.088,          # 88 mm diameter (standard 2L bottle)\n        p_max=8 * ATMOSPHERIC_PRESSURE,  # 8 bar maximum pressure\n        nozzle_diameter=0.01,  # 10 mm nozzle diameter\n        material_name=\"PET\",   # PET plastic material\n        water_fraction=0.3,    # 30% water fill\n        safety_factor=2.0      # 2x safety factor\n    )\n    .set_metadata(\"Smart Rocket\", \"Built using build_from_dimensions\")\n    .build()\n)\n\nprint(\"Smart Rocket Configuration:\")\nprint(f\"  Volume: {smart_config.bottle_volume:.6f} m\u00b3\")\nprint(f\"  Empty Mass: {smart_config.empty_mass:.3f} kg\")\nprint(f\"  Drag Coefficient: {smart_config.drag_coefficient:.3f}\")\nprint(f\"  Description: {smart_config.description}\")\nprint()\n</pre> # Smart approach - specify dimensions, let the function calculate everything! smart_builder = RocketBuilder()  smart_config = (smart_builder     .build_from_dimensions(         L_body=0.25,           # 25 cm body length         L_cone=0.08,           # 8 cm nose cone length           d_body=0.088,          # 88 mm diameter (standard 2L bottle)         p_max=8 * ATMOSPHERIC_PRESSURE,  # 8 bar maximum pressure         nozzle_diameter=0.01,  # 10 mm nozzle diameter         material_name=\"PET\",   # PET plastic material         water_fraction=0.3,    # 30% water fill         safety_factor=2.0      # 2x safety factor     )     .set_metadata(\"Smart Rocket\", \"Built using build_from_dimensions\")     .build() )  print(\"Smart Rocket Configuration:\") print(f\"  Volume: {smart_config.bottle_volume:.6f} m\u00b3\") print(f\"  Empty Mass: {smart_config.empty_mass:.3f} kg\") print(f\"  Drag Coefficient: {smart_config.drag_coefficient:.3f}\") print(f\"  Description: {smart_config.description}\") print() <pre>Smart Rocket Configuration:\n  Volume: 0.001521 m\u00b3\n  Empty Mass: 0.175 kg\n  Drag Coefficient: 0.239\n  Description: Built using build_from_dimensions\n\n</pre> In\u00a0[4]: Copied! <pre># Create a comparison table\ncomparison_data = {\n    'Parameter': [\n        'Bottle Volume (m\u00b3)',\n        'Empty Mass (kg)', \n        'Drag Coefficient',\n        'Reference Area (m\u00b2)',\n        'Water Mass (kg)',\n        'Total Mass (kg)'\n    ],\n    'Manual Approach': [\n        f\"{manual_config.bottle_volume:.6f}\",\n        f\"{manual_config.empty_mass:.3f}\",\n        f\"{manual_config.drag_coefficient:.3f}\",\n        f\"{manual_config.reference_area:.6f}\",\n        f\"{manual_config.water_mass:.3f}\",\n        f\"{manual_config.total_mass:.3f}\"\n    ],\n    'build_from_dimensions': [\n        f\"{smart_config.bottle_volume:.6f}\",\n        f\"{smart_config.empty_mass:.3f}\",\n        f\"{smart_config.drag_coefficient:.3f}\",\n        f\"{smart_config.reference_area:.6f}\",\n        f\"{smart_config.water_mass:.3f}\",\n        f\"{smart_config.total_mass:.3f}\"\n    ]\n}\n\nprint(\"\\nComparison of Manual vs build_from_dimensions:\")\nprint(\"==============================================\")\nprint(format_table(comparison_data))\nprint()\n</pre> # Create a comparison table comparison_data = {     'Parameter': [         'Bottle Volume (m\u00b3)',         'Empty Mass (kg)',          'Drag Coefficient',         'Reference Area (m\u00b2)',         'Water Mass (kg)',         'Total Mass (kg)'     ],     'Manual Approach': [         f\"{manual_config.bottle_volume:.6f}\",         f\"{manual_config.empty_mass:.3f}\",         f\"{manual_config.drag_coefficient:.3f}\",         f\"{manual_config.reference_area:.6f}\",         f\"{manual_config.water_mass:.3f}\",         f\"{manual_config.total_mass:.3f}\"     ],     'build_from_dimensions': [         f\"{smart_config.bottle_volume:.6f}\",         f\"{smart_config.empty_mass:.3f}\",         f\"{smart_config.drag_coefficient:.3f}\",         f\"{smart_config.reference_area:.6f}\",         f\"{smart_config.water_mass:.3f}\",         f\"{smart_config.total_mass:.3f}\"     ] }  print(\"\\nComparison of Manual vs build_from_dimensions:\") print(\"==============================================\") print(format_table(comparison_data)) print() <pre>\nComparison of Manual vs build_from_dimensions:\n==============================================\nParameter            Manual Approach  build_from_dimensions\n-------------------  ---------------  ---------------------\nBottle Volume (m\u00b3)   0.001380         0.001521             \nEmpty Mass (kg)      0.085            0.175                \nDrag Coefficient     0.500            0.239                \nReference Area (m\u00b2)  0.007854         0.006082             \nWater Mass (kg)      0.414            0.456                \nTotal Mass (kg)      0.499            0.631                \n\n</pre> In\u00a0[5]: Copied! <pre># Build multiple rocket configurations\nrockets = []\n\n# Small rocket (1L bottle equivalent)\nsmall_rocket = (RocketBuilder()\n    .build_from_dimensions(\n        L_body=0.20, L_cone=0.06, d_body=0.075,\n        p_max=6 * ATMOSPHERIC_PRESSURE,\n        nozzle_diameter=0.008,\n        material_name=\"PET\"\n    )\n    .set_metadata(\"Small Rocket\", \"1L bottle equivalent\")\n    .build()\n)\n\n# Standard rocket (2L bottle equivalent)\nstandard_rocket = smart_config  # We already built this one\n\n# Large rocket (3L bottle equivalent)\nlarge_rocket = (RocketBuilder()\n    .build_from_dimensions(\n        L_body=0.35, L_cone=0.12, d_body=0.10,\n        p_max=10 * ATMOSPHERIC_PRESSURE,\n        nozzle_diameter=0.012,\n        material_name=\"PET\",\n        water_fraction=0.35\n    )\n    .set_metadata(\"Large Rocket\", \"3L bottle equivalent\")\n    .build()\n)\n\nrockets = [small_rocket, standard_rocket, large_rocket]\n\n# Create comparison\nrocket_comparison = {\n    'Rocket': ['Small (1L)', 'Standard (2L)', 'Large (3L)'],\n    'Volume (L)': [f\"{r.bottle_volume * 1000:.1f}\" for r in rockets],\n    'Empty Mass (g)': [f\"{r.empty_mass * 1000:.1f}\" for r in rockets],\n    'Water Mass (g)': [f\"{r.water_mass * 1000:.1f}\" for r in rockets],\n    'Drag Coefficient': [f\"{r.drag_coefficient:.3f}\" for r in rockets],\n    'Total Mass (g)': [f\"{r.total_mass * 1000:.1f}\" for r in rockets]\n}\n\nprint(\"\\nMultiple Rocket Configurations built with build_from_dimensions:\")\nprint(\"===============================================================\")\nprint(format_table(rocket_comparison))\n</pre> # Build multiple rocket configurations rockets = []  # Small rocket (1L bottle equivalent) small_rocket = (RocketBuilder()     .build_from_dimensions(         L_body=0.20, L_cone=0.06, d_body=0.075,         p_max=6 * ATMOSPHERIC_PRESSURE,         nozzle_diameter=0.008,         material_name=\"PET\"     )     .set_metadata(\"Small Rocket\", \"1L bottle equivalent\")     .build() )  # Standard rocket (2L bottle equivalent) standard_rocket = smart_config  # We already built this one  # Large rocket (3L bottle equivalent) large_rocket = (RocketBuilder()     .build_from_dimensions(         L_body=0.35, L_cone=0.12, d_body=0.10,         p_max=10 * ATMOSPHERIC_PRESSURE,         nozzle_diameter=0.012,         material_name=\"PET\",         water_fraction=0.35     )     .set_metadata(\"Large Rocket\", \"3L bottle equivalent\")     .build() )  rockets = [small_rocket, standard_rocket, large_rocket]  # Create comparison rocket_comparison = {     'Rocket': ['Small (1L)', 'Standard (2L)', 'Large (3L)'],     'Volume (L)': [f\"{r.bottle_volume * 1000:.1f}\" for r in rockets],     'Empty Mass (g)': [f\"{r.empty_mass * 1000:.1f}\" for r in rockets],     'Water Mass (g)': [f\"{r.water_mass * 1000:.1f}\" for r in rockets],     'Drag Coefficient': [f\"{r.drag_coefficient:.3f}\" for r in rockets],     'Total Mass (g)': [f\"{r.total_mass * 1000:.1f}\" for r in rockets] }  print(\"\\nMultiple Rocket Configurations built with build_from_dimensions:\") print(\"===============================================================\") print(format_table(rocket_comparison)) <pre>\nMultiple Rocket Configurations built with build_from_dimensions:\n===============================================================\nRocket         Volume (L)  Empty Mass (g)  Water Mass (g)  Drag Coefficient  Total Mass (g)\n-------------  ----------  --------------  --------------  ----------------  --------------\nSmall (1L)     0.9         89.0            291.6           0.247             380.5         \nStandard (2L)  1.5         174.8           456.2           0.239             630.9         \nLarge (3L)     2.7         355.3           962.1           0.246             1317.4        \n</pre> In\u00a0[6]: Copied! <pre># Create a stacked bar chart showing mass breakdown\nfig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))\n\n# Mass breakdown\nrocket_names = ['Small (1L)', 'Standard (2L)', 'Large (3L)']\nempty_masses = [r.empty_mass * 1000 for r in rockets]  # Convert to grams\nwater_masses = [r.water_mass * 1000 for r in rockets]\n\nx = np.arange(len(rocket_names))\nwidth = 0.6\n\nax1.bar(x, empty_masses, width, label='Empty Mass', alpha=0.8)\nax1.bar(x, water_masses, width, bottom=empty_masses, label='Water Mass', alpha=0.8)\n\nax1.set_xlabel('Rocket Configuration')\nax1.set_ylabel('Mass (g)')\nax1.set_title('Mass Breakdown by Rocket Size')\nax1.set_xticks(x)\nax1.set_xticklabels(rocket_names)\nax1.legend()\nax1.grid(True, alpha=0.3)\n\n# Drag coefficient comparison\ndrag_coeffs = [r.drag_coefficient for r in rockets]\n\nax2.bar(x, drag_coeffs, width, alpha=0.8, color='orange')\nax2.set_xlabel('Rocket Configuration')\nax2.set_ylabel('Drag Coefficient')\nax2.set_title('Calculated Drag Coefficients')\nax2.set_xticks(x)\nax2.set_xticklabels(rocket_names)\nax2.grid(True, alpha=0.3)\n\nplt.tight_layout()\nplt.show()\n\nprint(\"Notice how the drag coefficient changes with rocket size!\")\nprint(\"This is automatically calculated based on the length-to-diameter ratio.\")\n</pre> # Create a stacked bar chart showing mass breakdown fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(12, 5))  # Mass breakdown rocket_names = ['Small (1L)', 'Standard (2L)', 'Large (3L)'] empty_masses = [r.empty_mass * 1000 for r in rockets]  # Convert to grams water_masses = [r.water_mass * 1000 for r in rockets]  x = np.arange(len(rocket_names)) width = 0.6  ax1.bar(x, empty_masses, width, label='Empty Mass', alpha=0.8) ax1.bar(x, water_masses, width, bottom=empty_masses, label='Water Mass', alpha=0.8)  ax1.set_xlabel('Rocket Configuration') ax1.set_ylabel('Mass (g)') ax1.set_title('Mass Breakdown by Rocket Size') ax1.set_xticks(x) ax1.set_xticklabels(rocket_names) ax1.legend() ax1.grid(True, alpha=0.3)  # Drag coefficient comparison drag_coeffs = [r.drag_coefficient for r in rockets]  ax2.bar(x, drag_coeffs, width, alpha=0.8, color='orange') ax2.set_xlabel('Rocket Configuration') ax2.set_ylabel('Drag Coefficient') ax2.set_title('Calculated Drag Coefficients') ax2.set_xticks(x) ax2.set_xticklabels(rocket_names) ax2.grid(True, alpha=0.3)  plt.tight_layout() plt.show()  print(\"Notice how the drag coefficient changes with rocket size!\") print(\"This is automatically calculated based on the length-to-diameter ratio.\") <pre>Notice how the drag coefficient changes with rocket size!\nThis is automatically calculated based on the length-to-diameter ratio.\n</pre> In\u00a0[7]: Copied! <pre># Build the same rocket with different materials\nmaterials = ['PET', 'Aluminum', 'Carbon_Fiber']\nmaterial_rockets = []\n\nfor material in materials:\n    try:\n        rocket = (RocketBuilder()\n            .build_from_dimensions(\n                L_body=0.25, L_cone=0.08, d_body=0.088,\n                p_max=8 * ATMOSPHERIC_PRESSURE,\n                nozzle_diameter=0.01,\n                material_name=material,\n                water_fraction=0.3\n            )\n            .set_metadata(f\"{material} Rocket\", f\"Built with {material}\")\n            .build()\n        )\n        material_rockets.append(rocket)\n    except ValueError as e:\n        print(f\"Warning: {material} not available in material database: {e}\")\n        continue\n\nif material_rockets:\n    # Compare materials\n    material_comparison = {\n        'Material': [r.name.split()[0] for r in material_rockets],\n        'Empty Mass (g)': [f\"{r.empty_mass * 1000:.1f}\" for r in material_rockets],\n        'Total Mass (g)': [f\"{r.total_mass * 1000:.1f}\" for r in material_rockets],\n        'Volume (L)': [f\"{r.bottle_volume * 1000:.1f}\" for r in material_rockets]\n    }\n    \n    print(\"\\nMaterial Comparison (same dimensions, different materials):\")\n    print(\"=========================================================\")\n    print(format_table(material_comparison))\n    print(\"\\nNotice how different materials result in different masses!\")\n    print(\"The function automatically calculates wall thickness based on material strength.\")\nelse:\n    print(\"Only PET material is currently available in the database.\")\n</pre> # Build the same rocket with different materials materials = ['PET', 'Aluminum', 'Carbon_Fiber'] material_rockets = []  for material in materials:     try:         rocket = (RocketBuilder()             .build_from_dimensions(                 L_body=0.25, L_cone=0.08, d_body=0.088,                 p_max=8 * ATMOSPHERIC_PRESSURE,                 nozzle_diameter=0.01,                 material_name=material,                 water_fraction=0.3             )             .set_metadata(f\"{material} Rocket\", f\"Built with {material}\")             .build()         )         material_rockets.append(rocket)     except ValueError as e:         print(f\"Warning: {material} not available in material database: {e}\")         continue  if material_rockets:     # Compare materials     material_comparison = {         'Material': [r.name.split()[0] for r in material_rockets],         'Empty Mass (g)': [f\"{r.empty_mass * 1000:.1f}\" for r in material_rockets],         'Total Mass (g)': [f\"{r.total_mass * 1000:.1f}\" for r in material_rockets],         'Volume (L)': [f\"{r.bottle_volume * 1000:.1f}\" for r in material_rockets]     }          print(\"\\nMaterial Comparison (same dimensions, different materials):\")     print(\"=========================================================\")     print(format_table(material_comparison))     print(\"\\nNotice how different materials result in different masses!\")     print(\"The function automatically calculates wall thickness based on material strength.\") else:     print(\"Only PET material is currently available in the database.\") <pre>\nMaterial Comparison (same dimensions, different materials):\n=========================================================\nMaterial      Empty Mass (g)  Total Mass (g)  Volume (L)\n------------  --------------  --------------  ----------\nPET           174.8           630.9           1.5       \nAluminum      149.2           605.3           1.5       \nCarbon_Fiber  62.1            518.3           1.5       \n\nNotice how different materials result in different masses!\nThe function automatically calculates wall thickness based on material strength.\n</pre>"},{"location":"examples/build_from_dimensions_example/#using-build_from_dimensions","title":"Using build_from_dimensions:\u00b6","text":"<p>This notebook demonstrates how to use the <code>build_from_dimensions</code> function from the WaterRocketPy library. This approach is superior to manually entering rocket dimensions because it automatically calculates all the complex interdependent parameters for you.</p>"},{"location":"examples/build_from_dimensions_example/#why-build_from_dimensions-is-superior","title":"Why build_from_dimensions is Superior\u00b6","text":"<p>When you manually specify rocket parameters, you need to:</p> <ol> <li>Calculate wall thickness based on pressure, material, and safety factors</li> <li>Calculate bottle volume from geometry</li> <li>Calculate mass from material properties and geometry</li> <li>Calculate drag coefficient using complex aerodynamic formulas</li> <li>Calculate surface areas for reference area</li> <li>Ensure consistency between all parameters</li> </ol> <p>The <code>build_from_dimensions</code> function does all of this automatically and ensures physical consistency!</p>"},{"location":"examples/build_from_dimensions_example/#method-1-manual-parameter-entry-the-hard-way","title":"Method 1: Manual Parameter Entry (The Hard Way)\u00b6","text":"<p>First, let's see what happens when you try to build a rocket manually by specifying individual parameters:</p>"},{"location":"examples/build_from_dimensions_example/#method-2-build_from_dimensions-the-smart-way","title":"Method 2: build_from_dimensions (The Smart Way)\u00b6","text":"<p>Now let's build the same rocket using <code>build_from_dimensions</code>. You just specify the physical dimensions and let the function calculate everything else!</p>"},{"location":"examples/build_from_dimensions_example/#comparison-manual-vs-build_from_dimensions","title":"Comparison: Manual vs build_from_dimensions\u00b6","text":"<p>Let's compare the two approaches and see the differences:</p>"},{"location":"examples/build_from_dimensions_example/#key-advantages-of-build_from_dimensions","title":"Key Advantages of build_from_dimensions\u00b6","text":""},{"location":"examples/build_from_dimensions_example/#1-automatic-wall-thickness-calculation","title":"1. Automatic Wall Thickness Calculation\u00b6","text":"<p>The function calculates the required wall thickness based on:</p> <ul> <li>Maximum pressure</li> <li>Material properties (yield strength, etc.)</li> <li>Safety factor</li> <li>Geometry (diameter)</li> </ul>"},{"location":"examples/build_from_dimensions_example/#2-accurate-mass-calculation","title":"2. Accurate Mass Calculation\u00b6","text":"<p>Instead of guessing, it calculates mass from:</p> <ul> <li>Material density</li> <li>Calculated wall thickness</li> <li>Actual geometry (body + nose cone)</li> </ul>"},{"location":"examples/build_from_dimensions_example/#3-physics-based-drag-coefficient","title":"3. Physics-Based Drag Coefficient\u00b6","text":"<p>Uses real aerodynamic formulas considering:</p> <ul> <li>Reynolds number</li> <li>Friction coefficients (laminar + turbulent)</li> <li>Wetted surface area</li> <li>Length-to-diameter ratio</li> </ul>"},{"location":"examples/build_from_dimensions_example/#4-guaranteed-consistency","title":"4. Guaranteed Consistency\u00b6","text":"<p>All parameters are calculated from the same dimensional inputs, ensuring they're physically consistent with each other.</p>"},{"location":"examples/build_from_dimensions_example/#example-building-different-rocket-configurations","title":"Example: Building Different Rocket Configurations\u00b6","text":"<p>Here I build several rockets with different dimensions to show the flexibility: Notice, how the</p>"},{"location":"examples/build_from_dimensions_example/#visualization-mass-breakdown","title":"Visualization: Mass Breakdown\u00b6","text":"<p>Let's visualize how the mass is distributed across different rocket sizes:</p>"},{"location":"examples/build_from_dimensions_example/#advanced-example-material-comparison","title":"Advanced Example: Material Comparison\u00b6","text":"<p>The <code>build_from_dimensions</code> function can use different materials. Let's compare the same rocket built with different materials:</p>"},{"location":"examples/build_from_dimensions_example/#summary-why-build_from_dimensions-is-superior","title":"Summary: Why build_from_dimensions is Superior\u00b6","text":""},{"location":"examples/build_from_dimensions_example/#advantages-of-build_from_dimensions","title":"Advantages of build_from_dimensions:\u00b6","text":"<ol> <li>Automatic calculations - No need to manually compute complex physics</li> <li>Physical consistency - All parameters are derived from the same inputs</li> </ol>"},{"location":"examples/build_from_dimensions_example/#best-practice","title":"Best Practice:\u00b6","text":"<p>Always use <code>build_from_dimensions</code> when you know the physical dimensions of your rocket. Only use manual parameter entry for theoretical studies or when working with non-standard configurations that don't fit the dimensional model (might not be phycally realistic).</p>"},{"location":"examples/flight_data_visualization/","title":"Flight data visualization","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\nfrom matplotlib.gridspec import GridSpec\nimport matplotlib.patches as patches\n\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder, create_standard_rocket\nfrom waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE, INITIAL_TEMPERATURE\nfrom waterrocketpy.visualization.plot_flight_data import (\n    setup_plot_style,\n    identify_flight_phases,\n    plot_trajectory_and_velocity,\n    plot_forces_and_acceleration,\n    plot_propellant_and_pressure,\n    plot_exhaust_properties,\n    plot_air_exit_conditions,\n    print_flight_summary\n)\n\nprint(\"\u2713 All imports successful!\")\n</pre> import numpy as np import matplotlib.pyplot as plt from matplotlib.gridspec import GridSpec import matplotlib.patches as patches  from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import RocketBuilder, create_standard_rocket from waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE, INITIAL_TEMPERATURE from waterrocketpy.visualization.plot_flight_data import (     setup_plot_style,     identify_flight_phases,     plot_trajectory_and_velocity,     plot_forces_and_acceleration,     plot_propellant_and_pressure,     plot_exhaust_properties,     plot_air_exit_conditions,     print_flight_summary )  print(\"\u2713 All imports successful!\") <pre>\u2713 All imports successful!\n</pre> In\u00a0[2]: Copied! <pre># Setup plotting style for consistent, professional plots\nsetup_plot_style()\n\nprint(\"\u2713 Plot style configured\")\n</pre> # Setup plotting style for consistent, professional plots setup_plot_style()  print(\"\u2713 Plot style configured\") <pre>\u2713 Plot style configured\n</pre> In\u00a0[3]: Copied! <pre># Create a standard rocket configuration\nprint(\"Creating standard rocket...\")\nrocket = create_standard_rocket()\n\nprint(f\"\u2713 Rocket created: {rocket.name}\")\nprint(f\"  - Empty mass: {rocket.empty_mass:.3f} kg\")\nprint(f\"  - Water fraction: {rocket.water_fraction:.3f}\")\nprint(f\"  - Initial pressure: {rocket.initial_pressure:.0f} Pa\")\nprint(f\"  - Nozzle diameter: {rocket.nozzle_diameter*1000:.2f} mm\")\n</pre> # Create a standard rocket configuration print(\"Creating standard rocket...\") rocket = create_standard_rocket()  print(f\"\u2713 Rocket created: {rocket.name}\") print(f\"  - Empty mass: {rocket.empty_mass:.3f} kg\") print(f\"  - Water fraction: {rocket.water_fraction:.3f}\") print(f\"  - Initial pressure: {rocket.initial_pressure:.0f} Pa\") print(f\"  - Nozzle diameter: {rocket.nozzle_diameter*1000:.2f} mm\") <pre>Creating standard rocket...\n\u2713 Rocket created: Standard 2L Rocket\n  - Empty mass: 0.250 kg\n  - Water fraction: 0.330\n  - Initial pressure: 810600 Pa\n  - Nozzle diameter: 15.00 mm\n</pre> In\u00a0[4]: Copied! <pre># Convert rocket to simulation parameters\nprint(\"Setting up simulation...\")\nbuilder = RocketBuilder.from_dict(rocket.__dict__)\nsim_params = builder.to_simulation_params()\n\n# Create simulator and define settings\nsimulator = WaterRocketSimulator()\nsim_settings = {\n    \"max_time\": 100.0,    # Maximum simulation time (seconds)\n    \"time_step\": 0.01,    # Time step for integration (seconds)\n    \"solver\": \"RK45\"      # Numerical integration method\n}\n\nprint(\"Running simulation...\")\nflight_data = simulator.simulate(sim_params, sim_settings)\n\nprint(f\"\u2713 Simulation completed! {len(flight_data.time)} data points generated\")\nprint(f\"  - Flight duration: {flight_data.time[-1]:.2f} seconds\")\nprint(f\"  - Maximum altitude: {max(flight_data.altitude):.2f} meters\")\n</pre> # Convert rocket to simulation parameters print(\"Setting up simulation...\") builder = RocketBuilder.from_dict(rocket.__dict__) sim_params = builder.to_simulation_params()  # Create simulator and define settings simulator = WaterRocketSimulator() sim_settings = {     \"max_time\": 100.0,    # Maximum simulation time (seconds)     \"time_step\": 0.01,    # Time step for integration (seconds)     \"solver\": \"RK45\"      # Numerical integration method }  print(\"Running simulation...\") flight_data = simulator.simulate(sim_params, sim_settings)  print(f\"\u2713 Simulation completed! {len(flight_data.time)} data points generated\") print(f\"  - Flight duration: {flight_data.time[-1]:.2f} seconds\") print(f\"  - Maximum altitude: {max(flight_data.altitude):.2f} meters\") <pre>Setting up simulation...\nRunning simulation...\nStarting water expulsion phase...\nWater depleted at t=0.123s, starting air expulsion phase...\nAir depleted at t=0.199s, starting coasting phase...\n\u2713 Simulation completed! 752 data points generated\n  - Flight duration: 7.19 seconds\n  - Maximum altitude: 61.45 meters\n</pre> In\u00a0[5]: Copied! <pre># Identify flight phases\nprint(\"Analyzing flight phases...\")\nphases = identify_flight_phases(flight_data)\n\n# Print detailed flight summary\nprint_flight_summary(flight_data, phases)\n</pre> # Identify flight phases print(\"Analyzing flight phases...\") phases = identify_flight_phases(flight_data)  # Print detailed flight summary print_flight_summary(flight_data, phases) <pre>Analyzing flight phases...\n\n============================================================\nWATER ROCKET FLIGHT ANALYSIS SUMMARY\n============================================================\n\nFlight Performance:\n------------------\n  Maximum Altitude         : 61.45 m\n  Maximum Velocity         : 44.60 m/s\n  Total Flight Time        : 7.19 s\n  Time to Apogee           : 3.29 s\n\nPhase Durations:\n---------------\n  Water Phase              : 0.12 s\n  Air Phase                : 0.08 s\n  Coasting Phase           : 6.99 s\n\nInitial Conditions:\n------------------\n  Initial Water Mass       : 660.0 g\n  Initial Air Mass         : 12.6 g\n  Initial Pressure         : 8.11 bar\n  Initial Temperature      : 300.0 K\n\n============================================================\n</pre> In\u00a0[6]: Copied! <pre># Create trajectory and velocity plots\nprint(\"Generating trajectory and velocity plots...\")\nfig1 = plot_trajectory_and_velocity(flight_data, phases)\nplt.show()\n</pre> # Create trajectory and velocity plots print(\"Generating trajectory and velocity plots...\") fig1 = plot_trajectory_and_velocity(flight_data, phases) plt.show() <pre>Generating trajectory and velocity plots...\n</pre> In\u00a0[7]: Copied! <pre># Create forces and acceleration plots\nprint(\"Generating forces and acceleration plots...\")\nfig2 = plot_forces_and_acceleration(flight_data, phases)\nplt.show()\n</pre> # Create forces and acceleration plots print(\"Generating forces and acceleration plots...\") fig2 = plot_forces_and_acceleration(flight_data, phases) plt.show() <pre>Generating forces and acceleration plots...\n</pre> In\u00a0[8]: Copied! <pre># Create propellant and pressure plots with zoomed-in x-axis\nprint(\"Generating propellant and pressure plots...\")\nfig3 = plot_propellant_and_pressure(flight_data, phases)\n\n# Zoom in on x-axis to show only until the end of air exhaust phase\n# Get the end time of the air phase from phases data\nair_end_time = phases.get('air_end_time', phases.get('thrust_end_time', 1.0))\n\n# Apply zoom to all subplots in the figure\nfor ax in fig3.get_axes():\n    ax.set_xlim(0, air_end_time * 1.1)  # Add 10% margin for better visibility\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\u2713 Propellant and pressure plot zoomed to t = {air_end_time:.3f}s (end of air phase)\")\n</pre> # Create propellant and pressure plots with zoomed-in x-axis print(\"Generating propellant and pressure plots...\") fig3 = plot_propellant_and_pressure(flight_data, phases)  # Zoom in on x-axis to show only until the end of air exhaust phase # Get the end time of the air phase from phases data air_end_time = phases.get('air_end_time', phases.get('thrust_end_time', 1.0))  # Apply zoom to all subplots in the figure for ax in fig3.get_axes():     ax.set_xlim(0, air_end_time * 1.1)  # Add 10% margin for better visibility  plt.tight_layout() plt.show()  print(f\"\u2713 Propellant and pressure plot zoomed to t = {air_end_time:.3f}s (end of air phase)\") <pre>Generating propellant and pressure plots...\n</pre> <pre>\u2713 Propellant and pressure plot zoomed to t = 1.000s (end of air phase)\n</pre> In\u00a0[9]: Copied! <pre># Create exhaust properties plots with zoomed-in x-axis\nprint(\"Generating exhaust properties plots...\")\nfig4 = plot_exhaust_properties(flight_data, phases)\n\n# Zoom in on x-axis to show only until the end of air exhaust phase\n# Get the end time of the air phase from phases data\nair_end_time = phases.get('air_end_time', phases.get('thrust_end_time', 1.0))\n\n# Apply zoom to all subplots in the figure\nfor ax in fig4.get_axes():\n    ax.set_xlim(0, air_end_time * 1.1)  # Add 10% margin for better visibility\n\nplt.tight_layout()\nplt.show()\n\nprint(f\"\u2713 Exhaust properties plot zoomed to t = {air_end_time:.3f}s (end of air phase)\")\n</pre> # Create exhaust properties plots with zoomed-in x-axis print(\"Generating exhaust properties plots...\") fig4 = plot_exhaust_properties(flight_data, phases)  # Zoom in on x-axis to show only until the end of air exhaust phase # Get the end time of the air phase from phases data air_end_time = phases.get('air_end_time', phases.get('thrust_end_time', 1.0))  # Apply zoom to all subplots in the figure for ax in fig4.get_axes():     ax.set_xlim(0, air_end_time * 1.1)  # Add 10% margin for better visibility  plt.tight_layout() plt.show()  print(f\"\u2713 Exhaust properties plot zoomed to t = {air_end_time:.3f}s (end of air phase)\") <pre>Generating exhaust properties plots...\n</pre> <pre>\u2713 Exhaust properties plot zoomed to t = 1.000s (end of air phase)\n</pre> In\u00a0[10]: Copied! <pre># Create air exit conditions plots\nprint(\"Generating air exit conditions plots...\")\nfig5 = plot_air_exit_conditions(flight_data, phases)\nplt.show()\n</pre> # Create air exit conditions plots print(\"Generating air exit conditions plots...\") fig5 = plot_air_exit_conditions(flight_data, phases) plt.show() <pre>Generating air exit conditions plots...\n</pre>"},{"location":"examples/flight_data_visualization/#flight-data-visualization-example","title":"Flight Data Visualization Example\u00b6","text":"<p>This notebook demonstrates comprehensive flight data visualization for water rocket simulations. You'll learn how to:</p> <ul> <li>Run a complete water rocket simulation</li> <li>Identify different flight phases (thrust, ballistic, descent)</li> <li>Create multiple organized plots showing all aspects of flight performance</li> <li>Analyze trajectory, forces, propellant usage, and exhaust properties</li> </ul>"},{"location":"examples/flight_data_visualization/#setup-and-imports","title":"Setup and Imports\u00b6","text":""},{"location":"examples/flight_data_visualization/#setup-plotting-style","title":"Setup Plotting Style\u00b6","text":"<p>Configure matplotlib for professional-looking plots.</p>"},{"location":"examples/flight_data_visualization/#create-and-configure-rocket","title":"Create and Configure Rocket\u00b6","text":"<p>Set up a standard water rocket configuration for our simulation.</p>"},{"location":"examples/flight_data_visualization/#setup-and-run-simulation","title":"Setup and Run Simulation\u00b6","text":"<p>Configure the simulation parameters and run the water rocket simulation.</p>"},{"location":"examples/flight_data_visualization/#analyze-flight-phases","title":"Analyze Flight Phases\u00b6","text":"<p>Identify the different phases of the rocket's flight: thrust phase, ballistic phase, and descent.</p>"},{"location":"examples/flight_data_visualization/#visualization-1-trajectory-and-velocity","title":"Visualization 1: Trajectory and Velocity\u00b6","text":"<p>Plot the rocket's altitude and velocity over time, with flight phases highlighted.</p>"},{"location":"examples/flight_data_visualization/#visualization-2-forces-and-acceleration","title":"Visualization 2: Forces and Acceleration\u00b6","text":"<p>Analyze the forces acting on the rocket and the resulting acceleration.</p>"},{"location":"examples/flight_data_visualization/#visualization-3-propellant-and-pressure","title":"Visualization 3: Propellant and Pressure\u00b6","text":"<p>Track the water mass consumption and internal pressure changes during the thrust phase.</p>"},{"location":"examples/flight_data_visualization/#visualization-4-exhaust-properties","title":"Visualization 4: Exhaust Properties\u00b6","text":"<p>Examine the properties of the exhaust flow during the thrust phase.</p>"},{"location":"examples/flight_data_visualization/#visualization-5-air-exit-conditions","title":"Visualization 5: Air Exit Conditions\u00b6","text":"<p>Analyze the conditions of air as it exits the nozzle during the air-only thrust phase.</p>"},{"location":"examples/flight_data_visualization/#key-insights-from-the-visualization","title":"Key Insights from the Visualization\u00b6","text":"<p>From these comprehensive plots, you can observe:</p> <p>Five different visualization categories:</p> <ul> <li>Trajectory and velocity plots</li> <li>Forces and acceleration analysis</li> <li>Propellant consumption and pressure dynamics</li> <li>Exhaust properties visualization</li> <li>Air exit conditions analysis</li> </ul>"},{"location":"examples/flight_data_visualization/#next-steps","title":"Next Steps\u00b6","text":"<p>Try experimenting with:</p> <ul> <li>Various simulation settings (time step, solver method)</li> <li>Comparing multiple rocket designs side by side</li> </ul>"},{"location":"examples/getting_started/","title":"Getting started","text":"In\u00a0[1]: Copied! <pre>#!/usr/bin/env python3\n\"\"\"\nMinimal test script to verify the water rocket simulation works.\n\"\"\"\n\nimport sys\nimport os\n\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket\n\nprint(\"\u2713 All imports successful\")\n\n# Create a simple rocket\nprint(\"\\n1. Creating standard rocket...\")\nrocket = create_standard_rocket()\n\nprint(f\"   Rocket created: {rocket.name}\")\nprint(f\"   Total mass: {rocket.total_mass:.3f} kg\")\n\n# Convert to simulation parameters\nprint(\"\\n2. Converting to simulation parameters...\")\nbuilder = RocketBuilder.from_dict(rocket.__dict__)\nsim_params = builder.to_simulation_params()\nprint(f\"   Parameters ready: {len(sim_params)} parameters\")\n\n# Run simulation\nprint(\"\\n3. Running simulation...\")\nsimulator = WaterRocketSimulator()\n\n# Short simulation for testing\nsim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\nflight_data = simulator.simulate(sim_params, sim_settings)\n\n\nprint(f\"   \u2713 Simulation completed successfully!\")\nprint(f\"   Maximum altitude: {flight_data.max_altitude:.2f} m\")\nprint(f\"   Maximum velocity: {flight_data.max_velocity:.2f} m/s\")\nprint(f\"   Flight time: {flight_data.flight_time:.2f} s\")\nprint(f\"   Data points: {len(flight_data.time)}\")\n\nprint(\"\\n\u2713 Your simulation is working correctly.\")\n</pre> #!/usr/bin/env python3 \"\"\" Minimal test script to verify the water rocket simulation works. \"\"\"  import sys import os  from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket  print(\"\u2713 All imports successful\")  # Create a simple rocket print(\"\\n1. Creating standard rocket...\") rocket = create_standard_rocket()  print(f\"   Rocket created: {rocket.name}\") print(f\"   Total mass: {rocket.total_mass:.3f} kg\")  # Convert to simulation parameters print(\"\\n2. Converting to simulation parameters...\") builder = RocketBuilder.from_dict(rocket.__dict__) sim_params = builder.to_simulation_params() print(f\"   Parameters ready: {len(sim_params)} parameters\")  # Run simulation print(\"\\n3. Running simulation...\") simulator = WaterRocketSimulator()  # Short simulation for testing sim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}  flight_data = simulator.simulate(sim_params, sim_settings)   print(f\"   \u2713 Simulation completed successfully!\") print(f\"   Maximum altitude: {flight_data.max_altitude:.2f} m\") print(f\"   Maximum velocity: {flight_data.max_velocity:.2f} m/s\") print(f\"   Flight time: {flight_data.flight_time:.2f} s\") print(f\"   Data points: {len(flight_data.time)}\")  print(\"\\n\u2713 Your simulation is working correctly.\") <pre>\u2713 All imports successful\n\n1. Creating standard rocket...\n   Rocket created: Standard 2L Rocket\n   Total mass: 0.910 kg\n\n2. Converting to simulation parameters...\n   Parameters ready: 9 parameters\n\n3. Running simulation...\nStarting water expulsion phase...\nWater depleted at t=0.123s, starting air expulsion phase...\nAir depleted at t=0.199s, starting coasting phase...\n   \u2713 Simulation completed successfully!\n   Maximum altitude: 61.45 m\n   Maximum velocity: 44.60 m/s\n   Flight time: 7.19 s\n   Data points: 752\n\n\u2713 Your simulation is working correctly.\n</pre> In\u00a0[2]: Copied! <pre>from waterrocketpy.analysis.energy_breakdown import tenergy_breakdown\nfrom waterrocketpy.analysis.energy_breakdown_plot import create_energy_plots, create_energy_summary_chart\n\nprint(\"\\n4. Performing energy breakdown analysis...\")\nenergy_components = tenergy_breakdown(flight_data, sim_params)\n\n# Create comprehensive energy plots\nprint(\"\\n5. Creating energy breakdown plots...\")\ncreate_energy_plots(energy_components, flight_data)\ncreate_energy_summary_chart(energy_components, flight_data)\n</pre> from waterrocketpy.analysis.energy_breakdown import tenergy_breakdown from waterrocketpy.analysis.energy_breakdown_plot import create_energy_plots, create_energy_summary_chart  print(\"\\n4. Performing energy breakdown analysis...\") energy_components = tenergy_breakdown(flight_data, sim_params)  # Create comprehensive energy plots print(\"\\n5. Creating energy breakdown plots...\") create_energy_plots(energy_components, flight_data) create_energy_summary_chart(energy_components, flight_data) <pre>\n4. Performing energy breakdown analysis...\n\n5. Creating energy breakdown plots...\n</pre> <pre>/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/waterrocketpy/analysis/energy_breakdown_plot.py:252: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.\n  plt.tight_layout()\n</pre> In\u00a0[3]: Copied! <pre>from waterrocketpy.visualization.flight_animation import animate_flight\nanimate_flight(flight_data)\n</pre> from waterrocketpy.visualization.flight_animation import animate_flight animate_flight(flight_data) In\u00a0[4]: Copied! <pre>import matplotlib.pyplot as plt\n\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder, create_standard_rocket\nfrom waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE, INITIAL_TEMPERATURE\nfrom waterrocketpy.visualization.plot_flight_data import (\n    setup_plot_style,\n    identify_flight_phases,\n    plot_trajectory_and_velocity,\n    plot_forces_and_acceleration,\n    plot_propellant_and_pressure,\n    plot_exhaust_properties,\n    plot_air_exit_conditions,\n    print_flight_summary)\n\n# Setup plotting style\nsetup_plot_style()\n# Identify flight phases\nprint(\"1. Analyzing flight phases...\")\nphases = identify_flight_phases(flight_data) \n# Print summary\nprint_flight_summary(flight_data, phases)\n\n# Create all plots\nprint(\"2. Generating plots...\")\nfigs = []\nprint(\"   - Trajectory and velocity plots...\")\nfigs.append(plot_trajectory_and_velocity(flight_data, phases))\nprint(\"   - Forces and acceleration plots...\")\nfigs.append(plot_forces_and_acceleration(flight_data, phases))\nprint(\"   - Propellant and pressure plots...\")\nfigs.append(plot_propellant_and_pressure(flight_data, phases))\nprint(\"   - Exhaust properties plots...\")\nfigs.append(plot_exhaust_properties(flight_data, phases))\nprint(\"   - Air exit conditions plots...\")\nfigs.append(plot_air_exit_conditions(flight_data, phases))\n# Show all plots\nplt.show()\n</pre> import matplotlib.pyplot as plt  from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import RocketBuilder, create_standard_rocket from waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE, INITIAL_TEMPERATURE from waterrocketpy.visualization.plot_flight_data import (     setup_plot_style,     identify_flight_phases,     plot_trajectory_and_velocity,     plot_forces_and_acceleration,     plot_propellant_and_pressure,     plot_exhaust_properties,     plot_air_exit_conditions,     print_flight_summary)  # Setup plotting style setup_plot_style() # Identify flight phases print(\"1. Analyzing flight phases...\") phases = identify_flight_phases(flight_data)  # Print summary print_flight_summary(flight_data, phases)  # Create all plots print(\"2. Generating plots...\") figs = [] print(\"   - Trajectory and velocity plots...\") figs.append(plot_trajectory_and_velocity(flight_data, phases)) print(\"   - Forces and acceleration plots...\") figs.append(plot_forces_and_acceleration(flight_data, phases)) print(\"   - Propellant and pressure plots...\") figs.append(plot_propellant_and_pressure(flight_data, phases)) print(\"   - Exhaust properties plots...\") figs.append(plot_exhaust_properties(flight_data, phases)) print(\"   - Air exit conditions plots...\") figs.append(plot_air_exit_conditions(flight_data, phases)) # Show all plots plt.show()  <pre>1. Analyzing flight phases...\n\n============================================================\nWATER ROCKET FLIGHT ANALYSIS SUMMARY\n============================================================\n\nFlight Performance:\n------------------\n  Maximum Altitude         : 61.45 m\n  Maximum Velocity         : 44.60 m/s\n  Total Flight Time        : 7.19 s\n  Time to Apogee           : 3.29 s\n\nPhase Durations:\n---------------\n  Water Phase              : 0.12 s\n  Air Phase                : 0.08 s\n  Coasting Phase           : 6.99 s\n\nInitial Conditions:\n------------------\n  Initial Water Mass       : 660.0 g\n  Initial Air Mass         : 12.6 g\n  Initial Pressure         : 8.11 bar\n  Initial Temperature      : 300.0 K\n\n============================================================\n2. Generating plots...\n   - Trajectory and velocity plots...\n   - Forces and acceleration plots...\n</pre> <pre>   - Propellant and pressure plots...\n   - Exhaust properties plots...\n   - Air exit conditions plots...\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/intro/","title":"Intro","text":"In\u00a0[1]: Copied! <pre>\"\"\"\nwith this package you can create a water rocket simulation.\nthere are following modules:\n- core: contains the main simulation logic\n- rocket: defines the rocket structure and components\n- analysis: provides tools for analyzing simulation results\n- utils: utility functions and classes for saving/loading data\n- visualization: tools for visualizing simulation data\n- optimization: tools for optimizing rocket parameters\n\"\"\"\n</pre> \"\"\" with this package you can create a water rocket simulation. there are following modules: - core: contains the main simulation logic - rocket: defines the rocket structure and components - analysis: provides tools for analyzing simulation results - utils: utility functions and classes for saving/loading data - visualization: tools for visualizing simulation data - optimization: tools for optimizing rocket parameters \"\"\" Out[1]: <pre>'\\nwith this package you can create a water rocket simulation.\\nthere are following modules:\\n- core: contains the main simulation logic\\n- rocket: defines the rocket structure and components\\n- analysis: provides tools for analyzing simulation results\\n- utils: utility functions and classes for saving/loading data\\n- visualization: tools for visualizing simulation data\\n- optimization: tools for optimizing rocket parameters\\n'</pre> In\u00a0[2]: Copied! <pre>\"\"\"Creating a Water Rocket\"\"\"\nfrom waterrocketpy.rocket.builder import create_standard_rocket\nrocket = create_standard_rocket()\n\nprint(f\"   Rocket created: {rocket.name}\")\nprint(f\"   Total mass: {rocket.total_mass:.3f} kg\")\n</pre> \"\"\"Creating a Water Rocket\"\"\" from waterrocketpy.rocket.builder import create_standard_rocket rocket = create_standard_rocket()  print(f\"   Rocket created: {rocket.name}\") print(f\"   Total mass: {rocket.total_mass:.3f} kg\") <pre>   Rocket created: Standard 2L Rocket\n   Total mass: 0.910 kg\n</pre> In\u00a0[3]: Copied! <pre>from waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder\n\"\"\"Running a Water Rocket Simulation\"\"\"\n# Convert to simulation parameters\nprint(\"\\n2. Converting to simulation parameters...\")\n\nsim_params = rocket.to_simulation_params()\nprint(f\"   Parameters ready: {len(sim_params)} parameters\")\n\n# Run simulation\nprint(\"\\n3. Running simulation...\")\nsimulator = WaterRocketSimulator()\n\n# Short simulation for testing\nsim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}\n\nflight_data = simulator.simulate(sim_params, sim_settings)\n</pre> from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import RocketBuilder \"\"\"Running a Water Rocket Simulation\"\"\" # Convert to simulation parameters print(\"\\n2. Converting to simulation parameters...\")  sim_params = rocket.to_simulation_params() print(f\"   Parameters ready: {len(sim_params)} parameters\")  # Run simulation print(\"\\n3. Running simulation...\") simulator = WaterRocketSimulator()  # Short simulation for testing sim_settings = {\"max_time\": 100.0, \"time_step\": 0.01, \"solver\": \"RK45\"}  flight_data = simulator.simulate(sim_params, sim_settings) <pre>\n2. Converting to simulation parameters...\n   Parameters ready: 9 parameters\n\n3. Running simulation...\nStarting water expulsion phase...\nWater depleted at t=0.123s, starting air expulsion phase...\nAir depleted at t=0.199s, starting coasting phase...\n</pre> In\u00a0[4]: Copied! <pre>\"\"\"\nHow the Rocket builder Works: Step by step:\n1. Manual approach\n\"\"\"\n\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\nfrom waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket\nfrom waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE\n\n#create a Rocket Builder\ncustom_rocket_Builder = (\n    RocketBuilder()\n    .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle\n    .set_nozzle(diameter=0.015)\n    .set_mass(empty_mass=0.25, water_fraction=0.33)\n    .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)\n    .set_metadata(\"Standard 2L Rocket\", \"Standard configuration for 2L bottle\")    \n)\n\n#let the Rocket Builder create a rocket:\ncustom_rocket = custom_rocket_Builder.build()\n\n\nsim_params = custom_rocket_Builder.to_simulation_params()\n\nsimulator = WaterRocketSimulator()\nflight_data = simulator.simulate(sim_params)\n\nprint(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\")\n</pre> \"\"\" How the Rocket builder Works: Step by step: 1. Manual approach \"\"\"  from waterrocketpy.core.simulation import WaterRocketSimulator from waterrocketpy.rocket.builder import RocketBuilder,create_standard_rocket from waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE  #create a Rocket Builder custom_rocket_Builder = (     RocketBuilder()     .set_bottle(volume=0.002, diameter=0.1)  # 2L bottle     .set_nozzle(diameter=0.015)     .set_mass(empty_mass=0.25, water_fraction=0.33)     .set_initial_conditions(pressure=8 * ATMOSPHERIC_PRESSURE)     .set_metadata(\"Standard 2L Rocket\", \"Standard configuration for 2L bottle\")     )  #let the Rocket Builder create a rocket: custom_rocket = custom_rocket_Builder.build()   sim_params = custom_rocket_Builder.to_simulation_params()  simulator = WaterRocketSimulator() flight_data = simulator.simulate(sim_params)  print(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\")   <pre>Starting water expulsion phase...\nWater depleted at t=0.123s, starting air expulsion phase...\nAir depleted at t=0.199s, starting coasting phase...\nMaximum altitude: 61.45 m\n</pre> In\u00a0[5]: Copied! <pre>#2. automatic approach\nfrom waterrocketpy.rocket.builder import RocketBuilder\nfrom waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\n# Smart approach - specify dimensions, let the function calculate everything!\nsmart_builder = RocketBuilder()\n\nsmart_config = (smart_builder\n    .build_from_dimensions(\n        L_body=0.25,           # 25 cm body length\n        L_cone=0.08,           # 8 cm nose cone length  \n        d_body=0.088,          # 88 mm diameter (standard 2L bottle)\n        p_max=8 * ATMOSPHERIC_PRESSURE,  # 8 bar maximum pressure\n        nozzle_diameter=0.01,  # 10 mm nozzle diameter\n        material_name=\"PET\",   # PET plastic material\n        water_fraction=0.3,    # 30% water fill\n        safety_factor=2.0      # 2x safety factor\n    )\n    .set_metadata(\"Smart Rocket\", \"Built using build_from_dimensions\")\n    .build()\n)\n\nprint(\"Smart Rocket Configuration:\")\nprint(f\"  Volume: {smart_config.bottle_volume:.6f} m\u00b3\")\nprint(f\"  Empty Mass: {smart_config.empty_mass:.3f} kg\")\nprint(f\"  Drag Coefficient: {smart_config.drag_coefficient:.3f}\")\nprint(f\"  Description: {smart_config.description}\")\n#simulate\nsimulator = WaterRocketSimulator()\nflight_data = simulator.simulate(smart_config.to_simulation_params())\nprint(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\")\n</pre> #2. automatic approach from waterrocketpy.rocket.builder import RocketBuilder from waterrocketpy.core.constants import ATMOSPHERIC_PRESSURE from waterrocketpy.core.simulation import WaterRocketSimulator # Smart approach - specify dimensions, let the function calculate everything! smart_builder = RocketBuilder()  smart_config = (smart_builder     .build_from_dimensions(         L_body=0.25,           # 25 cm body length         L_cone=0.08,           # 8 cm nose cone length           d_body=0.088,          # 88 mm diameter (standard 2L bottle)         p_max=8 * ATMOSPHERIC_PRESSURE,  # 8 bar maximum pressure         nozzle_diameter=0.01,  # 10 mm nozzle diameter         material_name=\"PET\",   # PET plastic material         water_fraction=0.3,    # 30% water fill         safety_factor=2.0      # 2x safety factor     )     .set_metadata(\"Smart Rocket\", \"Built using build_from_dimensions\")     .build() )  print(\"Smart Rocket Configuration:\") print(f\"  Volume: {smart_config.bottle_volume:.6f} m\u00b3\") print(f\"  Empty Mass: {smart_config.empty_mass:.3f} kg\") print(f\"  Drag Coefficient: {smart_config.drag_coefficient:.3f}\") print(f\"  Description: {smart_config.description}\") #simulate simulator = WaterRocketSimulator() flight_data = simulator.simulate(smart_config.to_simulation_params()) print(f\"Maximum altitude: {flight_data.max_altitude:.2f} m\") <pre>Smart Rocket Configuration:\n  Volume: 0.001521 m\u00b3\n  Empty Mass: 0.175 kg\n  Drag Coefficient: 0.239\n  Description: Built using build_from_dimensions\nStarting water expulsion phase...\nWater depleted at t=0.186s, starting air expulsion phase...\nAir depleted at t=0.321s, starting coasting phase...\n</pre> <pre>Maximum altitude: 81.59 m\n</pre> In\u00a0[\u00a0]: Copied! <pre>\n</pre>"},{"location":"examples/parameter_explorer_example/","title":"Parameter explorer example","text":"In\u00a0[1]: Copied! <pre>import numpy as np\nimport matplotlib.pyplot as plt\n\nfrom waterrocketpy.visualization.parameter_explorer import ParameterExplorer\nfrom waterrocketpy.rocket.builder import RocketBuilder, create_standard_rocket\nfrom waterrocketpy.core.simulation import WaterRocketSimulator\n</pre> import numpy as np import matplotlib.pyplot as plt  from waterrocketpy.visualization.parameter_explorer import ParameterExplorer from waterrocketpy.rocket.builder import RocketBuilder, create_standard_rocket from waterrocketpy.core.simulation import WaterRocketSimulator In\u00a0[2]: Copied! <pre># Create a standard rocket configuration\nbase_rocket = create_standard_rocket()\n\nprint(\"Base rocket created successfully!\")\nprint(f\"Empty mass: {base_rocket.empty_mass:.3f} kg\")\nprint(f\"Water fraction: {base_rocket.water_fraction:.3f}\")\nprint(f\"Nozzle diameter: {base_rocket.nozzle_diameter:.6f} m\")\n</pre> # Create a standard rocket configuration base_rocket = create_standard_rocket()  print(\"Base rocket created successfully!\") print(f\"Empty mass: {base_rocket.empty_mass:.3f} kg\") print(f\"Water fraction: {base_rocket.water_fraction:.3f}\") print(f\"Nozzle diameter: {base_rocket.nozzle_diameter:.6f} m\") <pre>Base rocket created successfully!\nEmpty mass: 0.250 kg\nWater fraction: 0.330\nNozzle diameter: 0.015000 m\n</pre> In\u00a0[3]: Copied! <pre># Initialize the parameter explorer\nexplorer = ParameterExplorer()\n\n# Extract base parameters from the rocket\nbase_params = explorer.extract_base_parameters(base_rocket)\n\nprint(\"Base parameters extracted:\")\nfor name, value in base_params.items():\n    print(f\"   {name}: {value}\")\n</pre> # Initialize the parameter explorer explorer = ParameterExplorer()  # Extract base parameters from the rocket base_params = explorer.extract_base_parameters(base_rocket)  print(\"Base parameters extracted:\") for name, value in base_params.items():     print(f\"   {name}: {value}\") <pre>Debug - Available simulation parameters:\n  P0: 810600\n  A_nozzle: 0.00017671458676442585\n  V_bottle: 0.002\n  water_fraction: 0.33\n  C_d: 0.97\n  m_empty: 0.25\n  C_drag: 0.5\n  A_rocket: 0.007853981633974483\n  liquid_gas_mass: 0.0\n\nDebug - Extracted base parameters:\n  initial_pressure: 810600\n  pressure: 810600\n  water_fraction: 0.33\n  nozzle_area: 0.00017671458676442585\n  nozzle_diameter: 0.00017671458676442585\n  nozzle_discharge_coefficient: 0.97\n  bottle_volume: 0.002\n  empty_mass: 0.25\n  drag_coefficient: 0.5\n  reference_area: 0.007853981633974483\n  rocket_diameter: 0.007853981633974483\n  liquid_gas_mass: 0.0\nBase parameters extracted:\n   initial_pressure: 810600\n   pressure: 810600\n   water_fraction: 0.33\n   nozzle_area: 0.00017671458676442585\n   nozzle_diameter: 0.00017671458676442585\n   nozzle_discharge_coefficient: 0.97\n   bottle_volume: 0.002\n   empty_mass: 0.25\n   drag_coefficient: 0.5\n   reference_area: 0.007853981633974483\n   rocket_diameter: 0.007853981633974483\n   liquid_gas_mass: 0.0\n</pre> In\u00a0[4]: Copied! <pre># Define the parameters we want to explore\nparameters_to_explore = [\"empty_mass\", \"water_fraction\", \"nozzle_diameter\"]\n\nprint(f\"Parameters to explore: {parameters_to_explore}\")\n</pre> # Define the parameters we want to explore parameters_to_explore = [\"empty_mass\", \"water_fraction\", \"nozzle_diameter\"]  print(f\"Parameters to explore: {parameters_to_explore}\") <pre>Parameters to explore: ['empty_mass', 'water_fraction', 'nozzle_diameter']\n</pre> In\u00a0[5]: Copied! <pre># Create parameter configurations for exploration\nparameter_configs = explorer.create_parameter_configs(base_params, parameters_to_explore)\n\n# Run the exploration targeting apogee as our performance metric\nresults = explorer.explore_multiple_parameters(\n    base_rocket,\n    parameter_configs,\n    target=\"apogee\"\n)\n\nprint(f\"\\nExploration completed! Generated {len(results)} result sets.\")\n</pre> # Create parameter configurations for exploration parameter_configs = explorer.create_parameter_configs(base_params, parameters_to_explore)  # Run the exploration targeting apogee as our performance metric results = explorer.explore_multiple_parameters(     base_rocket,     parameter_configs,     target=\"apogee\" )  print(f\"\\nExploration completed! Generated {len(results)} result sets.\") <pre>Exploring 3 parameters: ['empty_mass', 'water_fraction', 'nozzle_diameter']\n  Exploring pair: empty_mass vs water_fraction\n</pre> <pre>    Progress: 10/100 (10.0%)\n</pre> <pre>    Progress: 20/100 (20.0%)\n</pre> <pre>    Progress: 30/100 (30.0%)\n</pre> <pre>    Progress: 40/100 (40.0%)\n</pre> <pre>    Progress: 50/100 (50.0%)\n</pre> <pre>    Progress: 60/100 (60.0%)\n</pre> <pre>    Progress: 70/100 (70.0%)\n</pre> <pre>    Progress: 80/100 (80.0%)\n</pre> <pre>    Progress: 90/100 (90.0%)\n</pre> <pre>    Progress: 100/100 (100.0%)\n</pre> <pre>  Exploring pair: empty_mass vs nozzle_diameter\n</pre> <pre>    Progress: 10/100 (10.0%)\n</pre> <pre>    Progress: 20/100 (20.0%)\n</pre> <pre>    Progress: 30/100 (30.0%)\n</pre> <pre>    Progress: 40/100 (40.0%)\n</pre> <pre>    Progress: 50/100 (50.0%)\n</pre> <pre>    Progress: 60/100 (60.0%)\n</pre> <pre>    Progress: 70/100 (70.0%)\n</pre> <pre>    Progress: 80/100 (80.0%)\n</pre> <pre>    Progress: 90/100 (90.0%)\n</pre> <pre>    Progress: 100/100 (100.0%)\n</pre> <pre>  Exploring pair: water_fraction vs nozzle_diameter\n</pre> <pre>    Progress: 10/100 (10.0%)\n</pre> <pre>    Progress: 20/100 (20.0%)\n</pre> <pre>    Progress: 30/100 (30.0%)\n</pre> <pre>    Progress: 40/100 (40.0%)\n</pre> <pre>    Progress: 50/100 (50.0%)\n</pre> <pre>    Progress: 60/100 (60.0%)\n</pre> <pre>    Progress: 70/100 (70.0%)\n</pre> <pre>    Progress: 80/100 (80.0%)\n</pre> <pre>    Progress: 90/100 (90.0%)\n</pre> <pre>    Progress: 100/100 (100.0%)\n</pre> <pre>\nExploration completed! Generated 3 result sets.\n</pre> In\u00a0[6]: Copied! <pre># Display basic information about the first result set\nfirst_result = results[0]\n\n# Print sensitivity analysis\nprint(\"\\n=== Sensitivity Analysis ===\")\nexplorer.print_sensitivity_analysis(results)\n</pre> # Display basic information about the first result set first_result = results[0]  # Print sensitivity analysis print(\"\\n=== Sensitivity Analysis ===\") explorer.print_sensitivity_analysis(results) <pre>\n=== Sensitivity Analysis ===\n\n============================================================\nSENSITIVITY ANALYSIS\n============================================================\n\nParameter Sensitivities (for Maximum Altitude):\n--------------------------------------------------\nnozzle_diameter     :     1.14e+03 m/unit\nempty_mass          :     8.97e+01 m/unit\nwater_fraction      :     2.10e+00 m/unit\n\nRelative Importance (normalized to most sensitive parameter):\n--------------------------------------------------\nnozzle_diameter     :  100.0%\nempty_mass          :    7.9%\nwater_fraction      :    0.2%\n</pre> In\u00a0[7]: Copied! <pre># Plot the exploration results\nexplorer.plot_results(results)\n\n# Show the plots\nplt.tight_layout()\nplt.show()\n</pre> # Plot the exploration results explorer.plot_results(results)  # Show the plots plt.tight_layout() plt.show() <pre>&lt;Figure size 640x480 with 0 Axes&gt;</pre>"},{"location":"examples/parameter_explorer_example/#parameter-explorer-example","title":"Parameter Explorer Example\u00b6","text":"<p>This notebook demonstrates how to use the <code>ParameterExplorer</code> class to analyze the sensitivity of water rocket performance to different parameters.</p> <p>The <code>ParameterExplorer</code> allows you to:</p> <ul> <li>Explore how different rocket parameters affect performance metrics</li> <li>Perform sensitivity analysis</li> <li>Visualize parameter impacts</li> <li>Identify the most critical design parameters</li> </ul>"},{"location":"examples/parameter_explorer_example/#setup-and-imports","title":"Setup and Imports\u00b6","text":""},{"location":"examples/parameter_explorer_example/#create-base-rocket-configuration","title":"Create Base Rocket Configuration\u00b6","text":"<p>First, let's create a standard rocket configuration that will serve as our baseline for parameter exploration.</p>"},{"location":"examples/parameter_explorer_example/#initialize-parameter-explorer","title":"Initialize Parameter Explorer\u00b6","text":"<p>Create an instance of the ParameterExplorer and extract the base parameters from our rocket.</p>"},{"location":"examples/parameter_explorer_example/#define-parameters-to-explore","title":"Define Parameters to Explore\u00b6","text":"<p>Select the key parameters that we want to analyze for their impact on rocket performance.</p>"},{"location":"examples/parameter_explorer_example/#run-parameter-exploration","title":"Run Parameter Exploration\u00b6","text":"<p>Now we'll run the exploration to see how these parameters affect the rocket's apogee (maximum height).</p>"},{"location":"examples/parameter_explorer_example/#analyze-results","title":"Analyze Results\u00b6","text":"<p>Let's examine the first result set and perform sensitivity analysis.</p>"},{"location":"examples/parameter_explorer_example/#visualize-results","title":"Visualize Results\u00b6","text":"<p>Create plots to visualize how each parameter affects the rocket's performance.</p>"},{"location":"examples/parameter_explorer_example/#summary","title":"Summary\u00b6","text":"<p>This example demonstrated how to:</p> <ol> <li>Create a base rocket using the standard configuration</li> <li>Initialize the ParameterExplorer and extract base parameters</li> <li>Define parameters to explore (empty_mass, water_fraction, nozzle_diameter)</li> <li>Run parameter exploration targeting apogee performance</li> <li>Analyze sensitivity to understand which parameters have the most impact</li> <li>Visualize results with plots showing parameter vs performance relationships</li> </ol> <p>The ParameterExplorer is a powerful tool for optimizing rocket design by identifying which parameters have the greatest influence on performance metrics like maximum height, flight time, or other objectives.</p>"},{"location":"examples/parameter_explorer_example/#next-steps","title":"Next Steps\u00b6","text":"<p>Try experimenting with:</p> <ul> <li>Different target metrics (flight_time, max_velocity, etc.)</li> <li>Additional parameters to explore</li> <li>Different rocket configurations</li> <li>Custom parameter ranges and sampling strategies</li> </ul>"},{"location":"examples/simple_optimization_example/","title":"Simple optimization example","text":"In\u00a0[1]: Copied! <pre>from waterrocketpy.optimization.water_rocket_optimizer import optimize_for_altitude\n\nprint(\"Water Rocket Optimization Example\")\nprint(\"=\" * 40)\n</pre> from waterrocketpy.optimization.water_rocket_optimizer import optimize_for_altitude  print(\"Water Rocket Optimization Example\") print(\"=\" * 40) <pre>Water Rocket Optimization Example\n========================================\n</pre> In\u00a0[2]: Copied! <pre># Run optimization with default bounds\nprint(\"Optimizing for maximum altitude...\")\n\nresult = optimize_for_altitude(\n    maxiter=50,  # Quick optimization for demo\n    seed=42      # For reproducible results\n)\n\nprint(\"Optimization completed!\")\n</pre> # Run optimization with default bounds print(\"Optimizing for maximum altitude...\")  result = optimize_for_altitude(     maxiter=50,  # Quick optimization for demo     seed=42      # For reproducible results )  print(\"Optimization completed!\") <pre>Optimizing for maximum altitude...\nStarting optimization for max_altitude using differential_evolution\nParameter bounds: [(0.1, 0.5), (0.05, 0.12), (2.0, 12.0), (0.005, 0.025), (0.1, 0.8)]\n</pre> <pre>New best max_altitude: 4.1604 at evaluation 1\n  Params: L_body=0.102, d_body=0.065, p_max=2.5bar, nozzle_d=0.0183, water_frac=0.513\nNew best max_altitude: 103.8004 at evaluation 2\n  Params: L_body=0.241, d_body=0.113, p_max=11.2bar, nozzle_d=0.0146, water_frac=0.438\nNew best max_altitude: 123.2071 at evaluation 3\n  Params: L_body=0.495, d_body=0.090, p_max=11.9bar, nozzle_d=0.0069, water_frac=0.364\n</pre> <pre>New best max_altitude: 123.5837 at evaluation 31\n  Params: L_body=0.482, d_body=0.106, p_max=10.1bar, nozzle_d=0.0159, water_frac=0.389\n</pre> <pre>New best max_altitude: 127.3809 at evaluation 86\n  Params: L_body=0.495, d_body=0.118, p_max=10.2bar, nozzle_d=0.0196, water_frac=0.406\n</pre> <pre>differential_evolution step 1: f(x)= -127.38086702551217\nNew best max_altitude: 137.7603 at evaluation 151\n  Params: L_body=0.478, d_body=0.109, p_max=12.0bar, nozzle_d=0.0124, water_frac=0.340\n</pre> <pre>New best max_altitude: 138.5028 at evaluation 194\n  Params: L_body=0.489, d_body=0.115, p_max=11.2bar, nozzle_d=0.0227, water_frac=0.285\n</pre> <pre>differential_evolution step 2: f(x)= -138.5028028381849\n</pre> <pre>New best max_altitude: 140.6326 at evaluation 240\n  Params: L_body=0.466, d_body=0.114, p_max=11.7bar, nozzle_d=0.0246, water_frac=0.344\n</pre> <pre>differential_evolution step 3: f(x)= -140.63264569280034\n</pre> <pre>differential_evolution step 4: f(x)= -140.63264569280034\n</pre> <pre>differential_evolution step 5: f(x)= -140.63264569280034\n</pre> <pre>New best max_altitude: 141.0108 at evaluation 521\n  Params: L_body=0.452, d_body=0.120, p_max=12.0bar, nozzle_d=0.0239, water_frac=0.373\n</pre> <pre>differential_evolution step 6: f(x)= -141.0107973655383\n</pre> <pre>New best max_altitude: 142.3291 at evaluation 534\n  Params: L_body=0.490, d_body=0.113, p_max=11.8bar, nozzle_d=0.0236, water_frac=0.358\n</pre> <pre>New best max_altitude: 142.6553 at evaluation 591\n  Params: L_body=0.497, d_body=0.110, p_max=12.0bar, nozzle_d=0.0185, water_frac=0.331\n</pre> <pre>differential_evolution step 7: f(x)= -142.65533252544697\nNew best max_altitude: 145.4394 at evaluation 601\n  Params: L_body=0.500, d_body=0.117, p_max=12.0bar, nozzle_d=0.0228, water_frac=0.331\n</pre> <pre>differential_evolution step 8: f(x)= -145.4393757513636\n</pre> <pre>New best max_altitude: 145.5610 at evaluation 693\n  Params: L_body=0.497, d_body=0.118, p_max=12.0bar, nozzle_d=0.0235, water_frac=0.337\n</pre> <pre>differential_evolution step 9: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 10: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 11: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 12: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 13: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 14: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 15: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 16: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 17: f(x)= -145.56102074027604\n</pre> <pre>differential_evolution step 18: f(x)= -145.56102074027604\n</pre> <pre>New best max_altitude: 145.7171 at evaluation 1471\n  Params: L_body=0.497, d_body=0.118, p_max=12.0bar, nozzle_d=0.0248, water_frac=0.333\n</pre> <pre>differential_evolution step 19: f(x)= -145.71711930769237\n</pre> <pre>differential_evolution step 20: f(x)= -145.71711930769237\n</pre> <pre>differential_evolution step 21: f(x)= -145.71711930769237\n</pre> <pre>New best max_altitude: 145.8152 at evaluation 1661\n  Params: L_body=0.499, d_body=0.117, p_max=12.0bar, nozzle_d=0.0241, water_frac=0.327\n</pre> <pre>differential_evolution step 22: f(x)= -145.81516933225515\n</pre> <pre>differential_evolution step 23: f(x)= -145.81516933225515\n</pre> <pre>differential_evolution step 24: f(x)= -145.81516933225515\n</pre> <pre>New best max_altitude: 145.8760 at evaluation 1901\n  Params: L_body=0.498, d_body=0.119, p_max=12.0bar, nozzle_d=0.0228, water_frac=0.320\n</pre> <pre>New best max_altitude: 146.0248 at evaluation 1948\n  Params: L_body=0.497, d_body=0.120, p_max=12.0bar, nozzle_d=0.0237, water_frac=0.328\ndifferential_evolution step 25: f(x)= -146.0247567568426\n</pre> <pre>New best max_altitude: 146.1136 at evaluation 1957\n  Params: L_body=0.500, d_body=0.120, p_max=12.0bar, nozzle_d=0.0232, water_frac=0.324\n</pre> <pre>differential_evolution step 26: f(x)= -146.1136005898963\n</pre> <pre>New best max_altitude: 146.2311 at evaluation 2042\n  Params: L_body=0.499, d_body=0.120, p_max=12.0bar, nozzle_d=0.0234, water_frac=0.327\n</pre> <pre>differential_evolution step 27: f(x)= -146.23106794785213\n</pre> <pre>differential_evolution step 28: f(x)= -146.23106794785213\nPolishing solution with 'L-BFGS-B'\nNew best max_altitude: 146.2311 at evaluation 2177\n  Params: L_body=0.499, d_body=0.120, p_max=12.0bar, nozzle_d=0.0234, water_frac=0.327\n</pre> <pre>New best max_altitude: 146.2311 at evaluation 2178\n  Params: L_body=0.499, d_body=0.120, p_max=12.0bar, nozzle_d=0.0234, water_frac=0.327\n</pre> <pre>New best max_altitude: 146.2429 at evaluation 2188\n  Params: L_body=0.499, d_body=0.120, p_max=12.0bar, nozzle_d=0.0234, water_frac=0.323\nNew best max_altitude: 146.2429 at evaluation 2189\n  Params: L_body=0.499, d_body=0.120, p_max=12.0bar, nozzle_d=0.0234, water_frac=0.323\n</pre> <pre>New best max_altitude: 146.2429 at evaluation 2190\n  Params: L_body=0.499, d_body=0.120, p_max=12.0bar, nozzle_d=0.0234, water_frac=0.323\n</pre> <pre>New best max_altitude: 146.6261 at evaluation 2194\n  Params: L_body=0.500, d_body=0.120, p_max=12.0bar, nozzle_d=0.0250, water_frac=0.325\n</pre> <pre>New best max_altitude: 146.6261 at evaluation 2200\n  Params: L_body=0.500, d_body=0.120, p_max=12.0bar, nozzle_d=0.0250, water_frac=0.325\n</pre> <pre>New best max_altitude: 146.6261 at evaluation 2205\n  Params: L_body=0.500, d_body=0.120, p_max=12.0bar, nozzle_d=0.0250, water_frac=0.325\n</pre> <pre>\nOptimization completed!\nBest max_altitude: 146.6261\nBest parameters:\n  L_body: 0.5000\n  d_body: 0.1200\n  p_max_bar: 12.0000\n  nozzle_diameter: 0.0250\n  water_fraction: 0.3246\nOptimization completed!\n</pre> In\u00a0[3]: Copied! <pre># Display results\nprint(f\"Success: {result['success']}\")\nprint(f\"Max altitude achieved: {result['best_value']:.2f} m\")\nprint(f\"Function evaluations: {result['n_evaluations']}\")\n\nprint(\"\\nOptimal parameters:\")\nparams = result['best_params']\nprint(f\"  Body length: {params['L_body']:.3f} m ({params['L_body']*100:.1f} cm)\")\nprint(f\"  Body diameter: {params['d_body']:.4f} m ({params['d_body']*1000:.1f} mm)\")\nprint(f\"  Max pressure: {params['p_max_bar']:.1f} bar\")\nprint(f\"  Nozzle diameter: {params['nozzle_diameter']:.4f} m ({params['nozzle_diameter']*1000:.1f} mm)\")\nprint(f\"  Water fraction: {params['water_fraction']:.1%}\")\n</pre> # Display results print(f\"Success: {result['success']}\") print(f\"Max altitude achieved: {result['best_value']:.2f} m\") print(f\"Function evaluations: {result['n_evaluations']}\")  print(\"\\nOptimal parameters:\") params = result['best_params'] print(f\"  Body length: {params['L_body']:.3f} m ({params['L_body']*100:.1f} cm)\") print(f\"  Body diameter: {params['d_body']:.4f} m ({params['d_body']*1000:.1f} mm)\") print(f\"  Max pressure: {params['p_max_bar']:.1f} bar\") print(f\"  Nozzle diameter: {params['nozzle_diameter']:.4f} m ({params['nozzle_diameter']*1000:.1f} mm)\") print(f\"  Water fraction: {params['water_fraction']:.1%}\") <pre>Success: True\nMax altitude achieved: 146.63 m\nFunction evaluations: 2211\n\nOptimal parameters:\n  Body length: 0.500 m (50.0 cm)\n  Body diameter: 0.1200 m (120.0 mm)\n  Max pressure: 12.0 bar\n  Nozzle diameter: 0.0250 m (25.0 mm)\n  Water fraction: 32.5%\n</pre> In\u00a0[4]: Copied! <pre>if result[\"best_flight_data\"] is not None:\n    fd = result[\"best_flight_data\"]\n    print(\"Flight Performance:\")\n    print(f\"  Max Altitude        : {fd.max_altitude:.2f} m\")\n    print(f\"  Max Velocity        : {fd.max_velocity:.2f} m/s\")\n    print(f\"  Flight Time         : {fd.flight_time:.2f} s\")\n    print(f\"  Water Depletion Time: {fd.water_depletion_time:.2f} s\")\n</pre> if result[\"best_flight_data\"] is not None:     fd = result[\"best_flight_data\"]     print(\"Flight Performance:\")     print(f\"  Max Altitude        : {fd.max_altitude:.2f} m\")     print(f\"  Max Velocity        : {fd.max_velocity:.2f} m/s\")     print(f\"  Flight Time         : {fd.flight_time:.2f} s\")     print(f\"  Water Depletion Time: {fd.water_depletion_time:.2f} s\") <pre>Flight Performance:\n  Max Altitude        : 146.63 m\n  Max Velocity        : 60.47 m/s\n  Flight Time         : 11.03 s\n  Water Depletion Time: 0.10 s\n</pre>"},{"location":"examples/simple_optimization_example/#simple-water-rocket-optimization-example","title":"Simple Water Rocket Optimization Example\u00b6","text":"<p>This notebook demonstrates basic usage of the water rocket optimizer to find optimal parameters for maximum altitude.</p>"},{"location":"examples/simple_optimization_example/#optimize-for-maximum-altitude","title":"Optimize for Maximum Altitude\u00b6","text":"<p>Run optimization with default parameter bounds to find the rocket configuration that achieves maximum altitude.</p>"},{"location":"examples/simple_optimization_example/#display-results","title":"Display Results\u00b6","text":"<p>Show the optimization results including optimal parameters and performance metrics.</p>"},{"location":"examples/simple_optimization_example/#flight-performance-summary","title":"Flight Performance Summary\u00b6","text":"<p>Display detailed flight performance metrics for the optimized rocket.</p>"},{"location":"thinking/energy_flow/","title":"Energy flow","text":""},{"location":"thinking/energy_flow/#energy-flow-in-a-pet-water-rocket","title":"Energy Flow in a PET Water Rocket","text":"<p>At launch, all available energy is stored as internal energy in the pressurized air inside the rocket. As the rocket launches and the nozzle opens, this energy is transformed and distributed among various components:</p>"},{"location":"thinking/energy_flow/#1-internal-energy-of-the-pressurized-air","title":"1. Internal Energy of the Pressurized Air","text":"<ul> <li> <p>Stored Energy Source</p> </li> <li> <p>Comprised of pressure and temperature (i.e., enthalpy).</p> </li> <li> <p>Can be estimated via:</p> <p>$$ U_{\\text{air}} = m_{\\text{air}} \\cdot c_v \\cdot T $$   * Or for enthalpy:</p> <p>$$ H_{\\text{air}} = m_{\\text{air}} \\cdot c_p \\cdot T $$</p> </li> </ul>"},{"location":"thinking/energy_flow/#2-kinetic-potential-energy-of-the-rocket","title":"2. Kinetic &amp; Potential Energy of the Rocket","text":"<ul> <li> <p>Energy transferred to the empty rocket body and remaining internal fluid.</p> </li> <li> <p>Kinetic:</p> <p>$$ E_{\\text{kin, rocket}} = \\frac{1}{2} m_{\\text{rocket}} v^2 $$   * Potential:</p> <p>$$ E_{\\text{pot, rocket}} = m_{\\text{rocket}} g h $$   * Where:</p> <ul> <li>$m_{\\text{rocket}} = m_{\\text{empty}} + m_{\\text{air}} + m_{\\text{water}}$</li> </ul> </li> </ul>"},{"location":"thinking/energy_flow/#3-kinetic-potential-energy-of-the-remaining-water-inside-the-rocket","title":"3. Kinetic &amp; Potential Energy of the Remaining Water Inside the Rocket","text":"<ul> <li>Similar to the rocket, since the water is moving with the same velocity:</li> </ul> <p>$$   E_{\\text{kin, water-in}} = \\frac{1}{2} m_{\\text{water}} v^2, \\quad   E_{\\text{pot, water-in}} = m_{\\text{water}} g h   $$</p>"},{"location":"thinking/energy_flow/#4-kinetic-potential-energy-of-expelled-water","title":"4. Kinetic &amp; Potential Energy of Expelled Water","text":"<ul> <li>Represents the integral of kinetic and potential energy carried by water as it exits the nozzle:</li> </ul> <p>$$   E_{\\text{water-out}}(t) = \\int_0^t \\left( \\frac{1}{2} \\dot{m}{\\text{water}}(t') v(t') g h(t') \\right) dt'   $$}}(t')^2 + \\dot{m}_{\\text{water}</p> <ul> <li> <p>The values can be approximated using:</p> </li> <li> <p><code>water_mass(t)</code> (to find $\\dot{m}_{\\text{water}}$)</p> </li> <li><code>velocity(t)</code> (if water exhaust speed is approximated)</li> <li>Nozzle model for exhaust velocity</li> </ul>"},{"location":"thinking/energy_flow/#5-kinetic-potential-energy-of-expelled-air","title":"5. Kinetic &amp; Potential Energy of Expelled Air","text":"<ul> <li>Same principle as with water:</li> </ul> <p>$$   E_{\\text{air-out}}(t) = \\int_0^t \\left( \\frac{1}{2} \\dot{m}{\\text{air}}(t') v(t') g h(t') \\right) dt'   $$}}(t')^2 + \\dot{m}_{\\text{air}</p>"},{"location":"thinking/energy_flow/#6-energy-losses","title":"6. Energy Losses","text":"<ul> <li>Drag:</li> </ul> <p>$$   E_{\\text{drag}} = \\int_0^t D(t') \\cdot v(t') \\, dt'   $$</p> <p>Where <code>D(t')</code> is <code>drag(t')</code></p> <ul> <li> <p>Friction in Nozzle (if modeled separately)</p> </li> <li> <p>Can be represented as a percentage loss in thrust or internal pressure drop.</p> </li> </ul>"},{"location":"thinking/energy_flow/#mapping-to-flightdata","title":"Mapping to <code>FlightData</code>","text":"<p>Use the following from the <code>FlightData</code> object:</p> Quantity Related Energy <code>pressure</code>, <code>temperature</code>, <code>air_mass</code> Internal energy / enthalpy of air <code>altitude</code>, <code>velocity</code> Kinetic and potential of rocket and water <code>water_mass</code> Time evolution of remaining water (to compute expelled water) <code>air_mass</code> Time evolution of air loss <code>drag</code> Work done against drag <code>thrust</code> Related to momentum flux (especially for estimating exhaust velocity)"},{"location":"thinking/energy_flow/#summary","title":"Summary","text":"<p>You can express total energy flow as:</p> <p>$$ \\boxed{ E_{\\text{air-in}}(0) = E_{\\text{rocket}}(t) + E_{\\text{water-in}}(t) + E_{\\text{water-out}}(t) + E_{\\text{air-out}}(t) + E_{\\text{drag}} + E_{\\text{friction}} + \\text{(losses)} } $$</p> <p>Where each term represents the energy in various parts of the system at time $t$. The water/air \"as it left the rocket\" terms do represent the integral over the energy that exits the system \u2014 i.e., the total carried-away energy.</p>"},{"location":"thinking/optimizeFileStructure/","title":"Project File Organization and Thoughts","text":""},{"location":"thinking/optimizeFileStructure/#structure","title":"Structure:","text":"<pre><code>-waterrocketpy/\n-    \u251c\u2500\u2500 .github/\n-    \u2502   \u251c\u2500\u2500 ISSUE_TEMPLATE/\n-    \u2502   \u2514\u2500\u2500 workflows/\n-    \u251c\u2500\u2500 docs/\n-    \u2502   \u251c\u2500\u2500 examples/                   //documentation-specific assets.\n-    \u2502   \u251c\u2500\u2500 literature_sources/\n-    \u2502   \u251c\u2500\u2500 overrides/\n-    \u2502   \u251c\u2500\u2500 reference_runs/\n-    \u2502   \u2514\u2500\u2500 thinking/\n-    \u251c\u2500\u2500 examples/                       //for user-facing demos or runnable use-cases.\n-    \u2502   \u251c\u2500\u2500 ...\n-    \u251c\u2500\u2500 tests/\n-    \u2502   \u251c\u2500\u2500 ...\n-    \u251c\u2500\u2500 waterrocketpy/                  //what gets published on PyPI\n-    \u2502   \u251c\u2500\u2500 analysis/\n-    \u2502   \u251c\u2500\u2500 core/\n-    \u2502   \u251c\u2500\u2500 data/\n-    \u2502   \u251c\u2500\u2500 legacy/\n-    \u2502   \u251c\u2500\u2500 optimization/\n-    \u2502   \u251c\u2500\u2500 rocket/\n-    \u2502   \u251c\u2500\u2500 utils/\n-    \u2502   \u2514\u2500\u2500 visualization/\n-    \u251c\u2500\u2500 .gitignore\n-    \u251c\u2500\u2500 pyproject.toml\n-    \u251c\u2500\u2500 README.md\n-    \u2514\u2500\u2500 setup.cfg / setup.py            //dont need these python 3.6 or higher\n</code></pre>"},{"location":"thinking/optimizeFileStructure/#examples","title":"Examples","text":"<pre><code>You currently have two places for examples:\n\ndocs/examples/: These are great if they\u2019re tied to documentation generation (e.g., Jupyter Notebooks or markdown files).\n\nexamples/: This is the standard place for users to find runnable .py scripts.\n\n\u2705 Recommendation:\n\nKeep both, but make it clear:\n\nUse examples/ for user-facing demos or runnable use-cases.\n\nUse docs/examples/ for documentation-specific assets.\n\n\ud83d\udcdd Add a note in the README or a top-level CONTRIBUTING.md explaining the difference.\n</code></pre>"}]}